<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TinyFlare]]></title>
  <subtitle><![CDATA[用心生活，开心做游戏]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tinyflare.com/"/>
  <updated>2016-03-30T12:59:37.000Z</updated>
  <id>http://tinyflare.com/</id>
  
  <author>
    <name><![CDATA[Irenicus]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[今天去年做的一款《超级生命》游戏开源了]]></title>
    <link href="http://tinyflare.com/2016/03/30/superlife-2016-03-30/"/>
    <id>http://tinyflare.com/2016/03/30/superlife-2016-03-30/</id>
    <published>2016-03-30T12:36:51.000Z</published>
    <updated>2016-03-30T12:59:37.000Z</updated>
    <content type="html"><![CDATA[<p>游戏去年已经在itunes上和googleplay上线，是一款<a href="https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F" target="_blank" rel="external">细胞自动机</a>游戏，包括了几十个关卡和编辑器，玩家可以通过编辑器添加关卡。<br><a href="https://itunes.apple.com/us/app/super-life-game/id961888931" target="_blank" rel="external">itunes下载地址</a><br><a href="https://play.google.com/store/apps/details?id=com.wanax.superlife" target="_blank" rel="external">google play下载地址</a></p>
<p><a href="https://github.com/lwwhb/SuperLife.git" target="_blank" rel="external">源码下载地址</a><br>请使用cocos2dx 3.6版本编译， 源码之下，了无秘密，我就不做过多说明了</p>
<img src="/2016/03/30/superlife-2016-03-30/500x500bb.jpg">
<a id="more"></a>
<img src="/2016/03/30/superlife-2016-03-30/500x500bb1.jpg">
<img src="/2016/03/30/superlife-2016-03-30/500x500bb2.jpg">
<img src="/2016/03/30/superlife-2016-03-30/500x500bb3.jpg">
<img src="/2016/03/30/superlife-2016-03-30/500x500bb4.jpg">]]></content>
    <summary type="html">
    <![CDATA[<p>游戏去年已经在itunes上和googleplay上线，是一款<a href="https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F">细胞自动机</a>游戏，包括了几十个关卡和编辑器，玩家可以通过编辑器添加关卡。<br><a href="https://itunes.apple.com/us/app/super-life-game/id961888931">itunes下载地址</a><br><a href="https://play.google.com/store/apps/details?id=com.wanax.superlife">google play下载地址</a></p>
<p><a href="https://github.com/lwwhb/SuperLife.git">源码下载地址</a><br>请使用cocos2dx 3.6版本编译， 源码之下，了无秘密，我就不做过多说明了</p>
<img src="/2016/03/30/superlife-2016-03-30/500x500bb.jpg">]]>
    
    </summary>
    
      <category term="SuperLife" scheme="http://tinyflare.com/tags/SuperLife/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="代码开源" scheme="http://tinyflare.com/tags/%E4%BB%A3%E7%A0%81%E5%BC%80%E6%BA%90/"/>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《地牢笑声》发布了]]></title>
    <link href="http://tinyflare.com/2016/03/06/Dungeon-Released/"/>
    <id>http://tinyflare.com/2016/03/06/Dungeon-Released/</id>
    <published>2016-03-06T12:52:40.000Z</published>
    <updated>2016-03-06T13:03:02.000Z</updated>
    <content type="html"><![CDATA[<h3 id="《地牢笑声》发布了，欢迎下载支持">《地牢笑声》发布了，欢迎下载支持</h3><p><strong>IOS 下载地址</strong>：<a href="https://itunes.apple.com/cn/app/dungeon-laughter/id1050626034" target="_blank" rel="external">https://itunes.apple.com/cn/app/dungeon-laughter/id1050626034</a></p>
<p><strong>GooglePlay 下载地址</strong>：<a href="https://play.google.com/store/apps/details?id=com.wanax.voxelexplorer" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wanax.voxelexplorer</a></p>
<img src="/2016/03/06/Dungeon-Released/androidbanner_cn.png">
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="《地牢笑声》发布了，欢迎下载支持">《地牢笑声》发布了，欢迎下载支持</h3><p><strong>IOS 下载地址</strong>：<a href="https://itunes.apple.com/cn/app/dungeon-laughter/id1050]]>
    </summary>
    
      <category term="Dungeon Laughter" scheme="http://tinyflare.com/tags/Dungeon-Laughter/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="地牢笑声" scheme="http://tinyflare.com/tags/%E5%9C%B0%E7%89%A2%E7%AC%91%E5%A3%B0/"/>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ProBuilder文档翻译]]></title>
    <link href="http://tinyflare.com/2016/03/02/ProBuilder-doc/"/>
    <id>http://tinyflare.com/2016/03/02/ProBuilder-doc/</id>
    <published>2016-03-02T03:09:30.000Z</published>
    <updated>2016-03-06T13:11:37.000Z</updated>
    <content type="html"><![CDATA[<img src="/2016/03/02/ProBuilder-doc/procore_banner.png">
<h5 id="重要链接">重要链接</h5><ul>
<li>最新文档:<a href="www.procore3d.com/docs/probuilder">www.procore3d.com/docs/probuilder</a></li>
<li>视频教程＋全部信息:<a href="www.procore3d.com/probuilder">www.procore3d.com/probuilder</a></li>
</ul>
<h5 id="访问源文件，建立、测试和在线下载地址:">访问源文件，建立、测试和在线下载地址:</h5><p>你必须先注册(转发你的购买发票到<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x63;&#111;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#112;&#114;&#x6f;&#99;&#111;&#114;&#101;&#51;&#x64;&#x2e;&#x63;&#111;&#x6d;">&#x63;&#111;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#112;&#114;&#x6f;&#99;&#111;&#114;&#101;&#51;&#x64;&#x2e;&#x63;&#111;&#x6d;</a>),你可以通过：</p>
<ul>
<li>在<a href="http://www.procore3d.com/usertoolbox" target="_blank" rel="external">ProCore3D User Toolbox</a>网站注册一个账号，来访问安装文件，包括ProBuilder源代码</li>
<li>加入Beta测试组来帮助我们更早的测试和构建ProBuilder!</li>
</ul>
<p>谢谢你购买ProBuilder,你的支持会让我们不断更新和发展所有Procore工具！</p>
<h2 id="目录">目录</h2><ul>
<li><a href="##有用的链接和信息">有用的链接和信息</a></li>
<li><a href="##ProBuilder是什么？">ProBuilder是什么？</a></li>
<li><a href="##安装与更新">安装与更新</a></li>
<li><a href="##使用ProBuilder的基础">使用ProBuilder的基础</a></li>
<li><a href="##界面预览">界面预览</a></li>
<li><a href="##创建和编辑几何体">创建和编辑几何体</a></li>
<li><a href="##纹理与UV">纹理与UV</a></li>
<li><a href="##顶点色">上色</a></li>
<li><a href="##Entity的类型">Entity的类型</a></li>
<li><a href="##优化">优化</a></li>
<li><a href="##光照贴图">光照贴图</a></li>
<li><a href="##光滑群组">光滑群组</a></li>
<li><a href="##自定义ProBuilder">自定义ProBuilder</a></li>
<li><a href="##故障排除">故障排除</a></li>
<li><a href="##特殊菜单项">特殊菜单项</a></li>
<li><a href="##提示与技巧">提示与技巧</a></li>
<li><a href="##快捷键">快捷键</a></li>
<li><a href="##特征索引与版本比较">特征索引</a></li>
<li><a href="##特征索引与版本比较">ProBuild高级版vs基本版比较</a></li>
</ul>
<a id="more"></a>
<h2 id="有用的链接和信息">有用的链接和信息</h2><p><a href="http://www.procore3d.com/" target="_blank" rel="external">网站</a>: 所有ProCore工具，资源及信息的中心</p>
<h5 id="联系ProCore:">联系ProCore:</h5><ul>
<li>Email: <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x63;&#x6f;&#110;&#116;&#x61;&#99;&#116;&#x40;&#112;&#114;&#111;&#x63;&#111;&#114;&#101;&#51;&#100;&#x2e;&#99;&#111;&#x6d;">&#x63;&#x6f;&#110;&#116;&#x61;&#99;&#116;&#x40;&#112;&#114;&#111;&#x63;&#111;&#114;&#101;&#51;&#100;&#x2e;&#99;&#111;&#x6d;</a></li>
<li>Facebook: <a href="www.facebook.com/probuilder3d">www.facebook.com/probuilder3d</a></li>
<li>Twitter: <a href="www.twitter.com/probuilder3d">www.twitter.com/probuilder3d</a></li>
</ul>
<p><strong><a href="http://www.procore3d.com/forum" target="_blank" rel="external">支持和故障排除</a></strong>:请直接向官方支持论坛报告错误或问题！论坛也是一个讨论，评价，交流和灵感获得的地方。</p>
<p><strong><a href="http://eepurl.com/waKUX" target="_blank" rel="external">快讯</a></strong>:订阅并通过Email接收ProCore tools的新信息，通常每个月1次或2次。</p>
<p><strong><a href="http://www.procore3d.com/probuilder" target="_blank" rel="external">视频教程</a></strong>:在使用ProBuilder前花一小段休息时间观看视频教程，你用不了多长时间就会成为一名高手。</p>
<h2 id="ProBuilder是什么？">ProBuilder是什么？</h2><p>视频简介: <a href="http://www.youtube.com/watch?v=Nomx1LNk7r8" target="_blank" rel="external">http://www.youtube.com/watch?v=Nomx1LNk7r8</a></p>
<p><strong>ProBuilder</strong>是一个编辑器扩展插件，它能让你在Unity编辑中可以无缝的构建，编辑任何自定义几何体，并可以对几何体应用纹理贴图。它具有非常流畅和直观的工作流程。这是结合老式“BSP树构建风格”的功能齐全的3D建模和UV展开工具。<br>也包括一些辅助工具：</p>
<ul>
<li>顶点和面上色</li>
<li>自定义碰撞结构</li>
<li>触发区</li>
<li>有效的遮挡设置</li>
<li>材质面板在每个面对象上的应用</li>
<li>合并渲染批次优化</li>
<li>输出成OBJ格式<br>…以及其他功能</li>
</ul>
<p><strong>ProBuilder基础版</strong>这是ProBuilder的核心部分，流水线的处理对速度和操作简单是非常必要的。使用基础版你可以很快的打造出一个漂亮的早期解构，包括道具、墙体、掩体、车辆或其他虚拟的任何东西。测试并快速调整，然后快速的替换成最终的模型，如果你的美术能赶上你的速度的话。ProBuild基本版包括一个快速对每个面上色而不用增加渲染批次，你也可以指定团队区域，或者用测试的纹理替代。</p>
<hr>
<p><em>重要提示:此文档包含了所有ProBuild高级版本中的功能、行为以及工具的介绍。ProBuild基本版的功能只是这些功能的子集。如果你使用基本版，请查阅<a href="##ProBuild高级版vs基本版比较">高级版与基本版功能比较</a>。PreBuilder高级版本工具将会在菜单中显示蓝色。</em></p>
<hr>
<h2 id="安装与更新">安装与更新</h2><p><strong>警告</strong>:升级过程是不可逆的，如果出现错误，你几乎会丢失所有的工作。所以提前做好你的整个项目的备份。</p>
<h4 id="我应该遵循什么规则去升级">我应该遵循什么规则去升级</h4><p>这取决于你目前已经安装的ProBuilder的版本。版本不同过程也不同。使用下面这个图标来确定你应该遵循哪些指南。</p>
<table>
<thead>
<tr>
<th>当前使用版本</th>
<th>想要升级的版本</th>
<th>过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>没有安装</td>
<td>基本版</td>
<td><a href="####标准升级">标准升级</a></td>
</tr>
<tr>
<td>没有安装</td>
<td>高级版</td>
<td><a href="####标准升级">标准升级</a></td>
</tr>
<tr>
<td>基本版2.4.8+</td>
<td>基本版2.4.8+</td>
<td><a href="####标准升级">标准升级</a></td>
</tr>
<tr>
<td>高级版2.4.8+</td>
<td>高级版2.4.8+</td>
<td><a href="####标准升级">标准升级</a></td>
</tr>
<tr>
<td>PreBuilder2.1.0－2.3.x</td>
<td>高级版</td>
<td><a href="####通过升级包升级">升级包</a></td>
</tr>
<tr>
<td>PreBuilder2.4.0－2.4.7</td>
<td>高级版</td>
<td><a href="####DLL重命名升级">DLL重命名升级</a></td>
</tr>
<tr>
<td>ProtoType2.4-2.6</td>
<td>基本版/高级版</td>
<td><a href="####ProtoType 升级到基础版或高级版">ProtoType升级</a></td>
</tr>
<tr>
<td>ProBuilder源代码(任何版本)</td>
<td>任何版本</td>
<td><a href="####通过升级包升级">升级包</a></td>
</tr>
<tr>
<td>ProBuilder(任何版本)</td>
<td>ProBuilder源代码(任何版本)</td>
<td><a href="####通过升级包升级">升级包</a></td>
</tr>
</tbody>
</table>
<h4 id="标准升级">标准升级</h4><p>如果你从2.4.7或更高版本升级(无论是标准版还是高级版)，更新你的ProBuilder工程只需要简单的导入新包。在某些情况下，可能会失败，所以还是要提前保证你的工程有备份。如果简单导入新包失败的话，那么请遵循这个DLL重命名的升级指南进行升级。</p>
<h4 id="DLL重命名升级">DLL重命名升级</h4><p><strong>在Unity5中升级DLL版本</strong><br><em>视频教程:<a href="https://www.youtube.com/watch?v=mpluzo9Zrxs&amp;feature=youtu.be" target="_blank" rel="external">Youtube</a></em></p>
<ul>
<li>导入新的ProBuilder包。确保窗口中所有对象都被勾选导入。* </li>
<li>导入后，关闭ProBuilder关于版本的日志窗口。* </li>
<li>现在可能会在控制台窗口中有错误。这是预料之中的。</li>
<li>导航到<code>ProCore &gt; ProBuilder &gt; Classes</code>目录下。</li>
<li>右键<code>ProBuilderCore-Unity5</code>文件选择<code>Show In Explorer</code>。</li>
<li>在文件浏览器中删除文件<code>ProBuilderCore-Unity5</code>和<code>ProBuilderMeshOps-Unity5</code>。</li>
<li>接下来重命名文件<code>ProBuilderCore-Unity6</code>和<code>ProBuilderMeshOps-Unity6</code>成<code>ProBuilderCore-Unity5</code>和<code>ProBuilderMeshOps-Unity5</code>， 如果启用了可见元数据文件，不用担心去修改他们的文件名，Unity会帮你修改。</li>
<li>保持打开文件浏览器，导航到上一层进入<code>Editor</code> 文件夹。</li>
<li>遵循相同的过程，删除<code>ProBuilderEditor-Unity5</code>然后重命名<code>ProBuilderEditor-Unity6</code>成<code>ProBuilderEditor-Unity5</code>。</li>
<li>再次打开Unity，该项目将重新编译。</li>
<li>你可能会从控制台中看到一些过期脚本中的错误，这取决于你从哪个版本升级过来。点击错误找到文件，然后删除它(确保它只在ProBuilder文件夹下，不要误删除你自己的脚本)。<ul>
<li>一般要删除的实效文件:<ul>
<li><code>ProBuilder &gt; Editor &gt; MenuItems &gt; File &gt; pb_SaveLoad</code></li>
<li><code>ProBuilder &gt; Editor &gt; MenuItems &gt; Tools &gt; pb_VertexPainter</code></li>
<li><code>ProBuilder &gt; Editor &gt; MenuItems &gt; Tools &gt; pb_MaterialSelectionTool</code></li>
<li><code>ProCore &gt; Shared</code>(整个文件夹都失效了)</li>
</ul>
</li>
</ul>
</li>
<li>完成！</li>
</ul>
<p><strong>从源代码版本升级</strong></p>
<ul>
<li>在导入新包之前，删除<code>ProCore &gt; ProBuilder</code>文件夹(你也可以删除<code>ProCore &gt; Shared</code>文件夹，如果它存在的话)</li>
<li>导入新的ProBuilder包</li>
<li>完成!</li>
</ul>
<h4 id="通过升级包升级">通过升级包升级</h4><p>如果你的ProBuilder工程从小于2.4版本(通过Tool/ProBuilder/About检查你的当前版本)开始升级的话，请遵循以下步骤。如果你是从源代码版本切换到DLL版本，这个方法也适用</p>
<p><a href="https://www.youtube.com/watch?v=O-Dz0Q3KgCs" target="_blank" rel="external">Yotube教程</a></p>
<p><a href="http://parabox.co/probuilder/upgrade.html" target="_blank" rel="external">升级包下载</a></p>
<ul>
<li><strong>备份你的工程</strong></li>
<li>在导入ProBuilderUpgradeKit包前导入新版本的ProBuilder(在用户工具箱中可以下载，或者使用捆绑的ProBuilder包)。</li>
<li>运行<code>Tools &gt; ProBuilder &gt; Upgrade &gt; Batch Prepare Scenes for Upgrade</code>。</li>
<li>删除ProBuilder文件夹，可选择删除ProCore &gt; Shared文件夹(如果你删除了这个文件夹，确保夜要更新ProGrids)。</li>
<li>导入新的ProBuilder包。</li>
<li>运行<code>Tools &gt; ProBuilder &gt; Upgrade &gt; Batch Re-attach ProBuilder Scripts</code>。</li>
<li>删除 ProBuilderUpgradeKit 文件夹。</li>
</ul>
<h4 id="ProtoType_升级到基础版或高级版">ProtoType 升级到基础版或高级版</h4><p><strong>从ProtoType升级到基础版或高级版</strong></p>
<ul>
<li>重命名<code>ProCore/Prototype</code>文件夹为<code>ProCore/ProBuilder</code>。</li>
<li>遵循<a href="####通过升级包升级">升级包</a>指南进行升级。</li>
</ul>
<h2 id="使用ProBuilder的基础">使用ProBuilder的基础</h2><p>视频教程：<a href="http://www.youtube.com/watch?v=Tylp-UzEm84" target="_blank" rel="external">http://www.youtube.com/watch?v=Tylp-UzEm84</a></p>
<p>在Unity编辑器中通过ProBuilder你可以建立、编辑、UV展开或者应用纹理贴图到几何体上，类似于在3DS Max,Maya或者Blender中的3D建模.显然这里有许多潜在的复杂性操作，但我们会尽量避免，保持Unity的工作流程平滑，尽可能的简单。ProBuilder采用了简单的快速交换和编辑模式。</p>
<p>这里有四个编辑工作模式：<strong>Object</strong>,<strong>Vertex</strong>,<strong>Edge</strong>和<strong>Face</strong>。</p>
<ul>
<li><strong>Object</strong>模式是Unity标准的对对象的控制。</li>
<li><strong>Vertex</strong>模式是对模型网格的顶点进行编辑。</li>
<li><strong>Edge</strong>模式是对模型网格的边进行编辑。</li>
<li><p><strong>Face</strong>模式是对模型网格的面进行编辑。</p>
<p>  Vertex,Edge或Face都被认为是元素，3DS Max用户会认为是”Sub-Object”。</p>
</li>
</ul>
<p>当使用ProBuilder时，你会经常在某一个编辑模式中操作。当前模式会被显示在Unity的SceneVie上的”Mode Indicator”。这个”Mode Indicator”可以通过点击在模式之间切换（多棒的设定）,或者你使用键盘上的快捷键(<code>G</code>在对象模式和任何元素模式间切换(<code>Vextex</code>,<code>Edge</code>,和<code>Face</code>都被认为是”<code>Element</code>“模式))。</p>
<p><strong>编辑几何体</strong>,这和你所期望的一样简单:进入任何”Element”模式，然后使用Unity中的标准控制(移动,旋转和缩放)进行顶点、边、面的编辑。使用徒刑用户面板来进行更复杂的行为操作，如Flipping,Bridging,Connecting,Welding等等。 查看<a href="##界面预览">界面预览</a>和<a href="##创建一个可编辑的几何体">创建一个可编辑的几何体</a>章节查看功能的更多细节.</p>
<pre><code><span class="label">小提示:</span>选择一个面，然后尝试在移动、旋转或缩放的同时，按住<span class="escape">`S</span>hift<span class="escape">`按</span>键 Instant extrusion!
</code></pre><p><strong>应用材质和UV编辑</strong>或者”Texturing”,这部分已经在ProBuilder v2.3版本被重写了。你现在可以通过自动 UV展开或者手动UV展开的选项来对快速和细力度的控制。只要打开“UV编辑窗口”，然后进入Element模式并且通过Vexter,edge和Face来编辑UV。变化会立刻被呈现在Unity的SceneView中。类似的<code>几何体编辑</code>，UV行为面板提供了更复杂的操作如Sew，Collapse，Project Faces等等。查看<a href="##界面预览">界面预览</a>和<a href="##纹理与UV">纹理与UV</a>章节查看模型纹理功能的更多细节.</p>
<h2 id="界面预览">界面预览</h2><p>视频教程：<a href="http://www.youtube.com/watch?v=U7HEG0iKlzU" target="_blank" rel="external">http://www.youtube.com/watch?v=U7HEG0iKlzU</a></p>
<h4 id="打开用户图形界面面板">打开用户图形界面面板</h4><p>为了使用ProBuilder创建和编辑，你需要将GUI面板打开。这里可以通过Unity顶部菜单栏调出:<br><code>Tools &gt; ProBuilder &gt; Open Probuilder Window</code></p>
<p>这将打开ProBuilder窗口，默认情况下窗口时一个可停靠面板，可以通过窗口上右键在停靠和浮动选项中切换。</p>
<h4 id="使用用户图形界面面板">使用用户图形界面面板</h4><p>ProBuilder的编辑窗口基于当前编辑器状态可以动态的改变显示。例如，当在面编辑模式下对一个网格进行具体操作时会被显示(extrude挤压,subdivide细分，等等)。切换到边编辑模式下回现实边的特定功能，如Birdge或Connect Edges。</p>
<h4 id="面板区域(1)-工具">面板区域(1)-工具</h4><p>在主GUI面板上<strong>工具</strong>段总是一直可用的。这些按钮时被单独分开的，浮动面板包含一下用途:</p>
<ul>
<li><strong>Shape</strong><ul>
<li>打开<a href="####通过形状面板创建对象">Shape Tool</a>面板，你可以从提供的各种模版中创建新的对象，包括Pipe(管)、Arch(拱)、Dome(穹顶)<br>、Door(门)和其他。  </li>
</ul>
</li>
<li><strong>Material</strong>(高级版功能)<ul>
<li>打开<a href="####材质面板">Material Palette</a>面板可以快速访问ProBuilder对象的每个面上的材质。详情请看<a href="##纹理与UV">纹理与UV</a> 。</li>
</ul>
</li>
<li><strong>UV Editor</strong>(高级版功能)<ul>
<li>打开强大的[UV Editor]窗口，这里有操作UV的所有设置，包括自动展开和手动展开。这还有很多Cover,所以一定要查看<a href="##纹理与UV">纹理与UV</a>。</li>
</ul>
</li>
<li><strong>Vertex Colors</strong><ul>
<li>打开<a href="####顶点色面板">Vertex Color Palette</a>或者<a href="####顶点画笔窗口">Vertex Color Painter</a>来应用顶点到你的模型上。使用+来切换到选择工具，具体请查看<a href="##顶点色">顶点色</a>章节。</li>
</ul>
</li>
<li><strong>Smoothing</strong>(高级版功能)<ul>
<li>打开<a href="##光滑群组">Smoothing Groups</a>面板，该面板可以让你在你的几何体上自定义设置是平滑边缘还是硬边缘。具体请查看<a href="##光滑群组">光滑群组</a>章节。</li>
</ul>
</li>
</ul>
<h4 id="面板区域(2)-选择">面板区域(2)-选择</h4><p>这里的控制设置如何与场景中的ProBuilder物体进行交互。</p>
<ul>
<li><strong>World</strong>/<strong>Plane</strong>/<strong>Local</strong><ul>
<li>这个下拉列表定义了当选择模型网格元素时(vertices, faces, edges)场景坐标轴朝向。细节查看<a href="###坐标处理">坐标轴</a>章节。</li>
</ul>
</li>
<li><strong>Select All/Select Visible</strong><ul>
<li>如果使用了Select All，则拖拽选中元素将选择对象上的所有元素无论是否是隐藏的几何体。如果使用了Select Visible，则只有你能看到的元素会被选中。 </li>
</ul>
</li>
<li><strong>Grow</strong><ul>
<li>将相邻元素添加到当前选择，可以选择测试，看看他们是否在一个特定的角度(使用+来切换这个行为)。 </li>
</ul>
</li>
<li><strong>Shrink</strong><ul>
<li>与Grow操作是反相的：在允许范围内删除当前选择的元素。 </li>
</ul>
</li>
<li><strong>Invert</strong><ul>
<li>选择当前选择的逆元素，例如，所有没被选择的元素将被选中，当前选择的将变为不被选择。 </li>
</ul>
</li>
<li><strong>Loop</strong>(只针对边编辑模式)<ul>
<li>从每个选定的边选择一个边循环。 </li>
</ul>
</li>
<li><strong>Ring</strong>(只针对边编辑模式)<ul>
<li>从每个选定的边选择一个边环。</li>
</ul>
</li>
</ul>
<h4 id="面板区域(3)-对象">面板区域(3)-对象</h4><p>这些工具会影响整个网格对象(如顶点，面和边元素)。具体请查看<a href="###对象操作">对象操作</a>章节。</p>
<h4 id="面板区域(4)-顶点／边／面">面板区域(4)-顶点／边／面</h4><p>这个面板会根据当前模式发生变化，始终只显示适用的行为。有关可用工具的详细信息见<a href="###几何体操作">几何体行为</a>章节。</p>
<h4 id="面板区域(5)-实体">面板区域(5)-实体</h4><p>主GUI面板的底部区域是为实体行为保留的。这些都是用来转换ProBuilder对象为特殊的实体类型的，通过开/关进行可见性切换，详情请见<a href="##Entity的类型">Entity的类型</a>章节。</p>
<h2 id="创建和编辑几何体">创建和编辑几何体</h2><p>开始使用ProBuilder进行3D工作，可以查看视频教程:<br>视频教程：<a href="http://www.youtube.com/watch?v=c8GbEfi51Cc" target="_blank" rel="external">http://www.youtube.com/watch?v=c8GbEfi51Cc</a></p>
<hr>
<p>3D建模新手？这个文档不是一个全面的3D建模指南。所以我们高度推荐在网上搜索好的”Introduction to 3D Modeling”课程－－任何基础技术，指导方针，最好练习等等。</p>
<hr>
<h3 id="坐标处理">坐标处理</h3><p>这个空间下拉列表表示当前被用于编辑几何体的坐标空间。</p>
<table>
<thead>
<tr>
<th>坐标空间</th>
<th>描述        </th>
</tr>
</thead>
<tbody>
<tr>
<td>平面(Planar)</td>
<td>在选择面的法向量方向上运动      </td>
</tr>
<tr>
<td>全局(Global)</td>
<td>在世界坐标系下运动(所有都相同)</td>
</tr>
<tr>
<td>本地(Local)</td>
<td>相对于对象变换的运动(模型空间)   </td>
</tr>
</tbody>
</table>
<img src="/2016/03/02/ProBuilder-doc/coordinate_example.png">    
<pre><code>不能理解？这可能是一个令人困惑的主题，第一次遇到，坚持使用<span class="string">"Global"</span>对每一个对象一遍遍尝试，会比我解释更容易理解。你很快就会发现这些复杂的事情会变的简单。用键盘上的<span class="string">"P"</span>快捷键来在不同坐标空间模式转换。    
</code></pre><h3 id="创建几何体">创建几何体</h3><p>ProBuilder与主流建模工具类似，你可以从基础几何形状开始，然后构建出自己的想要的作品。</p>
<h4 id="创建你的第一个ProBuilder对象">创建你的第一个ProBuilder对象</h4><p>最简单和最常用的形状是1立方米的立方体。通过快捷键<code>&quot;Ctrl-K&quot;</code>立刻将立方体实例化进你的场景。</p>
<h4 id="通过形状面板创建对象">通过形状面板创建对象</h4><p><strong>Shaper Tool</strong>可以在任何时间从ProBuilder主GUI中打开(<strong>Shape</strong>按钮在<strong>Tools</strong>段)，或者使用快捷键<code>&quot;Ctrl-Shift-K&quot;</code>。</p>
<pre><code>ProBuilder提供了多种形状的选择。都有自己独特的生成选项。确保对每一个形状都控制进行尝试，他们可以节省你的时间
</code></pre><p>打开<strong>Shape Panel</strong>, 你会看到<strong>Shape Preview</strong>(一个蓝色纹理的ProBuilder对象)出现在场景中。你可以移动旋转和缩放<strong>Shape Preview</strong>就像其它提交的对象。然后它只是一个预览，当关闭<strong>Shape Panel</strong>就会消失。</p>
<h4 id="Shape_Tool用户界面">Shape Tool用户界面</h4><ul>
<li><strong>Show Preview</strong><ul>
<li>通过复选框开关显示预览形状。 </li>
</ul>
</li>
<li><strong>Center Preview</strong><ul>
<li>在Scene中点击你面前的Shape Preview中心。 </li>
</ul>
</li>
<li><strong>Shape Selector</strong><ul>
<li>从下来列表中选择一个形状。 </li>
</ul>
</li>
<li><strong>Customization Area</strong><ul>
<li>这里每一个形状都能显示其可定制选项。 </li>
</ul>
</li>
<li><strong>Build Shape</strong><ul>
<li>点击”commit”将形状创建到场景中。</li>
</ul>
</li>
</ul>
<h4 id="可用的形状">可用的形状</h4><ul>
<li>Cube 立方体</li>
<li>Stair 楼梯</li>
<li>Prism 棱镜</li>
<li>Cylinder 圆柱体</li>
<li>Plane 平面</li>
<li>Door 门</li>
<li>Pipe 管子</li>
<li>Cone 锥体</li>
<li>Sprite 精灵</li>
<li>Arch 拱形</li>
<li>Icosphere 正多面体</li>
<li>Torus (donut) 环面</li>
<li>Custom 自定义</li>
</ul>
<h3 id="模型与元素">模型与元素</h3><p>正如基本界面概述部分所提到的，ProBuilder使用了一个“模式”系统保证了 Unity工作流的简洁与高效。让我们把这些模式再说一遍，更多细节。</p>
<p><strong>Object</strong>,<strong>Vertex</strong>,<strong>Edge</strong>和<strong>Face</strong>都是主要模式。这样的设计让你可以在彼此之间快速切换，能让ProBuild和non-ProBuild部分能无缝的衔接工作。这里还有一些额外的编辑模式如UV场景处理和Vertex Painter,但对于现在这些都不重要。</p>
<p>要做模式切换，你可以使用场景视图工具栏(如下所示)或快捷键(G 在元素与对象模式切换，H在顶点，边和面编辑模式切换)。</p>
<img src="/2016/03/02/ProBuilder-doc/mode_toolbar.png">
<table>
<thead>
<tr>
<th>模式</th>
<th>描述        </th>
</tr>
</thead>
<tbody>
<tr>
<td>Object</td>
<td>标准Unity工作流，ProBuilder objects和正常GameObjects一样     </td>
</tr>
<tr>
<td>Vertex</td>
<td>ProBuilder 网格的顶点选择。拖动选择或点击顶点来移动，选择或缩放</td>
</tr>
<tr>
<td>Edge</td>
<td>网格对象的边选择。 </td>
</tr>
<tr>
<td>Face</td>
<td>网格对象的面选择。(尝试在一个网格上点击任何地方来看到该面的高亮)。</td>
</tr>
</tbody>
</table>
<p><strong>元素模式</strong>是ProBuilder真正核心的模式，你可以查看和编辑顶点，边和面的ProBuilder对象。类似于3DS Max,Maya,Blender等建模工具一样。</p>
<pre><code>使用方法：点击GUI顶部的元素模式按钮，立即进入元素模式(顶点，边，面)，或者点击键盘的快捷键<span class="keyword">G</span>. 一旦你在一个模式下，你可以点击键盘快捷键<span class="keyword">H</span>在元素模式之间切换。
</code></pre><p>顶点和边的视觉效果会被显示在当前选择的ProBuilder Object上。如果你没有看到切换元素模式时场景的变化，尝试选择一个ProBuilder Object。</p>
<ul>
<li>Vertex<ul>
<li>给你更精细的控制权，对象操作被分解到顶点。选择的ProBuilder Object将显示他们的顶点为蓝色的点，并且选择的顶点将被显示成绿色。</li>
</ul>
</li>
<li>Edge<ul>
<li>ProBuilder将以高亮的红色显示与你的鼠标最近的边，所有可选择的边都被渲染成蓝色，而当前选中的将现实为绿色。 </li>
<li>编辑边提供了一些更先进的几何编辑功能。如插入边缘循环(Loop)和桥接边缘(Bridge)。</li>
</ul>
</li>
<li><p>Face </p>
<ul>
<li><p>允许你选择和操作ProBuilder Objects的面，选择的面将被显示称为高亮的浅蓝色。</p>
<p>你知道吗? 你可以在Perferences面板中自定义元素图形的颜色。</p>
</li>
</ul>
</li>
</ul>
<h4 id="选择和操作元素">选择和操作元素</h4><p>在ProBuilder中选择和操作元素就像在Unity中一样，不需要重新学你。你可以：</p>
<ul>
<li>点击选择一个。</li>
<li>拖拽框选多个。</li>
<li>在点击或拖拽选择时按住Shift进行加选或减选元素。</li>
</ul>
<p>ProBuilder也添加了一些特殊的元素选择方式:</p>
<ul>
<li>在边和顶点模式下，点击一个面来选择所有这个面上的顶点和边。</li>
<li>双击一个对象，当在一个元素模式下时，选择对象上的所有元素(当在边缘模式下双击选择一个边缘循环)</li>
</ul>
<h3 id="对象操作">对象操作</h3><p>一些工具的操作是在网格级别上的(相对于每个元素)。本节涵盖了对整个对象的操作工作。</p>
<ul>
<li>Merge<ul>
<li>点击此按钮将会合并所有选择的ProBuilder对象到一个ProBuilder对象，并可以选择保留或删除原件。</li>
<li>如果你选择保留原件，他们会被在场景中反激活，他们的名字将以灰色会出现层次结构的表中。<ul>
<li>合并对象时一个非常好的方式来试你的游戏更有效的运行，因为它合并了网格降低了Draw calls，这对移动游戏非常重要。</li>
</ul>
</li>
</ul>
</li>
<li>Mirror<ul>
<li>点击此按钮打开镜像工具。从中选择需要镜像的轴，并点击”Mirror”复制和镜像选择的ProBuilder对象。</li>
</ul>
</li>
<li>Flip Normals<ul>
<li>在选择的对象上反相所有面的方向。这是方便快速创建内面的物体。创建一个立方体，放大它，然后用<strong>Flip Normals</strong> 来将面朝内向。</li>
</ul>
</li>
<li>Subdivide<ul>
<li>拆分选择对象的每个面，允许更高级别的细节建模。</li>
</ul>
</li>
<li>Set Pivot<ul>
<li>在对象面板移动网格中心点到对象包裹体的中心点。<strong>Set Pivot</strong>操作在不同的<strong>Element</strong>操作面板上行为表现也不同</li>
</ul>
</li>
</ul>
<h3 id="几何体操作">几何体操作</h3><p>基于不同的工作模式可用的几何体操作也是不同。ProBuilder GUI会自动的现实有效的操作，不可用的工具被显示成禁用按钮。一些操作在多种模式下(所有元素)可用，但只有当某些标准被满足时才能用(通常意味着某一个面被选中)。</p>
<h4 id="所有元素">所有元素</h4><ul>
<li>SetPivot<ul>
<li>移动网格的中心点到所有选择元素的平均中心。</li>
<li>快捷键:(Ctrl+J)</li>
</ul>
</li>
<li>Extrude<ul>
<li>从当前选择的面上拔出创建一个新面，并且连接没个边缘。你也可以挤压边缘，但只有在边只有一个开放口时(没有面连接)。当拖拽一个选择面时按住Shift按键，这是一个挤压的快捷方式。</li>
<li>快捷键:(Ctrl+E),Shift+拖拽操作</li>
</ul>
</li>
<li>Flip Normals<ul>
<li>每个面的操作，翻转每个选择面的方向。</li>
<li>快捷键:(Alt+N) </li>
</ul>
</li>
<li>Delete<ul>
<li>从对象上删除选择的面</li>
<li>快捷键:(BackSpace)或者(Delete在Mac上)。</li>
</ul>
</li>
<li>Detach<ul>
<li>从当前对象中分离选择的面。可以从一些面上创建一个新的对象，或将他们放进一个子网格对象。 </li>
</ul>
</li>
<li>Merge Faces<ul>
<li>删除两个或多个相邻面之间的边。 </li>
</ul>
</li>
</ul>
<h4 id="Vertex">Vertex</h4><ul>
<li>Connect(连接)<ul>
<li>创建一个新边链接所选顶点。</li>
<li>快捷键:(Alt+E)</li>
</ul>
</li>
<li>Weld(焊接)<ul>
<li>在一个设定距离内合并顶点，使用＋下拉按钮来调整这个距离。</li>
<li>快捷键:(Alt+C)</li>
</ul>
</li>
<li>Collapse<ul>
<li>与Weld焊接类似，除了没有距离限制:所有选定顶点讲合并为一个单一的点。</li>
<li>快捷键:(Alt+C) </li>
</ul>
</li>
<li>Split<ul>
<li>分离一个顶点为独立的2个顶点，这样他们就可以彼此独立的移动了。</li>
<li>快捷键:(Alt+X)</li>
</ul>
</li>
</ul>
<h4 id="Edge">Edge</h4><ul>
<li>Bridge<ul>
<li>在选择的两个边之间创建一个新面，确保每个边必须有一个自由口 </li>
<li>快捷键:(Alt+B)</li>
</ul>
</li>
<li>Connect<ul>
<li>插入一个边连接每个选定边的中心。</li>
<li>快捷键:(Alt+E)</li>
</ul>
</li>
<li>Insert Loop<ul>
<li>在每个选定边的中心插入一个边缘环。</li>
<li>快捷键:(Alt+U)</li>
</ul>
</li>
</ul>
<h4 id="Face">Face</h4><ul>
<li>Subdiv Face(细分面)<ul>
<li>分离每个选定的面，在每个边的中心添加一个顶点， 并连接他们到选定面面的中心。</li>
<li>快捷键:(Alt+E)</li>
</ul>
</li>
</ul>
<h3 id="更好的构建技巧">更好的构建技巧</h3><p>这里有一些基本的技巧，诀窍和建议用来ProBuilder建模。</p>
<ul>
<li><p><strong>使用ProGrid!</strong> 在使用ProBuilder时，你经常会构建硬表面模型，许多部分需要完全一致，匹配大小等等。ProGrids将会让你的对象和元素贴服这些格子来节省你对齐的时间。你的创建对象将看起来更好。</p>
</li>
<li><p><strong>保持贴服网格</strong> 现在你正在使用ProGrids的话，停留在格子上，确保你所有的顶点都在一个精确的网格点，这将使你在处理更多ProBuilder对象时更容易修改编辑和对齐。</p>
</li>
<li><p><strong>从大开始.</strong> 你创建的第一个版本不会是永远是错误的，也不会是永远正确的，用大的开始，施工会更简单。我通常会以一个grid级别的1/2米(0.5)开始。如果你正在构建一个关卡或世界，测试流程，适应和规模，尝试做灯光和天空光照测试，这样你能真正感觉到你正在构建什么。然后再削减到更小的grid格子层次，添加更多细节，就像LOD一样。</p>
</li>
<li><p><strong>使用简单角度</strong> 当你创建角度，一定要坚持使用1x1,1x2和1x3等等，例如1个单位一个单位的调整，这样会保证你的设计干净，有助于构建复杂的几何形状</p>
</li>
<li><p><strong>最后使用纹理</strong> 你的关卡在添加真实纹理前是灰色的盒子(默认的构建几何体的材质)。如果有需要可以先使用上色工具来区分你的关卡/世界／物品。但在最后时刻再保存真正纹理。在一个几何体完成%95或最终完成时再添加真实纹理。当你的几何体需要变化时，这会节省你重新构建纹理部分的时间。</p>
</li>
<li><p><strong>删除看不见的面</strong> 更少的三角形意味着更有效的渲染，并且你的光照贴图烘培的时间也会减少。</p>
</li>
</ul>
<h2 id="纹理与UV">纹理与UV</h2><h3 id="应用材质">应用材质</h3><p>你可以应用材质到你的ProBuilder对象上(或者某个分离的面上), 通过几种的方法 如：简单的“拖拽Drag-n-Drop”,材质面板或QuickPaint方式来添加材质。你可以每种都尝试一下来找到最适合你的方法。</p>
<p>视频教程：<a href="http://www.youtube.com/watch?v=m085rEQmVP8" target="_blank" rel="external">http://www.youtube.com/watch?v=m085rEQmVP8</a></p>
<h4 id="Drag-n-Drop">Drag-n-Drop</h4><p>对于这种方法，只需要拖拽一个材质到任何ProBuilder对象上，就像一个普通的Unity对象一样。尽管如此，但结果的编辑模式是不同的：</p>
<ul>
<li><strong>对象模式</strong>: 将会应用材质到整个ProBuilder对象</li>
<li><strong>元素模式</strong>: 只将应用材质到选择的面上。</li>
</ul>
<h4 id="材质面板">材质面板</h4><img src="/2016/03/02/ProBuilder-doc/MaterialEditor.png">    
<p>材质面板允许你建立一个经常使用的便捷材质模版，并将他们通过GUI按钮或快捷键(Alt+ 0-9)迅速应用到对象上.你也可以添加或删除自定义材质槽(大于10个)。与使用Drag-n-Drop拖拽方式类似通过材质面板来应用材质，但在编辑模式上会有不同的结果：</p>
<ul>
<li><strong>对象模式</strong>: 将会应用材质到整个ProBuilder对象</li>
<li><strong>元素模式</strong>: 只将应用材质到选择的面上。</li>
</ul>
<h4 id="QuickPaint">QuickPaint</h4><p>“QuickPaint”是一个通过在材质面板窗口顶部的GUI操作的方法。为QuickPaint功能选择一个材质，然后利用Control+Shift+Left Click来将材质应用到你点击的面上。这种方法总是只能绘制单一的面，与编辑模式和选择无关。</p>
<h3 id="UV编辑器窗口">UV编辑器窗口</h3><p>查看<a href="http://www.youtube.com/watch?v=U_5f8RlciWQ" target="_blank" rel="external">视频教程</a></p>
<p>ProBuilder 2.3几乎完全大改了以前的UV系统，别担心，UV仍然能自动生成(默认的)。熟悉的操作和处理也都在这里。</p>
<p>最明显的变化是，UV现在在一个新窗口被编辑，这里会明确的展示UV在一个2D空间。你可以在这个窗口进行移动位置，旋转和缩放。或者你也可以锁定纹理处理在SceneView中调整 UV。</p>
<h4 id="自动和手动模式">自动和手动模式</h4><p>使用自动模式<code>Auto Mode</code>可以将面进行默认展开，这意味着你控制一个参数集合用于投影UV坐标。如果你使用ProBuilder2.3以前的版本，你会觉得这很熟悉。另一方面手动模式<code>Manual Mode</code>更像传统的三维建模软件，你可以精确的控制UV投影,一旦你设定好了是不可以移动的。</p>
<p>在手动模式<code>Manual Mode</code>下面将以橙色高亮显示，而自动模式<code>Auto Mode</code>将以蓝色高亮显示。</p>
<p>自动模式<code>Auto Mode</code>下UV将只适用于面的选择。如果你想修改UV的每条边或每个点，必须使用手动模式<code>Manual Mode</code>。如果你编辑自动模式下的面，修改一个非面的元素时，ProBuilder将会自动将自动模式切换到手动模式。</p>
<p>你可以随时的在手动和自动模式下切换，但要注意当从手动模式切换到自动模式时，你可能会失去一些功能(因为自动模式不能处理独立面上的点)。</p>
<h4 id="UV编辑器窗口-1">UV编辑器窗口</h4><p>UV编辑器包含两条引导线，在<code>X</code>轴和<code>Y</code>轴上，范围从<code>0,0</code>到<code>1,1</code>。这些线起点提供了一个点。<br><img src="/2016/03/02/ProBuilder-doc/UVWindowBlank.png"></p>
<table>
<thead>
<tr>
<th>编号</th>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>选择工具(Tool selection)</td>
<td>工具集合(Pan,Move,Rotate,Scale)</td>
</tr>
<tr>
<td>1</td>
<td>元素模式(Element mode)</td>
<td>改变元素选择模式(Vertex,Edge,Face)</td>
</tr>
<tr>
<td>2</td>
<td>纹理锁(Texture Lock)</td>
<td>设置场景视图中用于UV修改的工具。这将替换纹理模式</td>
</tr>
<tr>
<td>3</td>
<td>材质预览(Show Material Preview)</td>
<td>当切换时第一个被选择面的材质纹理将被显示。请注意这个功能需要材质Shader包含一个_mainTexture属性。</td>
</tr>
<tr>
<td>4</td>
<td>操作窗口(Actions Window)</td>
<td>此窗口将根据你的选择来更新，它显示每个模式下的每个选择面的有关工具和操作。</td>
</tr>
<tr>
<td>5</td>
<td>画布(Canvas)</td>
<td>莱瑟到航线代表了坐标从(0,0)-&gt;(1,1)。你的UV可以被放着到画布的任何地方。</td>
</tr>
</tbody>
</table>
<h4 id="操作窗口">操作窗口</h4><p>这里会有两个界面显示在操作窗口<code>Action Window</code>中: 手动模式<code>Manual Mode</code>和自动模式<code>Auto Mode</code>。这两种模式都提供了类似的功能，但在操作时也有重要的不同。</p>
<pre><code>请注意，如果在自动模式下修改了单个的顶点，边活着任何非面元素，这些包含元素的面将自动转为手动模式。
</code></pre><h4 id="自动模式界面">自动模式界面</h4><img src="/2016/03/02/ProBuilder-doc/AutoModeInterface.png">
<table>
<thead>
<tr>
<th>编号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>将当前选择的面转换为手动模式下的UV.这里将清除这个面的所有自动模式设置，但你不会丢失UV的位置。</td>
</tr>
<tr>
<td>1</td>
<td>UV一旦被投影了,填充模式决定了UV的行为。Tile是最正确的行为，但某些情况下，你也许希望将UV放置到(0,0)到(1,1)的空间。通过简单的缩放将所有边抖匹配到合理的UV大小上。</td>
</tr>
<tr>
<td>2</td>
<td>在UV被投影后可以进行偏移，旋转和缩放的操作。你可以使用UV操作工具或者在一些字段上设置值。</td>
</tr>
<tr>
<td>3</td>
<td>特殊的切换可以开启特殊的变换，UV将被重新计算。具体而言，他们可以让你在X和Y坐标轴上进行反转坐标(flip coordinates)或翻转UV(Swap U/V)。</td>
</tr>
<tr>
<td>4</td>
<td>世界空间让ProBuilder会在投影后跳过归一化的步骤—-UV将离开他们原始的投影位置.</td>
</tr>
<tr>
<td>5</td>
<td>纹理组提供了更高级别的访问投影过程。设置面为共享一个纹理组可以让多个面被投影到一个单一平面上，并共享相同的参数。这是对有类似朝向和共享边的面最经常用的操作。</td>
</tr>
</tbody>
</table>
<h4 id="手动模式界面">手动模式界面</h4><img src="/2016/03/02/ProBuilder-doc/ManualModeInterface.png">
<table>
<thead>
<tr>
<th>编号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>将当前选择的面转换为自动模式UV,注意你可能在这个过程中丢失一些细节。</td>
</tr>
<tr>
<td>1</td>
<td>投影UV提供了投影顶点到UV空间的方法。这是展开模型的第一步，见下面的解释。</td>
</tr>
<tr>
<td>2</td>
<td>填充模式提供了设定UV到某一空间的操作。当前匹配UV时唯一的选项，他会自动(均匀的)缩放选择的UV匹配到(0,0)-(1,1)的坐标空间。</td>
</tr>
<tr>
<td>3</td>
<td>选择提供扩展当前选择元素的操作，一个UV集合是指一组面或元素被缝合和连接。</td>
</tr>
<tr>
<td>4</td>
<td>编辑允许你连接和断开UV元素。缝合类似于几何体的焊接。</td>
</tr>
<tr>
<td>5</td>
<td>Flip(水平，垂直)是根据X或Y轴的翻转UV.</td>
</tr>
</tbody>
</table>
<h4 id="投影">投影</h4><ul>
<li><code>Planar</code> - UV投影是将所有面座位一个单一平面，然后映射它们的店到2D空间下。</li>
<li><code>Box</code> － 最佳匹配法向量的方法是机遇包围盒的UV投影。这是一个非常好并且快速的对象展开方式，并且有一个可接受的结果。</li>
</ul>
<h3 id="额外UV功能">额外UV功能</h3><h4 id="Autostitch">Autostitch</h4><p><strong>Autostitch</strong>是一个完美对其两个面在他们的共有边上的操作。为了执行一个Autostitch,简单的选择一个面(只有一个面)，然后用Control+点击它相邻的面。</p>
<p>当成功时，场景视图会显示一个通知，并且当前选择会被设定到点击面上。你可以继续用Control+点击它的相邻面操作。</p>
<pre><code>注意<span class="pseudo">:UV</span>编辑器窗口必须打开来执行一个<span class="tag">Autostitch</span>操作。要想成功<span class="tag">Autostitch</span>两个面，它们必须共享一条边。
</code></pre><h4 id="设置UV中心点">设置UV中心点</h4><p>当使用UV编辑器的轴提示时，设置一个不同的轴点而不是选择对象的中心点是非常有用的。要做到这一点，只需要右键点击并拖拽粥提示到所需的轴点。一旦你放置了轴点，你可以在移动，旋转和缩放哦你工具中自由切换，而不会丢失轴点。</p>
<pre><code><span class="keyword">Mac</span>下Touchpad用户－使用Alt + Drag替换右键+拖拽来设置自定义轴点。
</code></pre><p>要重置你的轴提示的周到返回选择中心时，只需要点击一个新元素(或者当前的选择元素)。</p>
<pre><code>提示- 在拖转中按住<span class="keyword">Shift</span>来让让轴提示贴服顶点。
</code></pre><img src="/2016/03/02/ProBuilder-doc/SetPivot.png">
<h4 id="UV贴服">UV贴服</h4><p>当拖拽UV时，你可以按住Shift来开启临近贴服。临近贴服讲自动尝试将拖拽选择对象对其到临近顶点。这会让对其面更佳容易。</p>
<h2 id="顶点色">顶点色</h2><p>视频教程:<a href="http://www.youtube.com/watch?v=m085rEQmVP8" target="_blank" rel="external">http://www.youtube.com/watch?v=m085rEQmVP8</a></p>
<p>当使用一个支持顶点色的材质时，ProBuilder允许你对每个独立面进行上色。用这种方法，你可以通过你的映射快速添加颜色和变化，而不改变材质或增加drawcalls。</p>
<p>这里有两种方法可以在ProBuilder上应用顶点色。<strong>Vertex Color Pallette</strong>和<strong>Vertex Color Painter</strong>如果你想为每个面设置颜色你可以使用面板，或者使用画笔来绘制更自由形态的片。</p>
<h4 id="顶点色面板">顶点色面板</h4><img src="/2016/03/02/ProBuilder-doc/vertex-colors_example.png">
<h4 id="顶点画笔窗口">顶点画笔窗口</h4><img src="/2016/03/02/ProBuilder-doc/VertexPainter.png">
<ul>
<li>你可以从主GUI面板上的按钮打开顶点色面板。或者从顶部菜单选择<code>Tools&gt;ProBuilder&gt;Vertex Color Pallette</code>。</li>
<li>自定义顶点色<ul>
<li>通过点击大按钮”Apply Color”下方的”Color picker”小按钮来选择10个自定义的颜色。在Unity段自定义颜色会被记住。点击”Reset”按钮可以恢复默认颜色。 </li>
</ul>
</li>
</ul>
<h3 id="通过顶点色面板来应用顶点色">通过顶点色面板来应用顶点色</h3><ul>
<li>进入几何体编辑模式(快捷键G)，然后选择任意数量的面。</li>
<li>点击你想要的颜色按钮来应用。<h3 id="通过顶点色画笔来应用顶点色">通过顶点色画笔来应用顶点色</h3></li>
<li>打开<strong>Painter</strong>窗口(Tools&gt;Vertex Color button)。</li>
<li>点击一个颜色按钮来选去一个颜色笔刷。</li>
<li>点击或拖拽近场景视图病应用到一个PorBuilder网格对象上。</li>
</ul>
<p><strong>Vertex Color Painter</strong>工具海提供了一个特殊借口，它给予特殊Shader中通过RGBA通道的纹理混合。尝试使用ProBuilder中的”Diffuse Texture Blend”Shader。</p>
<pre><code>小提示：保持一个简单的白色，这样你可以迅速恢复每个面为标准颜色。
</code></pre><h2 id="Entity的类型">Entity的类型</h2><p>所有ProBuilder对象都有一个<strong>Entity Type</strong>实体类型。这里定义了这个对象如何与游戏世界互动的基本特征。他们负责管理属性就像一个对象的<code>Static Flags</code>，以及他们是否在游戏中可见。</p>
<p>所有ProBuilder对象都有一个实例类型，通常你不需要一次看到所有类型，所以你可以使用<code>Entity Types</code>按钮来切换可见性或者每一组的类型。这边的非常有用。因为你的场景会变的越来越详细和复杂。</p>
<table>
<thead>
<tr>
<th>Entity Type</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Detail(细节)</td>
<td>默认ProBuilder对象类型。一个带有纹理和碰撞体的网格对象，在运行时没有什么特别的。它可以被遮挡，但不会遮挡其他对象</td>
</tr>
<tr>
<td>Mover(推荐器)</td>
<td>与Detail对象类似，但它不是静态的。这使的他适用于移动平台，门，电梯等等。</td>
</tr>
<tr>
<td>Collision(碰撞)</td>
<td>碰撞对象在游戏中是不可见的，但它仍然可以被碰撞。通常这会从平滑的楼梯做为坡道会很方便，给游戏对象加上圆角，力场，和其他许多高级应用。他们将会显示在编辑器中，并以亮绿色半透明显示。当然，他们不会遮蔽其他物体或阻塞光源。然后你应该在进行光照贴图烘培时通过<strong>Entity Types</strong>控制来禁用它们，这样他们的颜色才不会影响周围。</td>
</tr>
<tr>
<td>Triggers(触发器)</td>
<td>触发器时网格对象，他们在游戏运行中是不可见的，但是他们可以开启碰撞，并触发OnTrigger{Enter,Exit,Stay,…}函数。可以转为去创建一些区域，体域或触发器，可能会被应用到触发电梯，门活着过场动画(当玩家进入或退出触发区域)，指定”Kill Zones”活着特效区域等等。</td>
</tr>
</tbody>
</table>
<h2 id="优化">优化</h2><p><strong>Deleting Faces</strong>当你的模型网格完成后或接近完成时删除面时最常做的优化。任何在游戏中看不到的面都应该删除。否者会增加总的多边形数，增加光照贴图的空间，以及带来不必要的drawcalls。</p>
<pre><code>注意：如果你删除一个面后有需要它了，请使用<span class="escape">`B</span>ridge<span class="escape">`功</span>能。
</code></pre><p><strong>Occlusion</strong>遮挡对优化是非常重要的。无论你有多大，可见多遮挡的ProBuilder对象，在检视窗口右上角标记他们为静态。这会让他们利用Unity中的Ocllusion遮挡系统，变成遮挡器。</p>
<ul>
<li>查看<a href="http://docs.unity3d.com/Documentation/Manual/OcclusionCulling.html" target="_blank" rel="external">Unity阻塞系统预览</a>获得更多信息。</li>
</ul>
<p><strong>Merging</strong>合并可以让你塌陷多个ProBuilder对象为一个单独对象，同时也能够像任何其他ProBuilder对象。这主要是用于减少绘制调用，和焊接顶点。查看<strong>Merging</strong>在<a href="##界面预览">界面预览</a>章节来观看功能使用细节。<br><strong>Custom Collison</strong>自定义碰撞可以尽可能的被使用，这可以先住的减少游戏中的负载和预加载时间。从本质上讲，任何你想减少一个复杂碰撞体，或者一组碰撞体为一个简单的碰撞体，你都应该使用自定义碰撞。</p>
<ul>
<li>这有一个很好的楼梯例子。如果你使用默认碰撞体（一个凹凸的MeshCollider），则每一步都有碰撞部分。相反的禁用楼梯碰撞组件，然后创建一个ProBuilder对象，让它匹配楼梯坡度。在对象模式下按快捷键C(或点击GUI上的”COllider”按钮)设置对象为Collision Entity Type。然后运行楼梯测试。不仅你的游戏运行的更好而且你从楼梯上上下会移动的很平滑，而不会出现颠簸的行为。</li>
</ul>
<p><strong>Lightmap Size</strong>提高游戏性能的一个重要组成部分，它能确保你的绘制调用以更高方式管理。这意味着确保Unity能动态的(或静态的，如果你使用Unity Pro)合并对象批次。不幸的事，这里有很多情况会打破这种批次。缩放转换级别是其中的一种，另一个棘手的就是光照贴图索引。</p>
<ul>
<li>将如你有10个对象，你需要制作场景光照贴图，并且最终得到2个1024x1024的光照贴图。所有对象都被合并成一个批次，但你的Draw Call却调用了2次，这是因为你后多于一张的光照贴图，因此，也会产生多于一个的材质。<ul>
<li>一个解决办法就是更大的光照贴图，你可以通过使用这样的方便的脚本来控制生成光照贴图的尺寸:<a href="http://forum.unity3d.com/threads/56435-light-map-max-at-1k-solved" target="_blank" rel="external">http://forum.unity3d.com/threads/56435-light-map-max-at-1k-solved</a> </li>
<li>每次在大于1K大小的贴图创建之后，你还需要设置光照贴图光照贴图纹理导入设置为”Max:4K”。</li>
</ul>
</li>
</ul>
<p>这是一个很大程度上的主观优化，增加光照贴图尺寸也可能会带来一个性能的影响(尤其是在移动端)比等于或大于一个额外的光照贴图的渲染调用带来的开销成本还大。</p>
<h2 id="光照贴图">光照贴图</h2><p>ProBuilder自动为每个ProBuilder对象生成UV2通道。</p>
<h4 id="光照贴图生成设置">光照贴图生成设置</h4><p>你可以自定义ProBuilder如何生成光照贴图的UV,对于每个对象和全局，这样设置，从Unity菜单栏选择<code>Tools&gt;ProBuilder&gt;Editor&gt;LightMap Setting</code>。</p>
<p>对于所有对象默认值是预先设置的，并且通常是适当的。但是，如果你看到一个对象的光照贴图有很奇怪的效果，你可以尝试调整这些参数。</p>
<h2 id="光滑群组">光滑群组</h2><p>光滑组会与周围平面平均顶点法线。这会让灯光有一个更真实的处理表面边缘。让他们看上去更平滑。</p>
<img src="/2016/03/02/ProBuilder-doc/smoothing_example.png">
<h4 id="打开光滑组菜单">打开光滑组菜单</h4><p><code>Tools &gt; (ProBuilder/Prototype) &gt; Texture Window</code></p>
<h4 id="使用平滑组">使用平滑组</h4><p>ProBuilder决定哪些边在同一平滑组中使用临近面平滑，还是使用硬边缘组，让相邻面边缘为硬边缘。</p>
<p>作为一个例子，选择一个圆柱体的所有侧面，并设置为相同的平滑组，结果会看上去两边是平滑的，同时保持顶部与底部的边缘是硬边缘。在某些情况下，保持相邻边平滑是可取的。但不是全部，有些情况你为了达到预期效果可能需要使用多个组。ProBuilder提供了24组光滑组(所有功能相同，但只有相同数量的面才能光滑边缘)和18个硬边缘组。</p>
<h2 id="自定义ProBuilder">自定义ProBuilder</h2><p>要打开自定义面板，点击Unity顶部菜单<code>&quot;Edit &gt; Preferences&quot;</code>打开编辑器属性窗口。选择ProBuilder标签，你讲看到所有自定义选项。</p>
<p>如果你想重置标准设置，点击<code>Use Defaults</code></p>
<img src="/2016/03/02/ProBuilder-doc/preferences.png">
<h2 id="故障排除">故障排除</h2><h3 id="丢失菜单项">丢失菜单项</h3><p>这是由于你的项目导致的编译器变异错误造成的，如果编辑器名字空间下油一个脚本错误，Unity不能加载任何新编辑器脚本。</p>
<h4 id="解决方法">解决方法</h4><ul>
<li>清理控制台错误</li>
<li>如果你的控制是没有错误的，但这个问题没有消失，情尝试删除并重新导入ProBuilder文件夹。</li>
</ul>
<h3 id="ProGrids针对ProBuilder顶点不起作用">ProGrids针对ProBuilder顶点不起作用</h3><h4 id="解决方法-1">解决方法</h4><ul>
<li>取保你已经安装了ProGrid2.1.6或以上版本。</li>
</ul>
<h3 id="升级后，控制台显示”The_imported_type_pb_Object_is_defined_multiple_times”">升级后，控制台显示”The imported type <code>pb_Object</code> is defined multiple times”</h3><p>在你的项目中有2个ProBuilder的实例，这通常意味着又旧的ProBuilder文件夹在新版本导入前没有删除。或者Unity无法找到旧版本的文件。</p>
<h4 id="解决方法-2">解决方法</h4><p><strong>如果你已经备份了你的工程</strong><br>回退到一个你的工程备份，然后遵循升级包说明来更新你的项目<br><strong>如果没有备份可用</strong></p>
<ul>
<li>删除ProBuilder文件夹</li>
<li>对于使用ProBuilder对象的每个场景，运行<code>Tools &gt; ProBuilder &gt;Repair &gt; Fix Missing Scrip References</code>。</li>
</ul>
<h3 id="Prefab丢失脚本引用，但不可修复缺失脚本饮用">Prefab丢失脚本引用，但不可修复缺失脚本饮用</h3><h4 id="解决方法-3">解决方法</h4><ul>
<li>将一个Prefab防盗一个空场景中，并运行 修复丢失脚本饮用</li>
</ul>
<h3 id="顶点色不起作用">顶点色不起作用</h3><h4 id="解决方法-4">解决方法</h4><ul>
<li>确保你的材质Shader支持顶点色。</li>
<li>如果你不确定的话，使用ProBuilder的<code>DefaultVertexColor</code>材质</li>
</ul>
<h3 id="设置轴原点不起作用">设置轴原点不起作用</h3><h4 id="解决方法-5">解决方法</h4><ul>
<li><p>确保Unity设置中的<code>Pivot</code>为<code>Center</code>。</p>
<img src="/2016/03/02/ProBuilder-doc/PivotSetCenter.png">
</li>
</ul>
<h2 id="特殊菜单项">特殊菜单项</h2><p>从顶部菜单调出可用的特殊菜单选项 <code>Tools &gt; ProBuilder &gt;...</code>他们的用法如下:</p>
<ul>
<li><strong>About</strong>: 提供当前ProBuilder信息和当前安装的版本</li>
<li><strong>Documentation</strong>: 打开最新的在线文档。</li>
<li><strong>Editor</strong>: 专业ProBuilder编辑器工具和功能。<ul>
<li><strong>Lightmap Settings Windows</strong>: 高级的光照贴图/UV2 生成参数和ProBuilder对象控制。</li>
</ul>
</li>
<li><strong>Selection</strong>:选择修改器意味着帮助移除重复，繁琐的操作。<ul>
<li><strong>Select Faces with Material</strong>:选择当前激活的ProBuilder对象所有与当前选择的面有相同的材质的面。</li>
<li><strong>Select Faces with Vertex Color</strong>:选择当前激活的ProBuilder对象所有与当前选择的面有相同的顶点色的面。</li>
</ul>
</li>
<li><strong>Geometry</strong>:编辑几何体的特殊功能，而不是GUI面板中不是经常使用的一部分。<ul>
<li><strong>Conform Normals</strong>: 如果你怀疑模型有“裂缝”，将所有面的法向量设置相同的关联方向。</li>
<li><strong>Triangulate Object</strong>:较少多边形为三角形化。</li>
<li><strong>Freeze Transforms</strong>:设置选择对象为世界坐标<code>{0,0,0}</code>，而不改变任何顶点位置。</li>
</ul>
</li>
<li><strong>Actions</strong>:ProBuilder有非常高的扩展性。用户功能和配套实用功能都被ProBuilder存储在操作文件夹下。<ul>
<li><strong>ProBuilderize Selection</strong>: 转换一个选择模型为ProBuilder的可编辑三角化模型网格。</li>
<li><strong>ProBuilderize Selection(Preserve Faces)</strong>:转换一个选择模型为ProBuilder的可编辑模型网格。并且原有结构(不建立三角形化)。</li>
<li><strong>Generate UV2 - Selection</strong>:如果你已经在属性中关闭了自动生成UV2通道，你可以使用这个选项来为当前选择构建UV2(LightMap)通道。</li>
<li><strong>Generate UV2 - Scene</strong>:这会为场景中所有ProBuilder对象生成UV2(lightmap)通道。如果你已经在属性中关闭了自动生成UV2，这是唯一有用的方式。</li>
<li><strong>Export Selected to OBJ</strong>:导出所谓的ProBuilder对象为OBJ格式。</li>
<li><strong>Make Asset</strong>:在工程中从当前选择素材创建一个<code>.asset</code>和prefab。从工程中分离这条ProBuilder脚本，但保留了网格对象和组件数据。</li>
<li><strong>Strip all ProBuilder Object in Scene</strong>:在整个场景中从所有对象中删除所有ProBuilder脚本，只留下模型。</li>
<li><strong>Strip all ProBuilder Object in Selection</strong>:从选定对象中删除所有ProBuilder脚本，只留下模型。</li>
</ul>
</li>
<li><strong>Repair</strong>:这个菜单包含了一套用来帮助修复损坏的ProBuilder场景和物体的工具。大多数用户不需要这些，但在某些情况下他们是必须的。<ul>
<li><strong>Remove Degenerate Triangles</strong>:这将删除模型网格上重复的三角形。</li>
<li><strong>Clean Up Leaked Meshes</strong>:如果你看到控制台显示了任何关于leaking mesh的纪录，运行这个命令来清理。</li>
<li><strong>Force Refresh Scene</strong>:有些时候这是完成升级后必要的操作，它将会重新生成网格几何体和刷新场景视图。</li>
<li><strong>Invert UV Scale(Scene)</strong>:UV缩放将会反转(2平方米的面的区域将变成0.5平方米)。这对于用户从2.3之前升级过来的是很有用的。</li>
<li><strong>Invert UV Scale(Selected Objects)</strong>:将选择物体的UV反转。</li>
<li><strong>Invert UV Scale(Selected Faces)</strong>:将选择的面的UV反转。</li>
<li><strong>Repaire Missing Script References</strong>:如果你的ProBuilder脚本引用丢失，这将尝试重新连接适当的组件。</li>
</ul>
</li>
<li><strong>Experimental:</strong>这些工具和功能不是能很好的公开使用，包括为用户早期试用，并反馈报告使用。<strong>警告</strong>使用这个要谨慎，可能会出现不可预期的结果。<ul>
<li><strong>Boolean(CSG) Tool</strong>: 联合，交互，删减方法当前没有实现。</li>
</ul>
</li>
</ul>
<h2 id="提示与技巧">提示与技巧</h2><ul>
<li>在几何体模式下双击一个面会选择这个物体上所有的的面。</li>
<li><code>Ctrl-Shift-I</code>(这是eye)翻转选择的面</li>
<li>选择一个面然后点击<code>Ctrl-J</code>。你的对象的轴点会到面的中心点，这对顶点也适用。</li>
<li><strong>Alt-G</strong>添加所有相邻面到选中</li>
<li>你可以拖拽选择的面、顶点和边。</li>
<li>你可以通过<strong>Backspace</strong>键来删除面</li>
<li>你可以通过“Tools &gt; ProBuilder &gt; Vertex Colors &gt;Vertex Color Interface”来指定你自己的颜色到顶点色快捷键。</li>
<li>不想要一个可停靠窗口吗？在属性面板中切换”Open in Dockable Window”为false.</li>
<li>喜欢生活冒险？从周边禁用边扩展，并且桥接周边边缘，开启从任何边缘，任何时间挤压和桥接。<ul>
<li><strong>注意</strong>: 这很容易导致奇怪的几何体，你有能力处理的，对不对？  </li>
</ul>
</li>
</ul>
<h2 id="快捷键">快捷键</h2><p>ProBuilder 2几乎完全可以用键盘驱动，保持了GUI整洁和工作高效，甚至更好，几乎所有键盘快捷键和其他设置都可以被自定义。只需要打开<code>Edit &gt; Preferences &gt; ProBuilder</code>。 下面是一个默认快捷键的对应表：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl - K</td>
<td>新建立方体</td>
</tr>
<tr>
<td>Ctrl - Shift - K</td>
<td>新建形状</td>
</tr>
<tr>
<td>G</td>
<td>进入集合体编辑模式</td>
</tr>
<tr>
<td>H</td>
<td>在面，边，顶点操作切换</td>
</tr>
<tr>
<td>P</td>
<td>切换处理坐标对齐</td>
</tr>
<tr>
<td>Escape</td>
<td>退出纹理或几何体模式</td>
</tr>
<tr>
<td>M</td>
<td>(对象模式下使用)设置选择的对象为Mover Entity Type</td>
</tr>
<tr>
<td>B</td>
<td>(对象模式下使用)设置选择的对象为Detail Entity Type</td>
</tr>
<tr>
<td>T</td>
<td>(对象模式下使用)设置选择的对象为Trigger Entity Type</td>
</tr>
<tr>
<td>C</td>
<td>(对象模式下使用)设置选择的对象为Collision Entity Type</td>
</tr>
<tr>
<td>Ctrl-Shift-Left Click</td>
<td>当模版面板打开，点击面快速绘制纹理</td>
</tr>
<tr>
<td>Ctrl-E</td>
<td>将选择的面挤压变换</td>
</tr>
<tr>
<td>Ctrl-J</td>
<td>设置选择对象的轴中心点(Vertex, Face或者对象)</td>
</tr>
<tr>
<td>Ctrl-Shift-I</td>
<td>反转选择</td>
</tr>
<tr>
<td>Alt-(0-9)</td>
<td>以预制色绘制选择面(Vertex Colors Menu)</td>
</tr>
<tr>
<td>Shift(Drag/Rotate/Scale)</td>
<td>按住Shift同时缩放，旋转或移动选择挤压面。</td>
</tr>
<tr>
<td>Backspace</td>
<td>删除选择的面</td>
</tr>
<tr>
<td>Alt + C</td>
<td>塌陷(Collapse)选择顶点</td>
</tr>
<tr>
<td>Alt + V</td>
<td>焊接(Weld)选择顶点</td>
</tr>
<tr>
<td>Alt + X</td>
<td>分离(Split)选择顶点</td>
</tr>
<tr>
<td>Alt + B</td>
<td>桥接(Bridge)选择边</td>
</tr>
<tr>
<td>Alt + R</td>
<td>选择边环</td>
</tr>
<tr>
<td>Alt + L</td>
<td>选择边循环</td>
</tr>
<tr>
<td>Shift + Alt + G</td>
<td>缩小选择</td>
</tr>
<tr>
<td>Shift + G</td>
<td>扩大选择</td>
</tr>
<tr>
<td>Alt + N</td>
<td>翻转面的法向量</td>
</tr>
<tr>
<td>Alt + U</td>
<td>翻转边循环</td>
</tr>
<tr>
<td>Alt + E</td>
<td>连接选择顶点或边</td>
</tr>
</tbody>
</table>
<h2 id="特征索引与版本比较">特征索引与版本比较</h2><p>我们努力在下边列出每一个功能，操作和ProBuilder可用的选项。如果我们错过了什么，情提醒我们。</p>
<p><strong>重要</strong>: ProBuilder高级版和基本版的比较</p>
<ul>
<li>项目标记为(高级版可用)的只有在搞基版本可用，而在基础版本里是不可用的。</li>
</ul>
<h3 id="GUI项目面板">GUI项目面板</h3><p>下面这些功能和操作在ProBuilder GUI面板上是可用的。</p>
<h4 id="编辑模式:对象模式">编辑模式:对象模式</h4><ul>
<li><a href="###模型与元素">Edit Mode : Vertex</a></li>
<li><a href="###模型与元素">Edit Mode : Edge</a></li>
<li><a href="###模型与元素">Edit Mode : Face]</a></li>
<li><a href="####通过形状面板创建对象">Shapes</a></li>
<li><a href="####材质面板">Material Palette(高级版可用)</a></li>
<li><a href="##纹理与UV">UV Editor(高级版可用)</a></li>
<li>Vertex Color Palette</li>
<li><a href="##光滑群组">Smoothing(高级版可用)</a></li>
<li><a href="###对象操作">Merge(高级版可用)</a></li>
<li><a href="###对象操作">Mirror(高级版可用)</a></li>
<li><a href="###对象操作">Flip Normals</a></li>
<li><a href="###对象操作">Subdivide(高级版可用)</a></li>
<li><a href="###对象操作">Set Pivot</a></li>
<li><a href="##Entity的类型">Entity Type: Detail</a></li>
<li><a href="##Entity的类型">Entity Type: Mover</a></li>
<li><a href="##Entity的类型">Entity Type: Collider</a></li>
<li><a href="##Entity的类型">Entity Type: Trigger</a><h4 id="编辑模式:所有元素模式">编辑模式:所有元素模式</h4></li>
<li><a href="###坐标处理">Handle Coordinates(World, Local, Planar)</a></li>
<li>Grow Selection</li>
<li>Grow Selection By Angle</li>
<li>Shrink Selection</li>
<li>Invert Selection</li>
<li>Set Pivot</li>
<li>Extrude</li>
<li>Extrude by Amount</li>
<li>Flip Normals</li>
<li>Delete Selected Face(s)</li>
<li>Detach Selected Face(s)(高级版可用)</li>
<li>Subdivide Face(s)(高级版可用)<h4 id="编辑模式:顶点模式">编辑模式:顶点模式</h4></li>
<li>Connect Selected Vertices(高级版可用)</li>
<li>Weld Selected Vertices(高级版可用)</li>
<li>Weld Selected Vertices by Distance(高级版可用)</li>
<li>Collapse Selected Vertices(高级版可用)</li>
<li>Split Selected Vertices/Vertex(高级版可用)<h4 id="编辑模式:边模式">编辑模式:边模式</h4></li>
<li>Select Edge Loop</li>
<li>Select Edge Ring</li>
<li>Bridge Selected Edges(高级版可用)</li>
<li>Connect Selected Edges(高级版可用)<h4 id="编辑模式:面模式">编辑模式:面模式</h4></li>
<li>Merge Face(s)(高级版可用)</li>
</ul>
<p>下面这些功能和操作职能通过Unity菜单列表可用</p>
<h4 id="Tools_&gt;_ProBuilder_&gt;_Editor">Tools &gt; ProBuilder &gt; Editor</h4><ul>
<li>LightMap Settings Window (高级版可用)<h4 id="Tools_&gt;_ProBuilder_&gt;_Selection">Tools &gt; ProBuilder &gt; Selection</h4></li>
<li>Select Faces with Material(高级版可用)</li>
<li>Select Faces with Vertex Color<h4 id="Tools_&gt;_ProBuilder_&gt;_Geometry">Tools &gt; ProBuilder &gt; Geometry</h4></li>
<li>Conform Normals(高级版可用)</li>
<li>Triangulate Object(高级版可用)</li>
<li>Freeze Transform (高级版可用)<h4 id="Tools_&gt;_ProBuilder_&gt;_Actions">Tools &gt; ProBuilder &gt; Actions</h4></li>
<li>Export Selected to OBJ(高级版可用)</li>
<li>ProBuilderize Selection(高级版可用)</li>
<li>ProBuilderize Selection(Preserve Faces)(高级版可用)</li>
<li>Generate UV2 - Selection(高级版可用)</li>
<li>Generate UV2 - Scene(高级版可用)</li>
<li>Strip all ProBuilder Objects in Scene(高级版可用)</li>
<li>Strip all ProBuilder Objects in Selection(高级版可用)<h4 id="Tools_&gt;_ProBuilder_&gt;_Repaire">Tools &gt; ProBuilder &gt; Repaire</h4></li>
<li>Remove Degenerate Triangles(高级版可用)</li>
<li>Clean Up Leaked Meshes</li>
<li>Force Refresh Scene</li>
<li>Invert UV Scale(Selected Objects)</li>
<li>Invert UV Scale(Selected Faces)</li>
<li>Repair Missing Script References<h4 id="Tools_&gt;_ProBuilder_&gt;_Expirimental">Tools &gt; ProBuilder &gt; Expirimental</h4></li>
<li>Boolean(CSG)Tool(高级版可用)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/2016/03/02/ProBuilder-doc/procore_banner.png">
<h5 id="重要链接">重要链接</h5><ul>
<li>最新文档:<a href="www.procore3d.com/docs/probuilder">www.procore3d.com/docs/probuilder</a></li>
<li>视频教程＋全部信息:<a href="www.procore3d.com/probuilder">www.procore3d.com/probuilder</a></li>
</ul>
<h5 id="访问源文件，建立、测试和在线下载地址:">访问源文件，建立、测试和在线下载地址:</h5><p>你必须先注册(转发你的购买发票到<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x63;&#111;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#112;&#114;&#x6f;&#99;&#111;&#114;&#101;&#51;&#x64;&#x2e;&#x63;&#111;&#x6d;">&#x63;&#111;&#x6e;&#x74;&#x61;&#99;&#116;&#64;&#112;&#114;&#x6f;&#99;&#111;&#114;&#101;&#51;&#x64;&#x2e;&#x63;&#111;&#x6d;</a>),你可以通过：</p>
<ul>
<li>在<a href="http://www.procore3d.com/usertoolbox">ProCore3D User Toolbox</a>网站注册一个账号，来访问安装文件，包括ProBuilder源代码</li>
<li>加入Beta测试组来帮助我们更早的测试和构建ProBuilder!</li>
</ul>
<p>谢谢你购买ProBuilder,你的支持会让我们不断更新和发展所有Procore工具！</p>
<h2 id="目录">目录</h2><ul>
<li><a href="##有用的链接和信息">有用的链接和信息</a></li>
<li><a href="##ProBuilder是什么？">ProBuilder是什么？</a></li>
<li><a href="##安装与更新">安装与更新</a></li>
<li><a href="##使用ProBuilder的基础">使用ProBuilder的基础</a></li>
<li><a href="##界面预览">界面预览</a></li>
<li><a href="##创建和编辑几何体">创建和编辑几何体</a></li>
<li><a href="##纹理与UV">纹理与UV</a></li>
<li><a href="##顶点色">上色</a></li>
<li><a href="##Entity的类型">Entity的类型</a></li>
<li><a href="##优化">优化</a></li>
<li><a href="##光照贴图">光照贴图</a></li>
<li><a href="##光滑群组">光滑群组</a></li>
<li><a href="##自定义ProBuilder">自定义ProBuilder</a></li>
<li><a href="##故障排除">故障排除</a></li>
<li><a href="##特殊菜单项">特殊菜单项</a></li>
<li><a href="##提示与技巧">提示与技巧</a></li>
<li><a href="##快捷键">快捷键</a></li>
<li><a href="##特征索引与版本比较">特征索引</a></li>
<li><a href="##特征索引与版本比较">ProBuild高级版vs基本版比较</a></li>
</ul>]]>
    
    </summary>
    
      <category term="3D建模" scheme="http://tinyflare.com/tags/3D%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="Unity" scheme="http://tinyflare.com/tags/Unity/"/>
    
      <category term="Unity插件" scheme="http://tinyflare.com/tags/Unity%E6%8F%92%E4%BB%B6/"/>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[超越复古像素风的3D扁平着色在Unity中的应用]]></title>
    <link href="http://tinyflare.com/2016/02/21/2016-2-21/"/>
    <id>http://tinyflare.com/2016/02/21/2016-2-21/</id>
    <published>2016-02-21T04:13:20.000Z</published>
    <updated>2016-03-06T13:13:53.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://gamedevelopment.tutsplus.com/articles/go-beyond-retro-pixel-art-with-flat-shaded-3d-in-unity--gamedev-12259" target="_blank" rel="external">http://gamedevelopment.tutsplus.com/articles/go-beyond-retro-pixel-art-with-flat-shaded-3d-in-unity--gamedev-12259</a></p>
<p>在这篇教程中，我将为你展示如何在Unity中创建flat-shaded(扁平着色)的3D游戏，并且解释为什么你想第一时间去制作它。</p>
<p>在今天，已经有丰富多样的3D建模工具和引擎让人们去制作3D游戏，然而3D美术的挑战是严峻的，往往需要大量的时间、精力和经验丰富的开发者，这是独立开发者和业余爱好者所不具备的条件。Low-polygon(低模)模型，集合扁平化着色的方式，把人带回道早起90年代的风格，使用技术相对简单，任何人都可以学习使用。这不仅仅是怀旧的倒退，扁平化着色可以很容易的与现代渲染技术结合使用，如环境闭合贴图可以让游戏画面看上去更引人瞩目和更前卫的感觉。</p>
<p><a href="http://cdn.tutsplus.com/gamedev/uploads/2013/11/gamedevtuts_flatshading.zip" target="_blank" rel="external">获得Unity的例子工程</a></p>
<a id="more"></a>
<p>本教程的前提是假设你已经了解如何进行3D建模工作了，或者能够在互联网上找到一些免费的3D模型。我已经将一些例子模型放到了例子当中。另外在互联网上也有许多关于如何学习3D建模的免费教程。如果你已经开始学习了，我强烈推荐<a href="http://www.wings3d.com/" target="_blank" rel="external">Wings3D</a>和<a href="http://www.sketchup.com/" target="_blank" rel="external">SketchUp</a>两者都与一些专业的建模软件有非常相似的接口，并能输出Blender和Unity都能使用的格式。</p>
<h4 id="为什么使用扁平着色（Flat_Shading）">为什么使用扁平着色（Flat Shading）</h4><p>当你决定开始动手使用Unity去制作一款全3D游戏，也许你没有游戏美术技能的优势，或者也许你已经制作了一些用2D游戏的美术素材。在任何情况下你都会很快意识到3D游戏需要非常庞大的一套技能去开发。你不仅需要了解如何建立3D模型，还需要这些模型表面正确的展开到一张纹理上。你还需要准确创建出相关的纹理材质。<br>如果你只会创建模型，并且已经为你的游戏创建完成了只想之后通过少数额外步骤上色着色，你可以像如下这么做：<br><div class="video-container"><iframe src="//www.youtube.com/embed/https://youtu.be/J-tRzkdb4BQ" frameborder="0" allowfullscreen></iframe></div><br>或者像这样：<br><div class="video-container"><iframe src="//www.youtube.com/embed/https://youtu.be/RFcAe1OLQtQ" frameborder="0" allowfullscreen></iframe></div><br>当然它看起来很简约甚至有些简陋，但这也是重点！当你的目标是早起90年代怀旧风格，或是现代抽象风格，甚至是想要节省游戏制作时间的一些jam游戏，扁平化着色对于初学者还是3D专家都是非常不错的风格选择。</p>
<p>如果你刚刚开始游戏美术，简单的工作流程可以让你更专注一些基本功能性的东西：如何用一个漂亮的轮廓和形式去制作一个3D模型，如何用简单的手绘色处理基本颜色。集中精力在这些基本面上可以教会你艺术的基本技能而不是分心于艺术创作方面。</p>
<h4 id="扁平化着色（Flat_Shading）如何工作">扁平化着色（Flat Shading）如何工作</h4><p>每个三维模型都由一组顶点来确定模型的基本形状。对于每一个顶点都有一个向量称为法向量，你可以把它认为是钉在顶点上的一个大头针。<br>渲染引擎会使用每一个顶点的法向量来比较该顶点受光时的光照方向和摄像机的面朝方向，为了确定哪些顶点受光照印象。<br>渲染器会慢慢的将光照信息从一个顶点向另外一个顶点来做渐变，这样让基本的3D模型有一个柔和（”pillowy”）的外观。除非你使用纹理（通常状况下你都会这么做）。这会看上去很糟糕，因为它并不是一个完美的柔和的曲面。“pillowy”表面:<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_Normals_and_Smooth.jpg"><br>使用扁平化着色，整个多边形会接受到统一的光照，是按照从多边形的中心统一向外垂直的法向量来计算的。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_Normals_and_Flat.jpg"></p>
<p>现代建模程序都会使用“hard edges”和”smoothing groups”来调整模型顶点法向量及相邻多边形是按照扁平化还是归一化方式着色。一些熟练的3D艺术家会使那些比较锋利的边缘看起来变化更平坦，但我们感兴趣的是如何使边缘看起来更锋利和扁平。谢天谢地，Unity可以很简单的视线这个效果。</p>
<h4 id="Basic_Technique">Basic Technique</h4><p>如果你恨熟悉建模工具的话，你可以通过设置所有边为”hard”来使你的模型看起来扁平化，然而在Unity中你可以简单的通过选择来让Unity帮你自动创建硬边缘:</p>
<h5 id="步骤1">步骤1</h5><p>点击项目窗口中的模型文件，调出检视面板中的导入设置。<br><img src="/2016/02/21/2016-2-21/import_begin.png"></p>
<h5 id="步骤2">步骤2</h5><p>进入Normals%Tangents段，在Normals的下拉列表中选择Calculate.<br><img src="/2016/02/21/2016-2-21/import_calculate.png"></p>
<h5 id="步骤3">步骤3</h5><p>设置Smoothing Angle为0，并点击应用。<br><img src="/2016/02/21/2016-2-21/import_finished.png"></p>
<p>Unity会使所有锋利的边角都变成硬的边缘。我们想让所有边缘都变成应边缘，所以很自然的将Smoothing Angle设置成0来达到这个效果。</p>
<p>根据你的模型的几何形状，通过不同的Smoothing angles的设置，我们可以很惊讶的发现这是一个非常简单的方式让一个模型拥有完全不同的外观。<br><img src="/2016/02/21/2016-2-21/import_compare.png"></p>
<h5 id="步骤4">步骤4</h5><p>既然我们已经有了自己的扁平化着色的模型，我们需要给它上一些颜色!这里有很多方法可以做到，但其中有一些会比另一些要好很多:<br>选择你模型的一部分，并将他们设置成我们想要的不同颜色的材质。<br>在模型程序中指定顶点颜色。<br>创建一个“纹理调色板”，包含一堆正方形颜色的纹理贴图，并把它应用到你的模型上。<br>我非常喜欢最后一种方法，我将想你做如下描述。通常情况下，创建完一个3D模型后，你必须煞费苦心的将它展开来匹配一个手工制作的纹理。但是，因为我们只会对单色多边形感兴趣，它与你的UV展开工作无关，它看起来更香一团杂乱随机的顶点集合，只要他们在正确的颜色上!</p>
<p>上色的第一步时创建纹理。例如，我们说想要四种颜色:<br><img src="/2016/02/21/2016-2-21/palette_fulcrum.png"></p>
<p>接下来，加载你的模型并选择你要加载的纹理。选择模型所有的面并按你想要的一个特定颜色展开他们。结果可能会是一堆乱七八糟的多边形。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_basic_uvunwrap.jpg"></p>
<p>正如我所说的，这真的不重要，将上面的多边形或香移动和缩放，将他们分别放到你准备的调色板纹理的每个小方块内，拖拽它们匹配你想选择的颜色。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_basic_uvselect.jpg"></p>
<p>看一看你的模型；确保纹理选择部分有正确的颜色！为你模型剩下的面重复这个过程，再次选择和展开到你想要的颜色上。如果你犯了一个错误，也不是什么大问题，如果有需要的话，只要重新选择面，重新展开，把它们放在纹理上的正确位置上就行了。同样的不能说这是一个真正的UV展开！<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_basic_finished.jpg"></p>
<p>就这样，你现在有了一个上色的扁平化模型，你可以导入到你的游戏了。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_basic_imported.jpg"></p>
<h4 id="说说其他方法">说说其他方法</h4><p>如果你想知道，这有一些原因避免用另外两个方法:</p>
<h5 id="多重材质">多重材质</h5><p>这种方法需要创建大量的材质，你必须保持和Unity一致，更重要的是Unity不会动态的合并批次，会为模型的每一种材质进行一次绘制，这往往是现代图形硬件的瓶颈。<br>简单的说，如果你使用了这种方法可能会得到比较糟糕的性能。</p>
<h5 id="顶点色">顶点色</h5><p>这种方法实际上很不错，在实际中使用这种方法可能取决于你的特定需求活着工作流程。然后你会立刻发现一些东西：当你导入你的模型并使用基础 Diffuse Shader的时候，你的顶点颜色看上去并不显示。</p>
<p>这是因为基本shader会忽视顶点色属性；你需要使用特殊的shader来使用顶点色数据。这很容易找到，但如果你想要得到其他渲染效果很难从这些支持顶点色的shader中得到。通常这些shader不支持顶点色，你需要自己去修改shader.</p>
<p>如果你不知道如何写shader, 这会导致游戏内容之外的大量的时间和精力的消耗。但这能紧紧是对于我。但是是我发现改变纹理颜色比在游戏中改变脚本要容易的多。</p>
<h4 id="优化">优化</h4><p>现在，你有一个调色板纹理和一个基本的technique了，你可以去创造游戏部分中的的剩余模型了。你可以继续添加颜色到调色板，并在整个游戏中使用相同的纹理。</p>
<p>这么做还有一个很大的性能优势，如果你坚持在整个游戏中使用了相同的材质，Unity通常会将多个对象通过一个”bacth”处理，正如之前所提到的，“Draw calls”是现代图形的一个主要瓶颈，尽量让它达到最小会是一个好主意。</p>
<p>Unity会自动尝试用最少的”draw calls”调用来绘制。如果你为所有物体都使用单一材质，并且所有模型都被用相同方式缩放，每个模型顶点少于300个，它将在Unity的状态窗口做如下显示:<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_optimize_multi.jpg"><br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_optimize_single.jpg"></p>
<p>提示:如果你想知道更多关于”batching”的资料，你可以查询Unity的<a href="http://docs.unity3d.com/Documentation/Manual/DrawCallBatching.html" target="_blank" rel="external">相关文档</a> 对游戏性能优化感兴趣的都应该看一看。</p>
<h4 id="在运行中改变颜色">在运行中改变颜色</h4><p>如果你有一套扁平化着色的模型，并且希望在游戏进行时改变颜色，该怎么办呢？</p>
<p>例如，当有一个脚本用于产生你的飞机，并且你想让友方飞机是蓝色，让敌方飞机为红色。你可以通过分离调色板或者分离材质来实现，但这就意味着，你在性能方面会有损失，因为两种飞机不同的飞机不能同一个批次处理。</p>
<p>如果只有少数飞机在视野内显示，这不是一个大问题，然而把程序化地形，成堆的盒子或者其他不同地形类型诸如流行的沙盘游戏，这就意味着成堆的drawcalls产生，但是不用担心，这里有一种方法可以保证只用到一种材质。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_palette_colorizer.jpg"></p>
<p>记住你是如何通过堆放UV坐标到一个颜色盒子中来给模型着色的吗？Unity可以让你动态修改模型的顶点，包括UV坐标。对于不同的地形类型你只需要移动UV坐标到正确的颜色盒子中的脚本。</p>
<p>在Unity中创建一个新的C#脚本 <code>PaletteColorizer</code> 并且粘贴下面的代码:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaletteColorizer</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> colorsPerRow = <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> colorIndex = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">bool</span> overrideUVs = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Awake</span> <span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!enabled)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		SetUVsToColor(colorIndex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUVsToColor</span><span class="params">(<span class="keyword">int</span> colorIndex)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(overrideUVs)</span><br><span class="line">		&#123;</span><br><span class="line">			SetUVs(gameObject, GetColorOffset(colorIndex));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			TranslateUVs(gameObject, GetColorOffset(colorIndex));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Vector2 <span class="title">GetColorOffset</span><span class="params">(<span class="keyword">int</span> colorIndex)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Vector2 offset = <span class="keyword">new</span> Vector2();</span><br><span class="line">		<span class="keyword">float</span> row = Mathf.Floor(colorIndex / colorsPerRow);</span><br><span class="line">		<span class="keyword">float</span> step = <span class="number">1.0</span>f / colorsPerRow;</span><br><span class="line"></span><br><span class="line">		offset.x = (colorIndex - (row * colorsPerRow)) * step;</span><br><span class="line">		offset.y = (<span class="number">1.0</span>f - (row / colorsPerRow));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> offset;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TranslateUVs</span><span class="params">(GameObject obj, Vector2 offset)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> meshFilter = obj.GetComponent();</span><br><span class="line">		Mesh mesh = meshFilter.mesh;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> newUVs = <span class="keyword">new</span> Vector2[mesh.uv.Length];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; mesh.uv.Length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			newUVs[i] = <span class="keyword">new</span> Vector2(mesh.uv[i].x + offset.x, mesh.uv[i].y + offset.y);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		mesh.uv = newUVs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUVs</span><span class="params">(GameObject obj, Vector2 offset)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> meshFilter = obj.GetComponent();</span><br><span class="line">		Mesh mesh = meshFilter.mesh;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> newUVs = <span class="keyword">new</span> Vector2[mesh.uv.Length];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; mesh.uv.Length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			newUVs[i] = <span class="keyword">new</span> Vector2(offset.x + <span class="number">0.01</span>f, offset.y - <span class="number">0.01</span>f);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		mesh.uv = newUVs;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要使用这个脚本，只需要将它作为component添加到任何使用调色板纹理材质的游戏对象上，设置每行的颜色数，并且设置颜色索引（从左上角到右下角开始计算，从0开始）。</p>
<p>如果你的模型UV坐标不适合填充到调色板盒子中（如环绕的水）可以选择<code>Override UVs</code>的复选框，像上面你看到的那样。这将会让脚本重写新的UV坐标，而不改变现有的。</p>
<p>有一点要记住的是，当你修改任何网格，Unity都会在内存中悄悄的创建一个新的网格，如果你经常这样大量处理网格时，你可能会遇到内存问题。你想象这就意味着缓存中的网格与共享的网格会被同样方式着色。对于一个合理数量的低模网格，你永远也不用担心它的性能。</p>
<h4 id="烘培环境闭合">烘培环境闭合</h4><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_scene.jpg">
<p>扁平着色不需要总是多边形块的颜色总是匹配的，你可以添加一些微妙的细节，如现实版的“尘埃”表现。任何表表都可以添加到环境闭合当中去，Unity Pro提供了添加环境闭合的后处理滤镜，但我想告诉你一个额外的方法，不需要pro版本。甚至不需要任何特殊的shader。<br><img src="/2016/02/21/2016-2-21/ao_compare_haus.png"></p>
<p>左右你需要做的就是展开你的模型，通过环境闭合特效烘培成一张纹理。这需要花些时间和精力正确展开你的模型。但完成展开后只需要动下鼠标点几下就能让你的模型拥有更真实和前卫的外观。</p>
<h5 id="步骤1-1">步骤1</h5><p>首先你需要启动Blender创建一个空场景：使用快捷键A选中启动场景中的所有物体，按下Delete删除，然后点D确认删除。你不需要任何灯光和摄像机，因为它们将会在导入进Unity时被当作空。</p>
<h5 id="步骤2-1">步骤2</h5><p>然后，导入你的模型（File&gt;Import&gt;Wavefront(.obj)）.例如我们从一个石块开始。<br><img src="/2016/02/21/2016-2-21/ao_rock_import.png"></p>
<h5 id="步骤3-1">步骤3</h5><p>打开UV编辑器，并创建一个可以包含大致细节的纹理。我很谨慎，只使用了256x256px大小来处理(岩石和树)，如果你要处理非常大的物体（如可以行走的山）你需要设置成更大。<br><img src="/2016/02/21/2016-2-21/ao_rock_addtexture.png"></p>
<h5 id="步骤4-1">步骤4</h5><p>现在展开你的模型，这里有很多种方法可以做，比如我想要得到覆盖更多的细节。你可以阅读Blender的文档或者在线教程来学习如何正确有效的展开你的模型。</p>
<h5 id="步骤5">步骤5</h5><p>现在你已经有了一个展开的模型，你可以准备烘培一个AO到你的纹理上了。Blender可以通过你遵循刚才展开的UV坐标直接将AO渲染进你的纹理。简单步骤如下：</p>
<pre><code><span class="bullet">1. </span>点击右侧屏幕属性面板上的渲染按钮（相机的图标）
<span class="bullet">2. </span>展开下拉列表选取Bake选项（在下边）
<span class="bullet">3. </span>从全局渲染改变成AO烘培模式
<span class="bullet">4. </span>点击上面的Bake按钮。
</code></pre><img src="/2016/02/21/2016-2-21/ao_blender_bake_options.gif">
<img src="/2016/02/21/2016-2-21/ao_blender_generate_ao.gif">
<h5 id="步骤6">步骤6</h5><p>现在你已经有了一个烘焙AO的纹理和一个UV坐标正确的模型可以使用了，保存纹理徒刑文件，并通过Blender将模型导出成Unity可以识别的格式（例如fbx）</p>
<h5 id="步骤7">步骤7</h5><p>根据你的需要你只需要使用纹理，可以简单的创建一个Diffuse材质，使用新烘焙的AO纹理并设置颜色让它看起来不错。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_rock_inscene.jpg"></p>
<p>然而你希望让模型有多种颜色，如树，你只需要遵循一些额外的步骤。按照上边的指示为你的树模型创建一个烘培好的AO纹理，这个时候，你会想追踪你的UV坐标，因为你需要手动在上边设置颜色。</p>
<p>将你的UV按颜色划分成组是一个明智的选择，在这个例子中，我们把树的主干部分放在纹理顶部，把叶子部分放在纹理底部。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_trunk.jpg"><br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_foliage.jpg"></p>
<h5 id="步骤8">步骤8</h5><p>用画图程序打开你烘培好的AO纹理（任何支持图层的都可以做如：<a href="http://www.gimp.org/" target="_blank" rel="external">GIMP</a>)。创建一个新的图层，把它放在AO图层上，使用AO图层作为颜色指南，根据你从模型上看到的颜色来显示新涂层。</p>
<p>使用套索（Lasso）或其他工具，选择你想上色的纹理部分，然后填充正确的颜色。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_texture_brown.jpg"><br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_texture_brownandgreen.jpg"></p>
<h5 id="步骤9">步骤9</h5><p>你现在要做的事设置颜色，这是最后的任务，在颜色涂层上混合AO图层，移动AO图层到颜色图层上，并改变混合模式为<code>Multiply</code>。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_texture_multiply.jpg"></p>
<p>设置涂层不透明度来让效果看起来更好，可以根据你自己的判断调整，但一定要记下这个百分比，因为要做到一个统一的效果在所有需要混合的方法上。<br><img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_texture_multiply_half.jpg"></p>
<p>保存这个纹理到一个文件中，并将他导入到Unity的树模型上，创建一个和石头一样的材质，使用刚才你制作的纹理。</p>
<img src="/2016/02/21/2016-2-21/Flat_shaded_3D_in_Unity_ao_tree_inscene.jpg">
<p>看起来相当不错！使用这个技术在你所有模型上，可以使你的场景相较单纯的扁平着色更精良，真实。</p>
<p>你可能注意到你的材质只使用了diffuse shader，你可以使用AO直接混合到任何颜色纹理上，只要使用的shader支持Diffuse纹理，这样你不需要任何AO特定代码！</p>
<h4 id="总结">总结</h4><p>现在你可以方便的使用这个技术来制作一个完整的扁平化着色的游戏了，通过练习，你可以获得更惊人的效果和更高的效率。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://gamedevelopment.tutsplus.com/articles/go-beyond-retro-pixel-art-with-flat-shaded-3d-in-unity--gamedev-12259">http://gamedevelopment.tutsplus.com/articles/go-beyond-retro-pixel-art-with-flat-shaded-3d-in-unity--gamedev-12259</a></p>
<p>在这篇教程中，我将为你展示如何在Unity中创建flat-shaded(扁平着色)的3D游戏，并且解释为什么你想第一时间去制作它。</p>
<p>在今天，已经有丰富多样的3D建模工具和引擎让人们去制作3D游戏，然而3D美术的挑战是严峻的，往往需要大量的时间、精力和经验丰富的开发者，这是独立开发者和业余爱好者所不具备的条件。Low-polygon(低模)模型，集合扁平化着色的方式，把人带回道早起90年代的风格，使用技术相对简单，任何人都可以学习使用。这不仅仅是怀旧的倒退，扁平化着色可以很容易的与现代渲染技术结合使用，如环境闭合贴图可以让游戏画面看上去更引人瞩目和更前卫的感觉。</p>
<p><a href="http://cdn.tutsplus.com/gamedev/uploads/2013/11/gamedevtuts_flatshading.zip">获得Unity的例子工程</a></p>]]>
    
    </summary>
    
      <category term="3D" scheme="http://tinyflare.com/tags/3D/"/>
    
      <category term="Unity" scheme="http://tinyflare.com/tags/Unity/"/>
    
      <category term="图形学" scheme="http://tinyflare.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="程序" scheme="http://tinyflare.com/tags/%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://tinyflare.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《地牢笑声》comming soon]]></title>
    <link href="http://tinyflare.com/2016/01/24/2016-1-24/"/>
    <id>http://tinyflare.com/2016/01/24/2016-1-24/</id>
    <published>2016-01-24T07:08:54.000Z</published>
    <updated>2016-03-06T13:13:41.000Z</updated>
    <content type="html"><![CDATA[<h4 id="非标准型rougelike游戏，估计年后就可以上线了，测试中～～～">非标准型rougelike游戏，估计年后就可以上线了，测试中～～～</h4><p>先上宣传图</p>
<img src="/2016/01/24/2016-1-24/splash_cn.png">
<a id="more"></a>
<img src="/2016/01/24/2016-1-24/screenslot1_5.5_cn.png">
<img src="/2016/01/24/2016-1-24/screenslot2_5.5_cn.png"><img src="/2016/01/24/2016-1-24/screenslot3_5.5_cn.png">
<img src="/2016/01/24/2016-1-24/screenslot4_5.5_cn.png">
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="非标准型rougelike游戏，估计年后就可以上线了，测试中～～～">非标准型rougelike游戏，估计年后就可以上线了，测试中～～～</h4><p>先上宣传图</p>
<img src="/2016/01/24/2016-1-24/splash_cn.png">]]>
    
    </summary>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《攀登梅鲁峰》]]></title>
    <link href="http://tinyflare.com/2015/11/21/meru/"/>
    <id>http://tinyflare.com/2015/11/21/meru/</id>
    <published>2015-11-21T14:58:41.000Z</published>
    <updated>2016-03-06T13:15:28.000Z</updated>
    <content type="html"><![CDATA[<p>一部非常棒的纪录片《攀登梅鲁峰》，看完后所有困难都感觉不是事了, 满满的正能量。前些日子看了《绝命海拔》，两者比较，后者真真正正震撼人心，强烈推荐！</p>
<img src="/2015/11/21/meru/7e274088fbfdf6b60f50bab161bbbabd.jpg">
<a id="more"></a>
<img src="/2015/11/21/meru/22d660937649c03c8f3147eb63d92026.jpg">
<p>中间插曲和片尾曲都非常天籁，纯净</p>
<p><a href="https://soundcloud.com/andraday/the-light-that-never-fails" target="_blank" rel="external">片尾曲: The Light That Never Fails</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一部非常棒的纪录片《攀登梅鲁峰》，看完后所有困难都感觉不是事了, 满满的正能量。前些日子看了《绝命海拔》，两者比较，后者真真正正震撼人心，强烈推荐！</p>
<img src="/2015/11/21/meru/7e274088fbfdf6b60f50bab161bbbabd.jpg">]]>
    
    </summary>
    
      <category term="电影" scheme="http://tinyflare.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序化地牢生成算法]]></title>
    <link href="http://tinyflare.com/2015/11/14/DungeonGenerationAlgorithm/"/>
    <id>http://tinyflare.com/2015/11/14/DungeonGenerationAlgorithm/</id>
    <published>2015-11-14T13:56:18.000Z</published>
    <updated>2016-03-06T13:15:05.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php" target="_blank" rel="external">http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php</a></p>
<p>这篇文章阐述了一个生成随机地牢的算法，这是由<a href="https://www.reddit.com/r/gamedev/comments/1dlwc4/procedural_dungeon_generation_algorithm_explained/" target="_blank" rel="external">tinykeepdev</a><a href="http://store.steampowered.com/app/278620/" target="_blank" rel="external">游戏</a>最早使用的技术。我这里会比原文章更详细的介绍生成步骤。算法步骤是这样工作的:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/wM30Xyl.gif">
<h4 id="生成房间">生成房间</h4><p>首先你需要在一个圆圈内随机宽高生成一些房间，我认为tinykeep使用的是正太分布的算法来生成房间大小的。这通常是一个好主意，因为你可以给定更多的参数。选择不同的宽高比例和标准差会生成式样不同的地牢。</p>
<p>你需要做的是一个这样的函数 getRandomPointInCircle:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInCircle</span>(<span class="title">radius</span>)</span></span><br><span class="line">  <span class="built_in">local</span> t = <span class="number">2</span>*math.<span class="constant">pi</span>*math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> u = math.<span class="built_in">random</span>()+math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> r = nil</span><br><span class="line">  <span class="keyword">if</span> u &gt; <span class="number">1</span> <span class="keyword">then</span> r = <span class="number">2</span>-u <span class="keyword">else</span> r = u <span class="function"><span class="keyword">end</span></span></span><br><span class="line">  <span class="constant">return</span> radius*r*math.<span class="built_in">cos</span>(t), radius*r*math.<span class="built_in">sin</span>(t)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>你可以从<a href="http://stackoverflow.com/questions/5837572/generate-a-random-point-within-a-circle-uniformly" target="_blank" rel="external">这里</a>获得更多的信息。接下来你需要做的的是这些：</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/9TsZluP.gif">
<p>一个你必须考虑的非常重要的事情(至少在理论上)是当你处理一个瓷片(tile)型网格,你需要保证所有东西都在相同的网格山峰。在上边gif图中每个瓷片(tile)的大小是4像素，这意味着所有房间的位置和大小都是4的倍数。要做到这样，我把位置和长宽的对齐封装到一个函数中：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roundm</span><span class="params">(n, m)</span></span> <span class="keyword">return</span> <span class="built_in">math</span>.floor(((n + m - <span class="number">1</span>)/m))*m <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Now we can change the returned value from getRandomPointInCircle to:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInCircle</span><span class="params">(radius)</span></span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> roundm(radius*r*<span class="built_in">math</span>.cos(t), tile_size), </span><br><span class="line">         roundm(radius*r*<span class="built_in">math</span>.sin(t), tile_size)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="分割房间">分割房间</h4><p>现在我们继续分割部分。这里有很多房间被堆叠到一起，它们不应该是重叠的。TKdev使用分离操作行为来进行的。但是我发现使用一个物理引擎来做这些更加简单。当你添加完所有房间后，简单添加实体物理体来匹配每个房间的位置，然后进行模拟运行，直到所有物理对象都进入sleep状态。在这个gif中我运行了物理模拟，当你对不同级别做模拟时，你可以加速物理仿真模拟速度。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/Zv2kYmv.gif">
<p>除了通过调用roundm函数设置房间位置并且保证彼此不重叠、不超出网格时，其他时候不需要绑定物理物体到tile网格上。下面这个gif中的蓝色边框体是物理物体，虽然他们和房间的位置之间会有微小误差:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/eyTNcXE.gif">
<p>当你调整房间的水平和垂直位置时，一个问题可能会出现. 组合非常水平，你可能会得到大多数的房间宽度比高度大很多。这个问题在于如何在长房间彼此接近时物理引擎如何解决他们的碰撞:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/VbvngEZ.gif">
<p>正如你所看到的，地下城变的非常高，这是不理想的。为了解决这个问题，我们可以使用一个扁的椭圆提到圆圈来生成房间。这样可以保证地牢生成后有一个合适的宽高比例:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/yMEwhwr.gif">
<p>为了在一个扁平区域内随机生成，我们使用一个椭圆(在gif中我使用了ellipse_width = 400, ellipse_height = 20)来替换”geRandomPointInCircle”函数:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInEllipse</span>(<span class="title">ellipse_width</span>, <span class="title">ellipse_height</span>)</span></span><br><span class="line">  <span class="built_in">local</span> t = <span class="number">2</span>*math.<span class="constant">pi</span>*math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> u = math.<span class="built_in">random</span>()+math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> r = nil</span><br><span class="line">  <span class="keyword">if</span> u &gt; <span class="number">1</span> <span class="keyword">then</span> r = <span class="number">2</span>-u <span class="keyword">else</span> r = u <span class="function"><span class="keyword">end</span></span></span><br><span class="line">  <span class="constant">return</span> roundm(ellipse_width*r*math.<span class="built_in">cos</span>(t)/<span class="number">2</span>, tile_size), </span><br><span class="line">         roundm(ellipse_height*r*math.<span class="built_in">sin</span>(t)/<span class="number">2</span>, tile_size)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<h4 id="生成主房间">生成主房间</h4><p>下一步就是确定哪些房间是主房间，哪些不是. TKdev的做法非常可靠，控制宽/高比例的阀值进行挑选，下面gif中的阀值我们采用1.25乘以平均数。如果宽度平均数和高度平均数为24，则宽和高大于30的房间将被选中。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/yeqXkTe.gif">
<h4 id="Delaunay三角化剖分图">Delaunay三角化剖分图</h4><p>现在我们采用所有选定房间的中心点位种子进行Delaunay程序化。你可以自己实现这个程序化方法，也可以采用别人已经实现好的源代码。在我的例子中，我很幸运的得到了<a href="https://github.com/Yonaba/delaunay" target="_blank" rel="external">Yonaba</a>的实现。正如你从界面中看到的通过点划分的三角形:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/BUeRTaW.gif">
<p>在你进行三角化后，你可以的到一个图。通过这个图你可以非常容易的实现一个图的数据结构。如果你已经这么做了，你可以添加房间对象的数据结构指针到图中，而不需要再拷贝他们了。</p>
<h4 id="最小生成树">最小生成树</h4><p>接下来我们要从图中生成一个最小生成树。每一个语言。的实现你都可以找到别人实现的例子</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/gc77fqU.gif">
<p>最小生成树时用来保证地牢所有主要房间都是可到达的。但不想图那样所有房间都有连接。这是很有用的，在默认情况下，我们通常不需要超级连接地牢，但我们也不想要产生到达不到的岛屿。尽管如此，我们也不希望只有一条线性路。所以我们现在所做的是为Delaunay图题添加一些返回的边。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/Spogz4z.gif">
<p>这会增加更多的路径和循环路径，这将使地牢变的更有趣。TKdev添加了%15回来的边，我发现增加%8-%10会是一个更好的值。这也取决于你想要得到的最终地牢。</p>
<h4 id="走廊">走廊</h4><p>在最后一部分，我们要添加地牢的走廊。要做到这一点，我们通过图中每一点连接到其他节点。如果节点水平位置足够接近(它们的位置y值近似)，在它们之间创建一条水平直线。如果节点垂直位置足够接近(它们的位置x值近似)，在它们之间创建一条垂直直线。如果两个节点水平和垂直位置都不接近。那么创建2条线类似一个L形状。<br>这里的足够接近的意思是计算2个节点的中心点位置，检查中心点的x,y属性是否在系诶单边界内。如果在则在两个中心点间创造一条直线，如果不在，则创造两条直线，从源点到目标点，但只有一个轴。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/iKR57gS.png">
<p>在上图中你可以看到所有情况的例子。节点在47与62之间有一条水平线，几点60到125间有一条垂直线，在节点118与119之间有一个L形状。同样重要值得注意的是哪些不适我所创造的唯一的线，我同样根据tile_size在每一边空白处绘制了额外2条线，因为我想我们的走廊宽高至少有3个tile的宽度。</p>
<p>然后开始用这些线与所有非主房间的矩形进行碰撞检测，如果有泵装，添加他们到现有结构，将他们作为走廊的骨架。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/Y7E7Egn.png">
<p>根据不同大小的房间来初始化你的地牢样式，如果你想让走廊看上去更加均匀，你需要针对一个低差分标准来选择保留某个房间或替换某个过细的房间。</p>
<p>对于最后一步，我们只需要添加tile大小的网格单元来弥补丢失的部分。注意你并不需要一个网格的数据结构，你只需要将每条线根据tile大小来在周围添加一个网格位置列表(即对应一个tile大小的单元)。这里通常是3个tile(或更多)宽度而不是一个。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/bSV1gpV.png">
<img src="/2015/11/14/DungeonGenerationAlgorithm/t4G5oRK.gif">
<p>我们完成了。</p>
<h4 id="结束语">结束语</h4><p>通过这个程序化过程我们返回的数据结构是: 一个房间列表(每个房间结构包含一个唯一ID,位置xy和宽高width,heigh);一个图,每个节点包含房间的ID和到另外相连房间的距离(多少个tile宽度);一个真实的二维网格，包含的单元可以是空的，可以是指向主房间的指针，可以是指向走廊房间的指针，或者是走廊单元格。有了这三种数据结构我们可以认为你可以得到你想要的任何数据。通过布局你可以找出那个地方可以放置门、敌人、物品或者哪个房间有boss等等。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/GKO8EUG.gif">
]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php">http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php</a></p>
<p>这篇文章阐述了一个生成随机地牢的算法，这是由<a href="https://www.reddit.com/r/gamedev/comments/1dlwc4/procedural_dungeon_generation_algorithm_explained/">tinykeepdev</a><a href="http://store.steampowered.com/app/278620/">游戏</a>最早使用的技术。我这里会比原文章更详细的介绍生成步骤。算法步骤是这样工作的:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/wM30Xyl.gif">
<h4 id="生成房间">生成房间</h4><p>首先你需要在一个圆圈内随机宽高生成一些房间，我认为tinykeep使用的是正太分布的算法来生成房间大小的。这通常是一个好主意，因为你可以给定更多的参数。选择不同的宽高比例和标准差会生成式样不同的地牢。</p>
<p>你需要做的是一个这样的函数 getRandomPointInCircle:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInCircle</span>(<span class="title">radius</span>)</span></span><br><span class="line">  <span class="built_in">local</span> t = <span class="number">2</span>*math.<span class="constant">pi</span>*math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> u = math.<span class="built_in">random</span>()+math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> r = nil</span><br><span class="line">  <span class="keyword">if</span> u &gt; <span class="number">1</span> <span class="keyword">then</span> r = <span class="number">2</span>-u <span class="keyword">else</span> r = u <span class="function"><span class="keyword">end</span></span></span><br><span class="line">  <span class="constant">return</span> radius*r*math.<span class="built_in">cos</span>(t), radius*r*math.<span class="built_in">sin</span>(t)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Rougelike" scheme="http://tinyflare.com/tags/Rougelike/"/>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="程序" scheme="http://tinyflare.com/tags/%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://tinyflare.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用FamiTracker创建8位音乐]]></title>
    <link href="http://tinyflare.com/2015/10/19/FamiTracker01/"/>
    <id>http://tinyflare.com/2015/10/19/FamiTracker01/</id>
    <published>2015-10-19T05:08:23.000Z</published>
    <updated>2016-03-06T13:15:13.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music" target="_blank" rel="external">http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music</a></p>
<h4 id="开始创作Chiptune(芯片声)音乐前需要了解的工具和知识">开始创作Chiptune(芯片声)音乐前需要了解的工具和知识</h4><p>在复古视频游戏与电子媒体领域学习如何制作8位音乐是一个神奇的旅程。首先你必须理解什么是8位音乐。如果你玩过一个NES游戏机，或者你提说过它，但很少有人真正想知道如何制作8位音乐，更别说尝试。当人们在制作最早广泛被商业化的视频游戏时，他们没有我们今天创作音乐的技术。没有FL Studio,没有Garage Band(两款音乐制作软件)。在很长一段时间里，只有一个小小的，可以处理8位信息的电脑芯片控制器。所以声音工程师每天只能创作4通道声音，其中两个通道用来处理高音，一个通道用来处理低音，一个通道用来处理噪声。</p>
<p>现在我们有创造出更高质量音乐的技术，不再有设备上的限制，为什么人们还会去创作8位音乐？不管你信不信，很多游戏依然适用8位音乐，也被称为“chiptunes”(芯片音乐)，可能是对过去淳朴时光的还年，或者可能是钟爱这种音乐风格，无论什么原因，今天一些游戏依然尝试完全使用8位音乐。</p>
<p>注：本教程探讨如何成为制作8位音乐中的一员，而不是强制去学习如何使用现代的软件去制作它。如果你想为你的数字音频工作站找寻一款插件的话，我推荐 <a href="http://www.ymck.net/index.html" target="_blank" rel="external">YMCK’s Magical 8bit Plugin</a>.如果真是如此，你也应该在此界面稍作停留，你会学到很酷的东西。</p>
<a id="more"></a>
<h4 id="声波介绍">声波介绍</h4><p>不，我们不是要去海滩，我说的是声音通过空气产生的涟漪。了解波形的基本形式是学习如何制作8位音乐的第一步。</p>
<p>如果你已经玩过任何形式的录音软件，你可能看到过他们。他们把声音的传递用视觉表现成速度和音高。你看到的声波可能会有点复杂，现在我们讨论用计算机仿真表示，可能会更容易理解。</p>
<p>在8位音乐中有4种基本的声波类型：Sine(正弦)，Saw(锯齿),Square(正方形),和Triangle(三角形)。</p>
<p>每一种产生不同类型的声音，他们根据作曲家的意愿塑造成不同类型的效果，如颤音或延迟等。</p>
<h5 id="Sine_Waves(正弦波)">Sine Waves(正弦波)</h5><p>你可能记得在高中物理课上或大学三角函数或微积分课上见到过它们，这个波形表现为一个完美的向上或向下的过山车型曲线。正如可以预料的那样，它的音色甜美光滑，听起来像长笛。</p>
<img src="/2015/10/19/FamiTracker01/sine.jpg">
<h5 id="Saw_Waves(锯齿波)">Saw Waves(锯齿波)</h5><p>这类波形有一点硬，之所以被称为“锯齿”是因为它们看上去像锯的牙齿，急速下降，缓慢上升。这类波形非常被用在8位音乐中的计数旋律。它们也被认为认为是chiptune和音中的中音。锯齿型声波听上去有些嗡嗡嘈杂。(看图)</p>
<img src="/2015/10/19/FamiTracker01/saw.jpg">
<h5 id="Square_Waves(方形波)">Square Waves(方形波)</h5><p>这是我最喜欢的一种波形。它代表了一种正选波与锯齿波的混合波形。它也有一些嘈杂感，但同时也能保持平滑。这也是在8位音乐中最常用作主音的波形。这类声波有很好的扩展性，可以作很好的效果改变。</p>
<img src="/2015/10/19/FamiTracker01/square.jpg">
<h5 id="Triangle_Waves(三角波)">Triangle Waves(三角波)</h5><p>这类波形听上去和正选波一样平滑，它以直线的上升和下降而不是曲线。波形为三角形。这类波在音效上不起作用，因为它们不能很有效的做主音填充。它们常被用做低音使用，因为它们不用创建嗡嗡的反馈效果就能很容易的到达低音节。它们很适合在低音范围使用。</p>
<img src="/2015/10/19/FamiTracker01/triangle.jpg">
<h4 id="声波是如何被创建">声波是如何被创建</h4><div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=YsZKvLnf7wU" frameborder="0" allowfullscreen></iframe></div>
<h5 id="8位声道">8位声道</h5><p>在NES时代，由于技术的限制，任何给定时间的声音只能有4条声轨(或声道)。这意味着作曲家或NES游戏设计师的一些创意或者他们想用音乐表达的东西往往更多依赖于更强烈的旋律和颤音效果，这通畅会占用一个或2个声道。而腾出空间做其他事情。如果你去玩你最喜欢的NES游戏，你会听到每一个声道上每一个音效结束后才会有另一个音效，(像《塞尔达》低血量时或者《洛克人》射击时)为的是节省通道播放其他效果。</p>
<h5 id="声道1_-_Treble(高音)">声道1 - Treble(高音)</h5><p>要讨论的第一个声道1几乎总是用于高音旋律，它通常是方形波货锯齿波，当然正选波也可以很好的工作。这个声道应该是最注意细节的。tremolo、vibrato或delay等效果可以更明亮的表现。当你创造主旋律时更应该花费耐心和爱去对待它。它可能会是当人把游戏关掉后在接下来几天走路一直哼唱或者第一时间关掉你的游戏的主要原因。</p>
<img src="/2015/10/19/FamiTracker01/melody.jpg"> 
<p>主旋律</p>
<h5 id="声道_2_-_Mid-Range(中音)">声道 2 - Mid-Range(中音)</h5><p>这个声道通常被用来制作副旋律。我想把它当作高音声道1的中音。这一行应该简单点。这一声道的主要工作是填补通道1主音部分和通道3的低音部分，使两者之间和音更加和谐。这个声道使用正弦波或者锯齿波会是很好的选择。当然方形波也可以很好的使用。一些arpeggios和delay效果也是很好的选择。在8位音乐中arpeggios效果可以创造出快节奏的分解和弦，能够完美的填补和音。</p>
<img src="/2015/10/19/FamiTracker01/backingmelody.jpg"> 
<p>副旋律</p>
<h5 id="声道_3_-_Bass(低音)">声道 3 - Bass(低音)</h5><p>虽然我们不能使它像Dubstep一样的重击感，但我们依然能创造一个甜美的低音线来完成任何歌曲。最佳波形选择是三角波。最棒的事情是三角波和正选波很像，它能无阻碍的浸入上面的寄存器。如果你需要一个对或更多音符来创建一个紧凑丰富声音的时候，这事非常奇妙的。由于这条声线对一般游戏玩家的耳朵听起来不会像主音那么明显。低音也没过于复杂或嘈杂感。所以他很完美的满足一些切分音的音符。</p>
<img src="/2015/10/19/FamiTracker01/bass.jpg"> 
<p>低音</p>
<h5 id="声道_4_-_Noise(噪音)">声道 4 - Noise(噪音)</h5><p>当你玩最喜爱的NES游戏时，你可能已经注意到一些敲击的声音真的只是噪音。这个声道不合适我们讨论的任何一种波。但他可以使用scraping、pops、clicks或者其他噪音效果在不同的音高或音速上。你也可以对这个声道添加效果，但可以对其他声道产生影响，可能会给游戏带来意想不到的效果。</p>
<img src="/2015/10/19/FamiTracker01/noise.jpg"> 
<p>噪音</p>
<h5 id="额外声道_-_DPCM">额外声道  - DPCM</h5><p>此通道可以用来导入声音文件。但比原声音的质量会低很多，所以你不要指望你的下一个NES可以通过这种方式获得比较帅的声音。这个声道不是很经常使用，如果你特别在意如何使用它，在famitracker帮助文件中有很好的解释。点击帮助&gt;帮助主题或按F1，展开列表，在列表下边点击EPCM Editor即可。</p>
<h4 id="8位音乐制作器">8位音乐制作器</h4><p>现在你知道了芯片音轨如何工作的所有基础知识了，现在是时候开始如何自己制作了，在8位音乐制作方面FamiTracker时最好的工具之一。知道如何演奏钢琴的基础知识是一个很好的优势，因为它的设计就是让你电脑按键按照钢琴键盘一样的输入音符。但是你也不要担心，如果你不知道如何演奏也没必要去上课学习。你很快就会把这个程序学习起来的。</p>
<h5 id="音轨程序">音轨程序</h5><p>音轨最好的地方就是可以导出成NSF格式，这意味着你可以在制作一个NES音乐盒游戏中使用它们。“这个格式还在被使用么?”, 当然，如果你不信可以看看这个游戏 <a href="https://en.wikipedia.org/wiki/Battle_Kid:_Fortress_of_Peril" target="_blank" rel="external">Battle Kid</a>.</p>
<ul>
<li><p>FamiTracker是免费喝开源的。也是我个人制作芯片音轨的选择。我将用它来完成剩余的本教程</p>
</li>
<li><p>如果你不想使用FamiTracker还可以使用MilkyTracker.它也是免费和开源的。</p>
</li>
</ul>
<h5 id="其他资源">其他资源</h5><ul>
<li>如果你想为你的数字音频工作站找寻一款复古插件的话，<a href="http://www.ymck.net/index.html" target="_blank" rel="external">YMCK’s Magical 8bit Plugin</a>是相当不错的选择</li>
<li>如果你只是想快速寻找到一些8位声音音效而不是想学习上述程序，或者你只是想制作自己的芯片音乐找灵感的话，你可以可以尝试使用<a href="http://www.drpetter.se/project_sfxr.html" target="_blank" rel="external">SFXR</a>.它是免费开源的8位音乐制作软件，可以给制作复古游戏的开发者提供帮助。</li>
</ul>
<img src="/2015/10/19/FamiTracker01/famitracker.jpg"> 
<p>Famitracker</p>
<h4 id="设置FamiTracker">设置FamiTracker</h4><p>因为我选择的程序，我将向你展示它的基础知识，包括设置、输入音符以及增加效果。</p>
<p>当你第一次启动这个程序，会有一个空的曲子面板展示给你。注意不同的通道已经被设置成了不同的波形。通道1，2被设置成方形波，通道3被设置成三角波，通道4被设置成噪声波。还有一个额外的通道被设置成”DPCM”。最大的区域是模版编辑器。</p>
<p>在左上角你会发现一个一堆0的小盒子，这是模版选择器。接下来是声音设置和声音信息。你可以很简单的找到它们。</p>
<h4 id="编辑乐器">编辑乐器</h4><img src="/2015/10/19/FamiTracker01/editinganinstrument.jpg"> 
<p>编辑乐器</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=bwNElW5IEo0" frameborder="0" allowfullscreen></iframe></div>
<h4 id="创建一段旋律">创建一段旋律</h4><h5 id="制作和编辑一个新乐器">制作和编辑一个新乐器</h5><p>也许你已经写了一首歌，并且想把它变成8位音乐。如果你没有，你至少应该马上去写一段主旋律或挑选你最喜欢的NES音乐来复制。</p>
<p>一旦你想出了一个好的主旋律，那是时间去制作它了。首先，我们必须创建一个新乐器，然后编辑声音和效果。要做到这一点，点击最左边的图标，在下列行中点击左上方的黑盒子。当你这样做后会跳出一个包含“00-新乐器”黑色对话框。双击这些文字或点击同一行中最右边的图标。</p>
<p>一个包含一些选项的新对话框会出现。点击volume旁的按钮并打开它。现在点击加号一段时间后Size会出现。你现在在最大线上点击来调整乐器每一个播放音符的大小。当你点击后注意Size编辑器下边出现的数字。这将高速你每一行会有什么效果。举例，如果你有一段数字序列”10,8,6,4,2”,每当这个乐器播放一个音符。音量将会从非常响亮的10开始，并且每当下一个音符被播放会产生一个2度的下降。</p>
<p>效果往往比音量更有用，但对于旋律线比较少。使用其他效果会更自由。如果你添加了一些无意的东西，你可以随时很轻易的撤销。</p>
<h4 id="键盘按键">键盘按键</h4><img src="/2015/10/19/FamiTracker01/keyboard.jpg"> 
<p>键盘按键</p>
<h4 id="输入音符">输入音符</h4><p>现在开始为我们的新乐器添加播放音符，首先你必须按住“空格”键。这会使程序进入编辑模式。现在你可以开始演奏你的键盘，像演奏钢琴一样。上面展示了这个程序最底下像钢琴一样对应的两行按键，它和上面两行工作方式一样，但那是高八度的音节使用的。所以在任何点，你都有两个全音阶音程可以工作。你可以在任何时候从程序左上角的下拉列表选择一个八度范围改变。</p>
<p>每一个虚线被认为是16分之一拍。所以每一个高亮行代表四分之一拍。如果由于某种原因你需要三十秒的音符。只需要在每一行的值减半。这样高亮行会代表一个八拍。当你开始输入音符，用完了工作空间，只需要按住声音设置Frames下边的加号即可。</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=FNduThBHcG8" frameborder="0" allowfullscreen></iframe></div>
<h4 id="特效">特效</h4><img src="/2015/10/19/FamiTracker01/effects.jpg"> 
<p>Effects</p>
<h5 id="添加特效">添加特效</h5><p>有一些特效你可以在任何时间添加到你的乐器或者从中移除。每个数字都赋予一个数字或字母，你只需要输入双数字作为参数。首先让我们谈论一下关于音符输入的布局。</p>
<p>你会注意到在通道的每一列会有一大堆点在里面，仔细看你会发现一些点被按列组合在了一起。最左边一列一组三个点。当你点击并输入一些音符，这些点会被音符破折号或者音阶符替代。如果你输入了音符，你会发现下一列的一组两个点会被显示成00. 这些数字代表了被设置了演奏乐器的音符。如果你有多个乐器。选择一个播放这些音符。如果你想拥有不同乐器和不同效果，例如立体的arpeggios(琶音)，你都可以很容易的在乐器编辑器中编辑。</p>
<p>下一列只包含一个点。这个是音量。在这个程序中大多数都是以16进制为基础的。所以音量这个值是被定义成从0到F。如果你对16进制不熟悉的话，可以理解成为所有值都是被定义成16的倍数。随着数字的增加，直到9，后边开始以字母A开始增加，直到最高的F。</p>
<p>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)</p>
<h5 id="音量变化">音量变化</h5><p>在FamiTracker中，这是最简单和最有效的特效。在你的曲子任何一个点，你都可以改变这个音量行的值。无论这个音符是不是正在被播放。这就是我们如何去创造一个延迟的效果。如果你的被播放的音符的音量被设置成F,你可以一次下降几个度。然后定住，然后再下降。例如F,B,7,3,D,8,4,1</p>
<h5 id="其他效果">其他效果</h5><p>另外除了能改变曲子每一行的音量，你可以做很多其他效果，最后一列的是三个一组的点。再这里你能添加喝编辑任何你希望的效果。第一个点是表示什么样的效果将被应用，接下来的2个点表示不同效果下的不同参数，视情况而定。比如我们想添加Tremolo(颤音)效果。所以挑选一行并且在第一个表示效果的点上键入类型7，在这种情况下，下一个点代表速度，第三个点代表深度。如果你不知道这些意味着什么，试试用用看看他们有什么变化。</p>
<p>在我的下面例子“Chippy”中，我首先输入了777，然后是755，之后又是733，如果你也尝试这样做了，你会听到这三段的不同效果。</p>
<p>正如上边所提到的，还有许多效果你可以添加。事实上在这里讨论的话要讲很多。要查看完整的效果列表，以及输入方式，点击帮助(help)&gt;效果表(Effect Table).</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=v_eHQiB4v-c" frameborder="0" allowfullscreen></iframe></div>
<h4 id="继续制作Chiptunes!">继续制作Chiptunes!</h4><p>这里淘落的知识关于制作8位音乐的开始，在其他声道上重复上述步骤，用不了多久你就完全熟悉8位音乐制作了，你可以展示给你的朋友!</p>
<p>制药你这么做了，FamiTracker可以导出你的曲子为NSF货WAV格式，也许你以前听说过WAV,这种格式是非常合适在互联网上传播展示的。如果你真的想要正宗的8位音乐，可以保存为NSF格式。那么你只能在模拟器上或其他程序中播放了。</p>
<h5 id="例子">例子</h5><p>Chippy</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=41u_r8NCh8I" frameborder="0" allowfullscreen></iframe></div>
<p>Mega Man X - Boomer Kawanger</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=e1EVUlYtxoA" frameborder="0" allowfullscreen></iframe></div>
<p>Final Fantasy 7 - JENOVA</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=6j2dJdLwI9Q" frameborder="0" allowfullscreen></iframe></div>
<p>Journey - Don’t Stop Believing</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=5VkFATXaQWE" frameborder="0" allowfullscreen></iframe></div>]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music">http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music</a></p>
<h4 id="开始创作Chiptune(芯片声)音乐前需要了解的工具和知识">开始创作Chiptune(芯片声)音乐前需要了解的工具和知识</h4><p>在复古视频游戏与电子媒体领域学习如何制作8位音乐是一个神奇的旅程。首先你必须理解什么是8位音乐。如果你玩过一个NES游戏机，或者你提说过它，但很少有人真正想知道如何制作8位音乐，更别说尝试。当人们在制作最早广泛被商业化的视频游戏时，他们没有我们今天创作音乐的技术。没有FL Studio,没有Garage Band(两款音乐制作软件)。在很长一段时间里，只有一个小小的，可以处理8位信息的电脑芯片控制器。所以声音工程师每天只能创作4通道声音，其中两个通道用来处理高音，一个通道用来处理低音，一个通道用来处理噪声。</p>
<p>现在我们有创造出更高质量音乐的技术，不再有设备上的限制，为什么人们还会去创作8位音乐？不管你信不信，很多游戏依然适用8位音乐，也被称为“chiptunes”(芯片音乐)，可能是对过去淳朴时光的还年，或者可能是钟爱这种音乐风格，无论什么原因，今天一些游戏依然尝试完全使用8位音乐。</p>
<p>注：本教程探讨如何成为制作8位音乐中的一员，而不是强制去学习如何使用现代的软件去制作它。如果你想为你的数字音频工作站找寻一款插件的话，我推荐 <a href="http://www.ymck.net/index.html">YMCK’s Magical 8bit Plugin</a>.如果真是如此，你也应该在此界面稍作停留，你会学到很酷的东西。</p>]]>
    
    </summary>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="音乐" scheme="http://tinyflare.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为你的游戏美术选取合适的调色板]]></title>
    <link href="http://tinyflare.com/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/"/>
    <id>http://tinyflare.com/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/</id>
    <published>2015-09-23T01:48:49.000Z</published>
    <updated>2016-03-06T13:15:42.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174" target="_blank" rel="external">http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174</a></p>
<p>在这个教程中我们一起学习什么是调色板，介绍一些选取颜色的工具，以及。为我们的游戏选取一个完美配色方案的秘密</p>
<h3 id="调色板介绍">调色板介绍</h3><p>调色板这个术语在许多不同设计行业中被广泛使用，它的确切定义和解释在不同行业中也有着不同的变化，对于游戏设计而言，我们可以简单的把他当作一组按特定规则预先定义好的颜色集合。</p>
<p>传统调色板通常被认为由一个五种颜色组成的方案，但这更多的是颜色指导方案而不是一个规则。调色板被可以被认为是一个我们预先定义好的规则可以包含任意数量的颜色。</p>
<p>在我们深入探讨之前，可以考虑下你是否想创建自己的调色板或者在网上找一个现成的方案。不管怎样，这里会有很多工具可以帮助你！</p>
<h3 id="通过工具挑选调色板">通过工具挑选调色板</h3><p>调色板可以在几乎每一个颜色选取器的程序中被创建，但有那么多杰出的网站可以把工作做的更好，为什么要使用微软的画图板呢。</p>
<a id="more"></a>
<h5 id="Kuler">Kuler</h5><p><a href="http://kuler.adobe.com/" target="_blank" rel="external">Adobe Kuler</a> 是我最喜欢的制作调色板的工具之一，因为他是一个可以将所有操作一体化的工具。</p>

<p>并且它能够从一个你认为可以找到灵感的图片生成你自己的调色板，以及也可以分享你的调色板或者发现别人创作的调色板！这意味着它提供取之不尽的现成调色板供您选择。</p>
<p>如果你有丰富的经验的或者选招他人已经创建好的调色板的话，我推荐你使用这款工具。</p>
<h4 id="ColorScheme_Designer_3">ColorScheme Designer 3</h4><p>另外一个杰出的制作调色板的工具是<a href="http://colorschemedesigner.com/" target="_blank" rel="external">ColorScheme Designer 3</a>,他有所有标准功能，你可以期待这款工具让你的界面设计散发真正的光芒</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorSchemeDesigner.png">
<p>你可以毫不费力的使用它来创建调色板，如果你只有简单的经验就能使用的工具话，我推荐你使用它。</p>
<h4 id="Color_Blender">Color Blender</h4><p>最后一款工具，我的推荐是<a href="http://www.colorblender.com/browse" target="_blank" rel="external">Color Blender</a>,在这三款工具中，我不得不将它视为最有趣的工具。</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorBlender.png">
<p>它提供给你一个色轮和一个修正值来修改，并且它只给你三个滑块(对应RGB或HSB)来操作,和<a href="http://kuler.adobe.com/" target="_blank" rel="external">Kuler</a>一样，它也提供一个区域用来浏览别人创建的调色板。</p>
<p>如果你正在寻找一个真正帮助你创建调色板的工具，你我推荐使用这个工具。</p>
<h3 id="配色方案的常见类型">配色方案的常见类型</h3><p>当你制作游戏时有许多不同类型的颜色方案可以选择，所以本文只会覆盖到你最有可能的选择方案，它们都是给予颜色轮中的不同颜色之间的关系的：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Base.png">
<p><code>邻近色（Analogous）</code>:调色板的色轮上彼此相邻的颜色。</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Analogous.png">
<p>一个邻近色的调色板粒子是从红色到绿色的调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Analogous_Palette_01.png">
<p>或者是从蓝色到紫色的调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Analogous_Palette_02.png">
<p>你可以看到这些调色板上的颜色在色轮上时彼此相邻的。</p>
<p><code>互补色（Complementary）</code>:调色板的色轮上彼此相对的颜色。</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Complementary.png">
<p>正如你所看到的，这个例子中，中心颜色作为基础，左边的颜色与右边的颜色是互补的：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Complementary_Palette_01.png">
<p><code>单色（Monochromatic）</code>单一的颜色或色调深浅不同。 </p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Monochromatic.png">
<p>例如采取这种单色的绿色调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Monochromatic_Palette_01.png">
<p>或者这种单色的蓝色调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Monochromatic_Palette_02.png">
<p>在每个调色板中的颜色保持不变，而亮度下降。</p>
<p><code>自定义色（Custom）</code>: 作为游戏作品中的首选，它们可以是任何颜色，但受限于特定的色调和色彩:那是占据在色轮上的一环。</p>
<p>乍一看，下面的调色板似乎是完全随机的颜色：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Custom_Palette_01.png">
<p>事实上，这些颜色没有特别的联系，但注意到每一个的亮度和饱和度是相同的-它们都来自于颜色轮的中间环。</p>
<h3 id="基于主题的颜色方案">基于主题的颜色方案</h3><p>很显然，针对每一个游戏主题不是所有的颜色方案都会在视觉上都有吸引力，一个颜色方案应该被用来加强你想传达的情绪。</p>
<p>恐怖电影：最可怕的场景都发生在暗环境下或夜晚，那是因为黑暗的颜色传达了一种不安的感觉。因此，如果你要做一个恐怖游戏，你可能不会选择暖色粉红色作为游戏的主导颜色，你最有可能选择一个单色或自定义调色板组成的深色。</p>
<p>[LIMBO]<a href="http://limbogame.org/" target="_blank" rel="external">http://limbogame.org/</a>是一个让难以置信的全灰色的调色板的游戏。来看一下它是如何给游戏一种怪异的感觉：</p>

<p>在你制作自己的调色板之前，你要看一看你的游戏主题以及媒体资源的一些形式，你经常会发现某些颜色主题会非常适合，有些则不是，让你最奢侈的选择的颜色出现在它们最需要的地方。</p>
<h3 id="创造完美的调色板的秘密">创造完美的调色板的秘密</h3><p>如果我告诉你有一个方法每一次你创建的调色板都能完美的匹配颜色，你会相信吗？我希望你能按照这个方法做，因为我不想下一步让你看起来像巫术。</p>
<p>计算机上所有的颜色都可由三个数字来定义：色调(hue)、饱和度(saturation)、亮度(brightness)，这很重要,因为它们让我们看到了颜色之间的模式和关系，让我们用头脑来理解下每一个值的意义吧。</p>
<p><code>色调(hue)</code>:定义了颜色的实际色调。例如，将红色色调(hue)设置为0，不管你设置的饱和度和亮度。如果你改变了色调(hue)为120，那颜色将改变为绿色，如果你改变到240，颜色将变为蓝色。</p>
<p>如果我们采用了这些颜色，并设置<code>饱和度(saturation)</code>为50，看起来你好像得到了一种不同的颜色，但实际上那只会影响颜色的强度，即颜色的鲜艳度，减少饱和度(saturation)会使颜色看起来不干净。</p>
<p><code>亮度(brightness)</code>是颜色的民安，如果我们减少了颜色亮度，我们会得到相同颜色的暗色调，</p>
<p>要创建一个杰出的调色板，你需要遵循这个原则：</p>
<pre><code>IF hues <span class="operator"><span class="keyword">do</span> <span class="keyword">not</span> equal <span class="keyword">each</span> other
<span class="keyword">THEN</span> <span class="keyword">set</span> saturations <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other
<span class="keyword">AND</span> <span class="keyword">set</span> brightnesses <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other

<span class="keyword">ELSE</span> <span class="keyword">IF</span> saturations <span class="keyword">do</span> <span class="keyword">not</span> equal <span class="keyword">each</span> other
<span class="keyword">THEN</span> <span class="keyword">set</span> hues <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other
<span class="keyword">AND</span> <span class="keyword">set</span> brightnesses <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other

<span class="keyword">ELSE</span> <span class="keyword">IF</span> brightnesses <span class="keyword">do</span> <span class="keyword">not</span> equal <span class="keyword">each</span> other
<span class="keyword">THEN</span> <span class="keyword">set</span> hues <span class="keyword">to</span> equal <span class="keyword">each</span> other
<span class="keyword">AND</span> <span class="keyword">set</span> saturations <span class="keyword">to</span> equal <span class="keyword">each</span> other</span>
</code></pre><h3 id="但是游戏有很多不同的颜色">但是游戏有很多不同的颜色</h3><p>如果你严格的遵循了上边的规则，你将创造出一个惊人的调色板，但如果你尝试使用调色板，你很有可能最终得到一个扁平的游戏。</p>
<p>那是因为你为每个颜色只配备了单一的颜色，不要担心，我们可以很容易的添加更多行到我们的调色板！所以你必须做的改变是无论是饱和度或者亮度做一个特定的间隔。</p>
<p>这个巨大的调色板中，每一列色调值增加了40，每行亮度值减少了10:</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Final_Palette_01.png">
<pre><code>小提示: 如果你正在使用该调色板对象，则只使用同一行或者列的颜色作为主颜色使用。
</code></pre><h3 id="结论">结论</h3><p>谢谢你花时间读了这篇关于调色板的文章。如果你想了解更多关于颜色对比关系HSB(色调、饱和度、亮度),或者看一些其他配色方案的话(triadic, tetrads, warm/cool)。请随时留下一个评论或问题。</p>
<p><code>本文版权归原作者[Tyler Seitz](http://tutsplus.com/authors/tyler-seitz)所有，欢迎转载，但必须保留此段声明，且在文章页面明显位置给出原文连接.</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174">http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174</a></p>
<p>在这个教程中我们一起学习什么是调色板，介绍一些选取颜色的工具，以及。为我们的游戏选取一个完美配色方案的秘密</p>
<h3 id="调色板介绍">调色板介绍</h3><p>调色板这个术语在许多不同设计行业中被广泛使用，它的确切定义和解释在不同行业中也有着不同的变化，对于游戏设计而言，我们可以简单的把他当作一组按特定规则预先定义好的颜色集合。</p>
<p>传统调色板通常被认为由一个五种颜色组成的方案，但这更多的是颜色指导方案而不是一个规则。调色板被可以被认为是一个我们预先定义好的规则可以包含任意数量的颜色。</p>
<p>在我们深入探讨之前，可以考虑下你是否想创建自己的调色板或者在网上找一个现成的方案。不管怎样，这里会有很多工具可以帮助你！</p>
<h3 id="通过工具挑选调色板">通过工具挑选调色板</h3><p>调色板可以在几乎每一个颜色选取器的程序中被创建，但有那么多杰出的网站可以把工作做的更好，为什么要使用微软的画图板呢。</p>]]>
    
    </summary>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="美术" scheme="http://tinyflare.com/tags/%E7%BE%8E%E6%9C%AF/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用cocos2dx3.6打造体素游戏]]></title>
    <link href="http://tinyflare.com/2015/09/13/cocos2dxvoxel/"/>
    <id>http://tinyflare.com/2015/09/13/cocos2dxvoxel/</id>
    <published>2015-09-13T01:40:56.000Z</published>
    <updated>2016-03-06T13:14:43.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是体素游戏">什么是体素游戏</h3><ul>
<li>最大名鼎鼎的当然是《Minecraft》(《我的世界》), 虽然最常冠以沙盒游戏的的分类，但整个世界、角色等都是采用立方体体素打造的，我们也将其分类在体素游戏之内，Voxel(体素)是voluempixel的缩写，是指构成由立体渲染对象构成世界的最小单位。体素不光是单指立方体，也包括各种其他几何体，比如：球体、圆柱体、甚至是复杂几何体的迭代形式。如下图场景就是分别用球体与圆柱体打造：</li>
</ul>
<img src="/2015/09/13/cocos2dxvoxel/snap0000.png"> <img src="/2015/09/13/cocos2dxvoxel/snap0001.png">
<ul>
<li><p>当然随着《Minecraft》的风靡，体素游戏发展到了更高高度，各种体素工具和体素游戏引擎也逐渐出现，虽然不是作为本文重点，但简单介绍2个体素引擎（体素工具在本文的工具篇再详细介绍）:</p>
<ol>
<li><p>VoxelFarm Engine (简称VFE): <a href="http:http://voxelfarm.com" target="_blank" rel="external">http:http://voxelfarm.com</a></p>
</li>
<li><p>Atomontage Engine    (无限细节技术): <a href="http://www.atomontage.com" target="_blank" rel="external">http://www.atomontage.com</a></p>
</li>
<li><p>Voxlap Engine(一个牛人在93年就开始开发的小引擎): <a href="http://advsys.net/ken/voxlap/voxlap05.htm" target="_blank" rel="external">http://advsys.net/ken/voxlap/voxlap05.htm</a></p>
</li>
</ol>
</li>
</ul>
<h3 id="打造一个体素游戏">打造一个体素游戏</h3><a id="more"></a>
<ul>
<li>言归正传，本文意在讲述如何用简单快捷的方式打造我们自己的体素游戏，由于手机的火爆，很多简单的游戏也在手机上取得了成功，这类游戏都有着极简的设计和明朗色块的体素，这其中比较有代表性的就是《天天过马路》了，当然也有用2D像素Isometric化模拟的体素游戏，如《cloud path》, 出于追随潮流我也开始打造了一个自己的体素游戏，先来做个广告：《Rainbow’ End》（《彩虹尽头》）28天开发完成，已经在itunes和googleplay上线，欢迎体验。</li>
</ul>
<img src="/2015/09/13/cocos2dxvoxel/xuan_android_cn.png">    
<ul>
<li><p>iTunes下载地址: <a href="https://itunes.apple.com/cn/app/rainbows-end/id1031110631" target="_blank" rel="external">https://itunes.apple.com/cn/app/rainbows-end/id1031110631</a></p>
</li>
<li><p>GooglePlay下载地址: <a href="https://play.google.com/store/apps/details?id=com.wanax.mazejump" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wanax.mazejump</a></p>
</li>
</ul>
<h3 id="本文也是针对这款游戏从工具、引擎、表现方面给大家来讲述：">本文也是针对这款游戏从工具、引擎、表现方面给大家来讲述：</h3><h4 id="工具篇">工具篇</h4><ul>
<li><p>制作体素的工具有很多，当然也可以用3dmax,maya等传统建模工具制作，但不符合快速开发的原则，所以为了在一个月内开发完成，只能花时间去寻找更多的工具。</p>
<ol>
<li><p>Painter3D <a href="http://www.paint3d.net/" target="_blank" rel="external">http://www.paint3d.net/</a></p>
</li>
<li><p>Sproxel <a href="http://sproxel.blogspot.com.br/" target="_blank" rel="external">http://sproxel.blogspot.com.br/</a></p>
</li>
<li><p>Qubicle Constructor <a href="http://www.minddesk.com/qubicle_constructor.php" target="_blank" rel="external">http://www.minddesk.com/qubicle_constructor.php</a></p>
</li>
<li><p>VoxelShop <a href="https://blackflux.com/index.php" target="_blank" rel="external">https://blackflux.com/index.php</a></p>
</li>
<li><p>Qblock (在线制作,可以看到其他玩友上传的作品来寻找灵感) <a href="http://kyucon.com/qblock/" target="_blank" rel="external">http://kyucon.com/qblock/</a></p>
</li>
<li><p>MagicaVoxel Editor (<code>本文使用，重点推荐</code>) <a href="https://voxel.codeplex.com/" target="_blank" rel="external">https://voxel.codeplex.com/</a></p>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本文采用 MagicalVolex Editor 0.93 进行开发 （目前版本0.96.3）</span><br><span class="line">注意：0.93更早的版本没有对相同体素导出时进行顶点优化，会导致游戏中顶点数偏高，游戏性能下降。</span><br><span class="line">MagicalVolex Editor工具使用教程本文不讲，可参考网站提供的教学视频学习。</span><br></pre></td></tr></table></figure>
<img src="/2015/09/13/cocos2dxvoxel/voxel1.png">
<ul>
<li>将通过MagicalVolex Editor建好的体素模型通过export导出选项中的obj导出，再通过3dMax或(Blender3D, Cinema4D, Maya)等传统建模工具的任何一种将obj文件导出成fbx文件备用。（当然本身一些引擎是支持obj文件格式的，包括cocos2dx，之所以转换下是为了使用cocos2dx下的模型的c3b或c3t格式，考虑以后引擎升级可能的模型优化）。</li>
</ul>
<h4 id="引擎篇">引擎篇</h4><ul>
<li><p>U3D + MagicaVoxel Editor是可以非常简单的进行使用开发的，本文不做赘述，由于正版U3D发行问题和作者本身也想测试下cocos2dx 3D部分的性能，所以选择了cocos2dx 3.6版本进行。</p>
</li>
<li><p>首先是模型转化，将fbx文件通过cocos2dx提供的工具fbx-conv进行转化，生成c3b模型文件和纹理文件（注意：这里可以对文件进行优化，可以让游戏中所有使用的模型在MagicalVolex Editor下使用相同的调色版，这样导出的索引色是相同的，这就意味着所有模型可以公用一张纹理文件，可以大大减少io读取时间和显存使用。）</p>
</li>
<li><p>然后初始化3D场景，包括创建天空盒，创建3D摄像机，创建天光，给场景添加灯光，是为了弥补体素对象色彩单一导致的显示比较平的问题，添加灯光来区别体素不同面的间隔，相关代码如下：</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建摄像机</span></span><br><span class="line">m_pMainCamera = Camera::createPerspective(<span class="number">45</span>, size.width/size.height, <span class="number">1</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">if</span>(!m_pMainCamera)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Vec3 camPos = Vec3(<span class="number">0</span>,<span class="number">150.0f</span>*cosf(M_PI/<span class="number">2.8f</span>),<span class="number">150.0f</span>*sinf(M_PI/<span class="number">2.8f</span>));</span><br><span class="line">Vec3 lookAt = Vec3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">m_pMainCamera-&gt;setPosition3D(camPos);</span><br><span class="line">m_pMainCamera-&gt;lookAt(lookAt);</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(m_pMainCamera);</span><br><span class="line">m_pMainCamera-&gt;setCameraFlag(CameraFlag::USER1);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建天空盒子</span></span><br><span class="line">Skybox* skyBox = Skybox::create(<span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>);</span><br><span class="line"><span class="keyword">if</span>(!skyBox)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">skyBox-&gt;setScale(<span class="number">1000</span>);    <span class="comment">///注意大于创建摄像机的最远面</span></span><br><span class="line">skyBox-&gt;setCameraMask((<span class="keyword">unsigned</span> <span class="keyword">short</span>)CameraFlag::USER1);   <span class="comment">///设置只能被创建的摄像机看到</span></span><br><span class="line">skyBox-&gt;setGlobalZOrder(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(skyBox);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建环境光</span></span><br><span class="line">AmbientLight* ambientLight = AmbientLight::create(Color3B(<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(ambientLight);</span><br><span class="line"><span class="comment">//设置天光</span></span><br><span class="line">DirectionLight* directionLight = DirectionLight::create(Vec3(-<span class="number">2</span>, -<span class="number">4</span>, -<span class="number">3</span>), Color3B(<span class="number">158</span>, <span class="number">158</span>, <span class="number">158</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(directionLight);</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化场景后，开始加载体素模型，为了增加体素表现可以，为体素增加描边效果。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///创建无描边体素对象</span></span><br><span class="line">Sprite3D<span class="subst">*</span> spriteWithoutOutLine <span class="subst">=</span> Sprite3D<span class="tag">::create</span>(<span class="string">"bear.c3b"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="subst">!</span>spriteWithoutOutLine)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setPosition3D(Vec3(<span class="subst">-</span><span class="number">50</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setRotation3D(Vec3(<span class="number">0</span>,<span class="subst">-</span><span class="number">140</span>,<span class="number">0</span>));</span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setCameraMask((unsigned short)CameraFlag<span class="tag">::USER1</span>);</span><br><span class="line"></span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setForceDepthWrite(<span class="literal">true</span>); <span class="comment">///设置强制3D对象进行深度检测，如果场景中有半透明物体的话</span></span><br><span class="line">this<span class="subst">-&gt;</span>addChild(spriteWithoutOutLine);</span><br><span class="line">    </span><br><span class="line"><span class="comment">///创建有描边体素对象</span></span><br><span class="line">EffectSprite3D<span class="subst">*</span> spriteWitOutLine <span class="subst">=</span> EffectSprite3D<span class="tag">::create</span>(<span class="string">"girl1.c3b"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="subst">!</span>spriteWitOutLine)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>setPosition3D(Vec3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>setRotation3D(Vec3(<span class="number">0</span>,<span class="subst">-</span><span class="number">150</span>,<span class="number">0</span>));</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>setCameraMask((unsigned short)CameraFlag<span class="tag">::USER1</span>);</span><br><span class="line">    </span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setForceDepthWrite(<span class="literal">true</span>); <span class="comment">///设置强制3D对象进行深度检测，如果场景中有半透明物体的话</span></span><br><span class="line">this<span class="subst">-&gt;</span>addChild(spriteWitOutLine);</span><br><span class="line">    </span><br><span class="line">OutlineEffect3D<span class="subst">*</span> outline <span class="subst">=</span> OutlineEffect3D<span class="tag">::create</span>();</span><br><span class="line">outline<span class="subst">-&gt;</span>setOutlineColor(Vec3(<span class="number">0.3</span>f, <span class="number">0.3</span>f, <span class="number">0.3</span>f));</span><br><span class="line">outline<span class="subst">-&gt;</span>setOutlineWidth(<span class="number">0.03</span>f);</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>addEffect(outline, <span class="number">3</span>); <span class="comment">///设置外描边</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在cocos2dx3.6中添加了针对particle3D的支持，既然做3D游戏，粒子效果也是必不可少的，遗憾的是3.6中粒子部分还有相关bug和资源路径读取相对写死的情况，所以本文例子针对paritcle3D部分对引擎做了相关改动，具体可见引擎源码部分打入的lwwhb标记查看。3D粒子对象创建相关代码如下:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> HelloWorld::spawnExplosion(<span class="keyword">const</span> cocos2d::Vec3&amp; pos)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> explosion = PUParticleSystem3D::create(<span class="string">"explosionSystem.pu"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!explosion)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    explosion-&gt;setCameraMask((<span class="keyword">unsigned</span> <span class="keyword">short</span>)CameraFlag::USER1);</span><br><span class="line">    explosion-&gt;setPosition3D(pos);</span><br><span class="line">    explosion-&gt;setScale(<span class="number">2.0f</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(explosion);</span><br><span class="line">    explosion-&gt;startParticleSystem();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>彩虹对象采用了ParitcleUniverse的条带系统实现，对象的定义和实现如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> RibbonTrail : <span class="keyword">public</span> cocos2d::Node, <span class="keyword">public</span> cocos2d::BlendProtocol</span><br><span class="line">&#123;</span><br><span class="line">    RibbonTrail();</span><br><span class="line">    <span class="keyword">virtual</span> ~RibbonTrail();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> RibbonTrail* create(<span class="keyword">const</span> std::<span class="built_in">string</span> &amp;textureFile, <span class="keyword">float</span> width, <span class="keyword">float</span> length);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">initWithFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;path, <span class="keyword">float</span> width, <span class="keyword">float</span> length)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> delta)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(cocos2d::Renderer* renderer, <span class="keyword">const</span> cocos2d::Mat4&amp; transform, <span class="keyword">uint32_t</span> flags)</span> override</span>;</span><br><span class="line">    <span class="comment">// overrides</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setBlendFunc</span><span class="params">(<span class="keyword">const</span> cocos2d::BlendFunc &amp;blendFunc)</span> override</span>;</span><br><span class="line">    <span class="keyword">virtual</span> <span class="keyword">const</span> cocos2d::BlendFunc &amp;getBlendFunc() <span class="keyword">const</span> override;</span><br><span class="line">    cocos2d::PURibbonTrail* getTrail() <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_pTrail; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    cocos2d::PURibbonTrail*             m_pTrail;</span><br><span class="line">    cocos2d::BlendFunc                  m_BlendFunc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RibbonTrail* RibbonTrail::create(<span class="keyword">const</span> std::<span class="built_in">string</span> &amp;textureFile, <span class="keyword">float</span> width, <span class="keyword">float</span> length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (textureFile.length() &lt; <span class="number">4</span>)</span><br><span class="line">        CCASSERT(<span class="keyword">false</span>, <span class="string">"invalid filename for texture file"</span>);</span><br><span class="line">    <span class="keyword">auto</span> ribbonTrail = <span class="keyword">new</span> (std::nothrow) RibbonTrail();</span><br><span class="line">    <span class="keyword">if</span> (ribbonTrail &amp;&amp; ribbonTrail-&gt;initWithFile(textureFile, width, length))</span><br><span class="line">    &#123;</span><br><span class="line">        ribbonTrail-&gt;autorelease();</span><br><span class="line">        <span class="keyword">return</span> ribbonTrail;</span><br><span class="line">    &#125;</span><br><span class="line">    CC_SAFE_DELETE(ribbonTrail);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">nullptr</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">RibbonTrail::RibbonTrail()</span><br><span class="line">:m_pTrail(<span class="keyword">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_BlendFunc = &#123;GL_SRC_ALPHA , GL_ONE&#125;;</span><br><span class="line">&#125;</span><br><span class="line">RibbonTrail::~RibbonTrail()</span><br><span class="line">&#123;</span><br><span class="line">    m_pTrail = <span class="keyword">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> RibbonTrail::initWithFile(<span class="keyword">const</span> std::<span class="built_in">string</span> &amp;path, <span class="keyword">float</span> width, <span class="keyword">float</span> length )</span><br><span class="line">&#123;</span><br><span class="line">    m_pTrail = <span class="keyword">new</span> (std::nothrow) PURibbonTrail(<span class="string">"RibbonTrail"</span>, path);</span><br><span class="line">    <span class="keyword">if</span>(m_pTrail)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pTrail-&gt;setNumberOfChains(<span class="number">1</span>);</span><br><span class="line">        m_pTrail-&gt;setMaxChainElements(<span class="number">100</span>);</span><br><span class="line">        m_pTrail-&gt;setTrailLength(length);</span><br><span class="line">        m_pTrail-&gt;setUseVertexColours(<span class="keyword">true</span>);</span><br><span class="line">        m_pTrail-&gt;setInitialColour(<span class="number">0</span>, Vec4(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="comment">//m_pTrail-&gt;setColourChange(0, Vec4(0.8, 0.8, 0.8, 0.8));</span></span><br><span class="line">        m_pTrail-&gt;setInitialWidth(<span class="number">0</span>, width);</span><br><span class="line">        m_pTrail-&gt;setDepthTest(<span class="keyword">true</span>);</span><br><span class="line">        m_pTrail-&gt;setDepthWrite(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> RibbonTrail::update(<span class="keyword">float</span> delta)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pTrail)</span><br><span class="line">        m_pTrail-&gt;update(delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> RibbonTrail::draw(Renderer* renderer, <span class="keyword">const</span> Mat4&amp; transform, <span class="keyword">uint32_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pTrail)</span><br><span class="line">        m_pTrail-&gt;render(renderer, transform, m_BlendFunc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> BlendFunc&amp; RibbonTrail::getBlendFunc() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_BlendFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RibbonTrail::setBlendFunc(<span class="keyword">const</span> BlendFunc &amp;blendFunc)</span><br><span class="line">&#123;</span><br><span class="line">    m_BlendFunc = blendFunc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2015/09/13/cocos2dxvoxel/snap0003.png">
<ul>
<li>相关粒子全部代码下载：<a href="https://github.com/lwwhb/cocos2dx3.6_voxel_tutorial" target="_blank" rel="external">https://github.com/lwwhb/cocos2dx3.6_voxel_tutorial</a></li>
</ul>
<h4 id="后记">后记</h4><ul>
<li>以目前cocos2dx3.6版本提供的3D部分封装，是可以完全满足一个简单3D游戏的需求，而且包体相对U3D实现要小得多，但引擎部分仍然有很多地方需要加强，比如材质系统，没有材质系统的渲染，只能针对每个对象手动设置shader实现。另外cocos2dx中针对Sprite3D的合批操作也没有办法实现，需要修改引擎或采用模型的instancing来去进行速度优化。但总体来说的性能一个简单的体素游戏cocos2dx是可以应付的，大家可以放心使用。</li>
</ul>
<p><code>本文版权归tinyflare.com所有，欢迎转载，但必须保留此段声明，且在文章页面明显位置给出原文连接.</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是体素游戏">什么是体素游戏</h3><ul>
<li>最大名鼎鼎的当然是《Minecraft》(《我的世界》), 虽然最常冠以沙盒游戏的的分类，但整个世界、角色等都是采用立方体体素打造的，我们也将其分类在体素游戏之内，Voxel(体素)是voluempixel的缩写，是指构成由立体渲染对象构成世界的最小单位。体素不光是单指立方体，也包括各种其他几何体，比如：球体、圆柱体、甚至是复杂几何体的迭代形式。如下图场景就是分别用球体与圆柱体打造：</li>
</ul>
<img src="/2015/09/13/cocos2dxvoxel/snap0000.png"> <img src="/2015/09/13/cocos2dxvoxel/snap0001.png">
<ul>
<li><p>当然随着《Minecraft》的风靡，体素游戏发展到了更高高度，各种体素工具和体素游戏引擎也逐渐出现，虽然不是作为本文重点，但简单介绍2个体素引擎（体素工具在本文的工具篇再详细介绍）:</p>
<ol>
<li><p>VoxelFarm Engine (简称VFE): <a href="http:http://voxelfarm.com">http:http://voxelfarm.com</a></p>
</li>
<li><p>Atomontage Engine    (无限细节技术): <a href="http://www.atomontage.com">http://www.atomontage.com</a></p>
</li>
<li><p>Voxlap Engine(一个牛人在93年就开始开发的小引擎): <a href="http://advsys.net/ken/voxlap/voxlap05.htm">http://advsys.net/ken/voxlap/voxlap05.htm</a></p>
</li>
</ol>
</li>
</ul>
<h3 id="打造一个体素游戏">打造一个体素游戏</h3>]]>
    
    </summary>
    
      <category term="Rainbow&#39;s End" scheme="http://tinyflare.com/tags/Rainbow-s-End/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="原创分享" scheme="http://tinyflare.com/categories/%E5%8E%9F%E5%88%9B%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《彩虹尽头》上线了]]></title>
    <link href="http://tinyflare.com/2015/09/02/rainbow-avaliable/"/>
    <id>http://tinyflare.com/2015/09/02/rainbow-avaliable/</id>
    <published>2015-09-02T07:01:01.000Z</published>
    <updated>2015-09-02T08:05:42.000Z</updated>
    <content type="html"><![CDATA[<h4 id="28天开发完成，iTunes与GooglePlay_齐上线～～～">28天开发完成，iTunes与GooglePlay 齐上线～～～</h4><img src="/2015/09/02/rainbow-avaliable/xuan_android_cn.png">
<p>iTunes下载地址:<br>英文: <a href="https://itunes.apple.com/us/app/rainbows-end/id1031110631" target="_blank" rel="external">https://itunes.apple.com/us/app/rainbows-end/id1031110631</a><br>中文: <a href="https://itunes.apple.com/cn/app/rainbows-end/id1031110631" target="_blank" rel="external">https://itunes.apple.com/cn/app/rainbows-end/id1031110631</a></p>
<p>GooglePlay下载地址: <a href="https://play.google.com/store/apps/details?id=com.wanax.mazejump" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wanax.mazejump</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="28天开发完成，iTunes与GooglePlay_齐上线～～～">28天开发完成，iTunes与GooglePlay 齐上线～～～</h4><img src="/2015/09/02/rainbow-avaliable/xuan_android_cn.png">]]>
    </summary>
    
      <category term="Rainbow&#39;s End" scheme="http://tinyflare.com/tags/Rainbow-s-End/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[北京夕阳]]></title>
    <link href="http://tinyflare.com/2015/08/03/beijingfengjing/"/>
    <id>http://tinyflare.com/2015/08/03/beijingfengjing/</id>
    <published>2015-08-03T12:02:43.000Z</published>
    <updated>2016-03-06T13:14:28.000Z</updated>
    <content type="html"><![CDATA[<h4 id="北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～">北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～</h4><img src="/2015/08/03/beijingfengjing/1.jpg"> 
<a id="more"></a>
<img src="/2015/08/03/beijingfengjing/2.jpg"> <img src="/2015/08/03/beijingfengjing/3.jpg">]]></content>
    <summary type="html">
    <![CDATA[<h4 id="北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～">北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～</h4><img src="/2015/08/03/beijingfengjing/1.jpg">]]>
    
    </summary>
    
      <category term="北京" scheme="http://tinyflare.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="夕阳" scheme="http://tinyflare.com/tags/%E5%A4%95%E9%98%B3/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迈向独立开发的第一步]]></title>
    <link href="http://tinyflare.com/2015/08/02/barrage-space/"/>
    <id>http://tinyflare.com/2015/08/02/barrage-space/</id>
    <published>2015-08-02T13:40:28.000Z</published>
    <updated>2016-03-06T13:14:15.000Z</updated>
    <content type="html"><![CDATA[<p>最近为了熟悉cocos2d-x引擎，做了个练手的弹幕游戏，向《Space Wars》《几何战争》致敬，ios已经上线了, 欢迎体验</p>
<p>itunes下载地址：<a href="https://itunes.apple.com/us/app/barrage-space/id995591428?l=zh&amp;ls=1&amp;mt=8" target="_blank" rel="external">https://itunes.apple.com/us/app/barrage-space/id995591428?l=zh&amp;ls=1&amp;mt=8</a> </p>
<h3 id="玩法比较简单：">玩法比较简单：</h3><h4 id="1-左手操控飞行器飞行方向，右手操控涉及方向，">1.左手操控飞行器飞行方向，右手操控涉及方向，</h4><h4 id="2-游戏中会出现10种敌人：">2.游戏中会出现10种敌人：</h4><p><strong>白色圆形</strong>: 以低速追踪撞击玩家飞行器</p>
<p><strong>彩色圆形</strong>: 以较高速追踪撞击玩家飞行器，被击毁后会分裂出6个白色圆形敌人</p>
<p><strong>黄色三角形</strong>: 会以高速追踪撞击玩家飞行器，每间隔一段时间会向玩家发起短距离冲锋。</p>
<p><strong>彩色三角形</strong>: 会以超高速追踪撞击玩家飞行器，每间隔一段时间会向玩家发起超远距离冲锋，非常危险。</p>
<p><strong>绿色菱形</strong>: 会灵活躲避玩家飞行器，并不时的朝玩家发射子弹。</p>
<p><strong>彩色菱形</strong>: 会灵活躲避玩家飞行器，并不时的朝玩家发射5个方向多重射击</p>
<p><strong>蓝色五角星</strong>:会追踪撞击玩家飞行器，并不时的向五个角的方向发射连续弹幕</p>
<p><strong>彩色五角星</strong>:会追踪撞击玩家飞行器，并向周围随机发射大量弹幕，要躲避这些子弹有点难度</p>
<p><strong>红色六边形</strong>:会任意在空间中制造激光带，撞上玩家就挂了</p>
<p><strong>彩色六边形</strong>:会在空间中制造黑洞，一旦玩家飞行器靠近，就会被吸进去。</p>
<a id="more"></a>
<h4 id="3-游戏中还会出现五种辅助道具，帮助玩家生存">3.游戏中还会出现五种辅助道具，帮助玩家生存</h4><p><strong>紫色闪电</strong>: 加快飞行器射击速度</p>
<p><strong>绿色五角星</strong>: 会使玩家飞行器拥有同时向三个方向射击的能力</p>
<p><strong>黄色花环</strong>: 会让玩家飞行器处于无敌状态</p>
<p><strong>蓝色表盘</strong>: 会使空间时间静止，但玩家飞行器不受影响 </p>
<p><strong>橘色核弹</strong>: 会在玩家飞行器周围产生爆炸弹幕，帮助玩家清除敌人</p>
<h4 id="4-_另外通过收集星辰可以升级飞行器三种能力，分别是：星辰掉落概率，道具掉落概率和增加道具效果时间">4. 另外通过收集星辰可以升级飞行器三种能力，分别是：星辰掉落概率，道具掉落概率和增加道具效果时间</h4><h3 id="截图">截图</h3><img src="/2015/08/02/barrage-space/0.png"> <img src="/2015/08/02/barrage-space/1.png"> <img src="/2015/08/02/barrage-space/2.png"> <img src="/2015/08/02/barrage-space/3.png"> <img src="/2015/08/02/barrage-space/4.png">
]]></content>
    <summary type="html">
    <![CDATA[<p>最近为了熟悉cocos2d-x引擎，做了个练手的弹幕游戏，向《Space Wars》《几何战争》致敬，ios已经上线了, 欢迎体验</p>
<p>itunes下载地址：<a href="https://itunes.apple.com/us/app/barrage-space/id995591428?l=zh&amp;ls=1&amp;mt=8">https://itunes.apple.com/us/app/barrage-space/id995591428?l=zh&amp;ls=1&amp;mt=8</a> </p>
<h3 id="玩法比较简单：">玩法比较简单：</h3><h4 id="1-左手操控飞行器飞行方向，右手操控涉及方向，">1.左手操控飞行器飞行方向，右手操控涉及方向，</h4><h4 id="2-游戏中会出现10种敌人：">2.游戏中会出现10种敌人：</h4><p><strong>白色圆形</strong>: 以低速追踪撞击玩家飞行器</p>
<p><strong>彩色圆形</strong>: 以较高速追踪撞击玩家飞行器，被击毁后会分裂出6个白色圆形敌人</p>
<p><strong>黄色三角形</strong>: 会以高速追踪撞击玩家飞行器，每间隔一段时间会向玩家发起短距离冲锋。</p>
<p><strong>彩色三角形</strong>: 会以超高速追踪撞击玩家飞行器，每间隔一段时间会向玩家发起超远距离冲锋，非常危险。</p>
<p><strong>绿色菱形</strong>: 会灵活躲避玩家飞行器，并不时的朝玩家发射子弹。</p>
<p><strong>彩色菱形</strong>: 会灵活躲避玩家飞行器，并不时的朝玩家发射5个方向多重射击</p>
<p><strong>蓝色五角星</strong>:会追踪撞击玩家飞行器，并不时的向五个角的方向发射连续弹幕</p>
<p><strong>彩色五角星</strong>:会追踪撞击玩家飞行器，并向周围随机发射大量弹幕，要躲避这些子弹有点难度</p>
<p><strong>红色六边形</strong>:会任意在空间中制造激光带，撞上玩家就挂了</p>
<p><strong>彩色六边形</strong>:会在空间中制造黑洞，一旦玩家飞行器靠近，就会被吸进去。</p>]]>
    
    </summary>
    
      <category term="BarrageSpace" scheme="http://tinyflare.com/tags/BarrageSpace/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IndieAce GameJam 2015]]></title>
    <link href="http://tinyflare.com/2015/07/19/IndieAce-gamejame-201r5/"/>
    <id>http://tinyflare.com/2015/07/19/IndieAce-gamejame-201r5/</id>
    <published>2015-07-19T01:45:01.000Z</published>
    <updated>2016-03-06T13:15:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://img.youxiguancha.com/news/mater_3_bc0e6c5e03e5830b218b5f8abd6851f9.jpg" alt="gamejam2015 icon" title="gamejam2015"></p>
<p><em>**</em>上周和2个小伙伴一起参加了GameJam比赛，毕竟要走独立开发这条难走的路，也算去感受了一次gamejam的氛围。总体来说感觉还不错，当有一个目标的时候，效率出奇的高，不包括睡觉用了26个小时完成了这个项目，这次比三的题目是：</p>
<img src="/2015/07/19/IndieAce-gamejame-201r5/title.png">
<a id="more"></a>
<p><em>**</em>题目很开放，第一感觉和大家一样都是这不是OOXX那个九宫格么，肯定不能这么low了，想到之前在职做商业游戏时的各种压抑突然觉得这就是个没有色彩，禁锢生活和创意牢笼，跳出牢笼这也是我辞职走独立开发想法的来源，于是破除牢笼，追寻色彩之旅来了。</p>
<img src="/2015/07/19/IndieAce-gamejame-201r5/1.png"> <img src="/2015/07/19/IndieAce-gamejame-201r5/2.png">
<img src="/2015/07/19/IndieAce-gamejame-201r5/3.png"> <img src="/2015/07/19/IndieAce-gamejame-201r5/4.png">
<img src="/2015/07/19/IndieAce-gamejame-201r5/5.jpg"> <img src="/2015/07/19/IndieAce-gamejame-201r5/6.jpg">
<h6 id="附上下载地址">附上下载地址</h6><p><a href="http://gamejam.indieace.com/Game.aspx?gamejam_id=2&amp;game_id=253" target="_blank" rel="external">http://gamejam.indieace.com/Game.aspx?gamejam_id=2&amp;game_id=253</a> </p>
<p>**注意android版本有无音乐的bug，建议下载源码自己编译mac版本</p>
<h6 id="github下载地址：">github下载地址：</h6><p><a href="https://github.com/lwwhb/GameJam.git" target="_blank" rel="external">https://github.com/lwwhb/GameJam.git</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://img.youxiguancha.com/news/mater_3_bc0e6c5e03e5830b218b5f8abd6851f9.jpg" alt="gamejam2015 icon" title="gamejam2015"></p>
<p><em>**</em>上周和2个小伙伴一起参加了GameJam比赛，毕竟要走独立开发这条难走的路，也算去感受了一次gamejam的氛围。总体来说感觉还不错，当有一个目标的时候，效率出奇的高，不包括睡觉用了26个小时完成了这个项目，这次比三的题目是：</p>
<img src="/2015/07/19/IndieAce-gamejame-201r5/title.png">]]>
    
    </summary>
    
      <category term="gamejam" scheme="http://tinyflare.com/tags/gamejam/"/>
    
      <category term="感悟" scheme="http://tinyflare.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的起点]]></title>
    <link href="http://tinyflare.com/2015/07/18/new_start_point/"/>
    <id>http://tinyflare.com/2015/07/18/new_start_point/</id>
    <published>2015-07-18T07:51:27.000Z</published>
    <updated>2015-07-19T02:04:31.000Z</updated>
    <content type="html"><![CDATA[<img src="/2015/07/18/new_start_point/logo.png">
<h5 id="今天开始独立游戏之旅，上路，加油～">今天开始独立游戏之旅，上路，加油～</h5>]]></content>
    <summary type="html">
    <![CDATA[<img src="/2015/07/18/new_start_point/logo.png">
<h5 id="今天开始独立游戏之旅，上路，加油～">今天开始独立游戏之旅，上路，加油～</h5>]]>
    </summary>
    
      <category term="感悟" scheme="http://tinyflare.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>