<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[TinyFlare]]></title>
  <subtitle><![CDATA[用心生活，开心做游戏]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tinyflare.com/"/>
  <updated>2015-11-21T15:12:01.000Z</updated>
  <id>http://tinyflare.com/</id>
  
  <author>
    <name><![CDATA[Irenicus]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[《攀登梅鲁峰》]]></title>
    <link href="http://tinyflare.com/2015/11/21/meru/"/>
    <id>http://tinyflare.com/2015/11/21/meru/</id>
    <published>2015-11-21T14:58:41.000Z</published>
    <updated>2015-11-21T15:12:01.000Z</updated>
    <content type="html"><![CDATA[<p>一部非常棒的纪录片《攀登梅鲁峰》，看完后所有困难都感觉不是事了, 满满的正能量。前些日子看了《绝命海拔》，两者比较，后者真真正正震撼人心，强烈推荐！</p>
<img src="/2015/11/21/meru/7e274088fbfdf6b60f50bab161bbbabd.jpg">
<img src="/2015/11/21/meru/22d660937649c03c8f3147eb63d92026.jpg">
<p>中间插曲和片尾曲都非常天籁，纯净</p>
<p><a href="https://soundcloud.com/andraday/the-light-that-never-fails" target="_blank" rel="external">片尾曲: The Light That Never Fails</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一部非常棒的纪录片《攀登梅鲁峰》，看完后所有困难都感觉不是事了, 满满的正能量。前些日子看了《绝命海拔》，两者比较，后者真真正正震撼人心，强烈推荐！</p>
<img src="/2015/11/21/meru/7e274088fbfdf6b60f50bab161bbbab]]>
    </summary>
    
      <category term="电影" scheme="http://tinyflare.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序化地牢生成算法]]></title>
    <link href="http://tinyflare.com/2015/11/14/DungeonGenerationAlgorithm/"/>
    <id>http://tinyflare.com/2015/11/14/DungeonGenerationAlgorithm/</id>
    <published>2015-11-14T13:56:18.000Z</published>
    <updated>2015-11-15T06:18:52.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php" target="_blank" rel="external">http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php</a></p>
<p>这篇文章阐述了一个生成随机地牢的算法，这是由<a href="https://www.reddit.com/r/gamedev/comments/1dlwc4/procedural_dungeon_generation_algorithm_explained/" target="_blank" rel="external">tinykeepdev</a><a href="http://store.steampowered.com/app/278620/" target="_blank" rel="external">游戏</a>最早使用的技术。我这里会比原文章更详细的介绍生成步骤。算法步骤是这样工作的:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/wM30Xyl.gif">
<h4 id="生成房间">生成房间</h4><p>首先你需要在一个圆圈内随机宽高生成一些房间，我认为tinykeep使用的是正太分布的算法来生成房间大小的。这通常是一个好主意，因为你可以给定更多的参数。选择不同的宽高比例和标准差会生成式样不同的地牢。</p>
<p>你需要做的是一个这样的函数 getRandomPointInCircle:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInCircle</span>(<span class="title">radius</span>)</span></span><br><span class="line">  <span class="built_in">local</span> t = <span class="number">2</span>*math.<span class="constant">pi</span>*math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> u = math.<span class="built_in">random</span>()+math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> r = nil</span><br><span class="line">  <span class="keyword">if</span> u &gt; <span class="number">1</span> <span class="keyword">then</span> r = <span class="number">2</span>-u <span class="keyword">else</span> r = u <span class="function"><span class="keyword">end</span></span></span><br><span class="line">  <span class="constant">return</span> radius*r*math.<span class="built_in">cos</span>(t), radius*r*math.<span class="built_in">sin</span>(t)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<p>你可以从<a href="http://stackoverflow.com/questions/5837572/generate-a-random-point-within-a-circle-uniformly" target="_blank" rel="external">这里</a>获得更多的信息。接下来你需要做的的是这些：</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/9TsZluP.gif">
<p>一个你必须考虑的非常重要的事情(至少在理论上)是当你处理一个瓷片(tile)型网格,你需要保证所有东西都在相同的网格山峰。在上边gif图中每个瓷片(tile)的大小是4像素，这意味着所有房间的位置和大小都是4的倍数。要做到这样，我把位置和长宽的对齐封装到一个函数中：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roundm</span><span class="params">(n, m)</span></span> <span class="keyword">return</span> <span class="built_in">math</span>.floor(((n + m - <span class="number">1</span>)/m))*m <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Now we can change the returned value from getRandomPointInCircle to:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInCircle</span><span class="params">(radius)</span></span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> roundm(radius*r*<span class="built_in">math</span>.cos(t), tile_size), </span><br><span class="line">         roundm(radius*r*<span class="built_in">math</span>.sin(t), tile_size)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="分割房间">分割房间</h4><p>现在我们继续分割部分。这里有很多房间被堆叠到一起，它们不应该是重叠的。TKdev使用分离操作行为来进行的。但是我发现使用一个物理引擎来做这些更加简单。当你添加完所有房间后，简单添加实体物理体来匹配每个房间的位置，然后进行模拟运行，直到所有物理对象都进入sleep状态。在这个gif中我运行了物理模拟，当你对不同级别做模拟时，你可以加速物理仿真模拟速度。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/Zv2kYmv.gif">
<p>除了通过调用roundm函数设置房间位置并且保证彼此不重叠、不超出网格时，其他时候不需要绑定物理物体到tile网格上。下面这个gif中的蓝色边框体是物理物体，虽然他们和房间的位置之间会有微小误差:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/eyTNcXE.gif">
<p>当你调整房间的水平和垂直位置时，一个问题可能会出现. 组合非常水平，你可能会得到大多数的房间宽度比高度大很多。这个问题在于如何在长房间彼此接近时物理引擎如何解决他们的碰撞:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/VbvngEZ.gif">
<p>正如你所看到的，地下城变的非常高，这是不理想的。为了解决这个问题，我们可以使用一个扁的椭圆提到圆圈来生成房间。这样可以保证地牢生成后有一个合适的宽高比例:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/yMEwhwr.gif">
<p>为了在一个扁平区域内随机生成，我们使用一个椭圆(在gif中我使用了ellipse_width = 400, ellipse_height = 20)来替换”geRandomPointInCircle”函数:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPointInEllipse</span>(<span class="title">ellipse_width</span>, <span class="title">ellipse_height</span>)</span></span><br><span class="line">  <span class="built_in">local</span> t = <span class="number">2</span>*math.<span class="constant">pi</span>*math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> u = math.<span class="built_in">random</span>()+math.<span class="built_in">random</span>()</span><br><span class="line">  <span class="built_in">local</span> r = nil</span><br><span class="line">  <span class="keyword">if</span> u &gt; <span class="number">1</span> <span class="keyword">then</span> r = <span class="number">2</span>-u <span class="keyword">else</span> r = u <span class="function"><span class="keyword">end</span></span></span><br><span class="line">  <span class="constant">return</span> roundm(ellipse_width*r*math.<span class="built_in">cos</span>(t)/<span class="number">2</span>, tile_size), </span><br><span class="line">         roundm(ellipse_height*r*math.<span class="built_in">sin</span>(t)/<span class="number">2</span>, tile_size)</span><br><span class="line"><span class="function"><span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<h4 id="生成主房间">生成主房间</h4><p>下一步就是确定哪些房间是主房间，哪些不是. TKdev的做法非常可靠，控制宽/高比例的阀值进行挑选，下面gif中的阀值我们采用1.25乘以平均数。如果宽度平均数和高度平均数为24，则宽和高大于30的房间将被选中。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/yeqXkTe.gif">
<h4 id="Delaunay三角化剖分图">Delaunay三角化剖分图</h4><p>现在我们采用所有选定房间的中心点位种子进行Delaunay程序化。你可以自己实现这个程序化方法，也可以采用别人已经实现好的源代码。在我的例子中，我很幸运的得到了<a href="https://github.com/Yonaba/delaunay" target="_blank" rel="external">Yonaba</a>的实现。正如你从界面中看到的通过点划分的三角形:</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/BUeRTaW.gif">
<p>在你进行三角化后，你可以的到一个图。通过这个图你可以非常容易的实现一个图的数据结构。如果你已经这么做了，你可以添加房间对象的数据结构指针到图中，而不需要再拷贝他们了。</p>
<h4 id="最小生成树">最小生成树</h4><p>接下来我们要从图中生成一个最小生成树。每一个语言。的实现你都可以找到别人实现的例子</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/gc77fqU.gif">
<p>最小生成树时用来保证地牢所有主要房间都是可到达的。但不想图那样所有房间都有连接。这是很有用的，在默认情况下，我们通常不需要超级连接地牢，但我们也不想要产生到达不到的岛屿。尽管如此，我们也不希望只有一条线性路。所以我们现在所做的是为Delaunay图题添加一些返回的边。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/Spogz4z.gif">
<p>这会增加更多的路径和循环路径，这将使地牢变的更有趣。TKdev添加了%15回来的边，我发现增加%8-%10会是一个更好的值。这也取决于你想要得到的最终地牢。</p>
<h4 id="走廊">走廊</h4><p>在最后一部分，我们要添加地牢的走廊。要做到这一点，我们通过图中每一点连接到其他节点。如果节点水平位置足够接近(它们的位置y值近似)，在它们之间创建一条水平直线。如果节点垂直位置足够接近(它们的位置x值近似)，在它们之间创建一条垂直直线。如果两个节点水平和垂直位置都不接近。那么创建2条线类似一个L形状。<br>这里的足够接近的意思是计算2个节点的中心点位置，检查中心点的x,y属性是否在系诶单边界内。如果在则在两个中心点间创造一条直线，如果不在，则创造两条直线，从源点到目标点，但只有一个轴。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/iKR57gS.png">
<p>在上图中你可以看到所有情况的例子。节点在47与62之间有一条水平线，几点60到125间有一条垂直线，在节点118与119之间有一个L形状。同样重要值得注意的是哪些不适我所创造的唯一的线，我同样根据tile_size在每一边空白处绘制了额外2条线，因为我想我们的走廊宽高至少有3个tile的宽度。</p>
<p>然后开始用这些线与所有非主房间的矩形进行碰撞检测，如果有泵装，添加他们到现有结构，将他们作为走廊的骨架。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/Y7E7Egn.png">
<p>根据不同大小的房间来初始化你的地牢样式，如果你想让走廊看上去更加均匀，你需要针对一个低差分标准来选择保留某个房间或替换某个过细的房间。</p>
<p>对于最后一步，我们只需要添加tile大小的网格单元来弥补丢失的部分。注意你并不需要一个网格的数据结构，你只需要将每条线根据tile大小来在周围添加一个网格位置列表(即对应一个tile大小的单元)。这里通常是3个tile(或更多)宽度而不是一个。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/bSV1gpV.png">
<img src="/2015/11/14/DungeonGenerationAlgorithm/t4G5oRK.gif">
<p>我们完成了。</p>
<h4 id="结束语">结束语</h4><p>通过这个程序化过程我们返回的数据结构是: 一个房间列表(每个房间结构包含一个唯一ID,位置xy和宽高width,heigh);一个图,每个节点包含房间的ID和到另外相连房间的距离(多少个tile宽度);一个真实的二维网格，包含的单元可以是空的，可以是指向主房间的指针，可以是指向走廊房间的指针，或者是走廊单元格。有了这三种数据结构我们可以认为你可以得到你想要的任何数据。通过布局你可以找出那个地方可以放置门、敌人、物品或者哪个房间有boss等等。</p>
<img src="/2015/11/14/DungeonGenerationAlgorithm/GKO8EUG.gif">
]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://www.gamasutra.com/blogs/AAdonaac/20150903/252889/Procedural_Dungeon_Generation_Algorithm.php" target="_blank" rel="ex]]>
    </summary>
    
      <category term="Rougelike" scheme="http://tinyflare.com/tags/Rougelike/"/>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="程序" scheme="http://tinyflare.com/tags/%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://tinyflare.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用FamiTracker创建8位音乐]]></title>
    <link href="http://tinyflare.com/2015/10/19/FamiTracker01/"/>
    <id>http://tinyflare.com/2015/10/19/FamiTracker01/</id>
    <published>2015-10-19T05:08:23.000Z</published>
    <updated>2015-10-19T05:02:50.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music" target="_blank" rel="external">http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music</a></p>
<h4 id="开始创作Chiptune(芯片声)音乐前需要了解的工具和知识">开始创作Chiptune(芯片声)音乐前需要了解的工具和知识</h4><p>在复古视频游戏与电子媒体领域学习如何制作8位音乐是一个神奇的旅程。首先你必须理解什么是8位音乐。如果你玩过一个NES游戏机，或者你提说过它，但很少有人真正想知道如何制作8位音乐，更别说尝试。当人们在制作最早广泛被商业化的视频游戏时，他们没有我们今天创作音乐的技术。没有FL Studio,没有Garage Band(两款音乐制作软件)。在很长一段时间里，只有一个小小的，可以处理8位信息的电脑芯片控制器。所以声音工程师每天只能创作4通道声音，其中两个通道用来处理高音，一个通道用来处理低音，一个通道用来处理噪声。</p>
<p>现在我们有创造出更高质量音乐的技术，不再有设备上的限制，为什么人们还会去创作8位音乐？不管你信不信，很多游戏依然适用8位音乐，也被称为“chiptunes”(芯片音乐)，可能是对过去淳朴时光的还年，或者可能是钟爱这种音乐风格，无论什么原因，今天一些游戏依然尝试完全使用8位音乐。</p>
<p>注：本教程探讨如何成为制作8位音乐中的一员，而不是强制去学习如何使用现代的软件去制作它。如果你想为你的数字音频工作站找寻一款插件的话，我推荐 <a href="http://www.ymck.net/index.html" target="_blank" rel="external">YMCK’s Magical 8bit Plugin</a>.如果真是如此，你也应该在此界面稍作停留，你会学到很酷的东西。</p>
<h4 id="声波介绍">声波介绍</h4><p>不，我们不是要去海滩，我说的是声音通过空气产生的涟漪。了解波形的基本形式是学习如何制作8位音乐的第一步。</p>
<p>如果你已经玩过任何形式的录音软件，你可能看到过他们。他们把声音的传递用视觉表现成速度和音高。你看到的声波可能会有点复杂，现在我们讨论用计算机仿真表示，可能会更容易理解。</p>
<p>在8位音乐中有4种基本的声波类型：Sine(正弦)，Saw(锯齿),Square(正方形),和Triangle(三角形)。</p>
<p>每一种产生不同类型的声音，他们根据作曲家的意愿塑造成不同类型的效果，如颤音或延迟等。</p>
<h5 id="Sine_Waves(正弦波)">Sine Waves(正弦波)</h5><p>你可能记得在高中物理课上或大学三角函数或微积分课上见到过它们，这个波形表现为一个完美的向上或向下的过山车型曲线。正如可以预料的那样，它的音色甜美光滑，听起来像长笛。</p>
<img src="/2015/10/19/FamiTracker01/sine.jpg">
<h5 id="Saw_Waves(锯齿波)">Saw Waves(锯齿波)</h5><p>这类波形有一点硬，之所以被称为“锯齿”是因为它们看上去像锯的牙齿，急速下降，缓慢上升。这类波形非常被用在8位音乐中的计数旋律。它们也被认为认为是chiptune和音中的中音。锯齿型声波听上去有些嗡嗡嘈杂。(看图)</p>
<img src="/2015/10/19/FamiTracker01/saw.jpg">
<h5 id="Square_Waves(方形波)">Square Waves(方形波)</h5><p>这是我最喜欢的一种波形。它代表了一种正选波与锯齿波的混合波形。它也有一些嘈杂感，但同时也能保持平滑。这也是在8位音乐中最常用作主音的波形。这类声波有很好的扩展性，可以作很好的效果改变。</p>
<img src="/2015/10/19/FamiTracker01/square.jpg">
<h5 id="Triangle_Waves(三角波)">Triangle Waves(三角波)</h5><p>这类波形听上去和正选波一样平滑，它以直线的上升和下降而不是曲线。波形为三角形。这类波在音效上不起作用，因为它们不能很有效的做主音填充。它们常被用做低音使用，因为它们不用创建嗡嗡的反馈效果就能很容易的到达低音节。它们很适合在低音范围使用。</p>
<img src="/2015/10/19/FamiTracker01/triangle.jpg">
<h4 id="声波是如何被创建">声波是如何被创建</h4><div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=YsZKvLnf7wU" frameborder="0" allowfullscreen></iframe></div>
<h5 id="8位声道">8位声道</h5><p>在NES时代，由于技术的限制，任何给定时间的声音只能有4条声轨(或声道)。这意味着作曲家或NES游戏设计师的一些创意或者他们想用音乐表达的东西往往更多依赖于更强烈的旋律和颤音效果，这通畅会占用一个或2个声道。而腾出空间做其他事情。如果你去玩你最喜欢的NES游戏，你会听到每一个声道上每一个音效结束后才会有另一个音效，(像《塞尔达》低血量时或者《洛克人》射击时)为的是节省通道播放其他效果。</p>
<h5 id="声道1_-_Treble(高音)">声道1 - Treble(高音)</h5><p>要讨论的第一个声道1几乎总是用于高音旋律，它通常是方形波货锯齿波，当然正选波也可以很好的工作。这个声道应该是最注意细节的。tremolo、vibrato或delay等效果可以更明亮的表现。当你创造主旋律时更应该花费耐心和爱去对待它。它可能会是当人把游戏关掉后在接下来几天走路一直哼唱或者第一时间关掉你的游戏的主要原因。</p>
<img src="/2015/10/19/FamiTracker01/melody.jpg"> 
<p>主旋律</p>
<h5 id="声道_2_-_Mid-Range(中音)">声道 2 - Mid-Range(中音)</h5><p>这个声道通常被用来制作副旋律。我想把它当作高音声道1的中音。这一行应该简单点。这一声道的主要工作是填补通道1主音部分和通道3的低音部分，使两者之间和音更加和谐。这个声道使用正弦波或者锯齿波会是很好的选择。当然方形波也可以很好的使用。一些arpeggios和delay效果也是很好的选择。在8位音乐中arpeggios效果可以创造出快节奏的分解和弦，能够完美的填补和音。</p>
<img src="/2015/10/19/FamiTracker01/backingmelody.jpg"> 
<p>副旋律</p>
<h5 id="声道_3_-_Bass(低音)">声道 3 - Bass(低音)</h5><p>虽然我们不能使它像Dubstep一样的重击感，但我们依然能创造一个甜美的低音线来完成任何歌曲。最佳波形选择是三角波。最棒的事情是三角波和正选波很像，它能无阻碍的浸入上面的寄存器。如果你需要一个对或更多音符来创建一个紧凑丰富声音的时候，这事非常奇妙的。由于这条声线对一般游戏玩家的耳朵听起来不会像主音那么明显。低音也没过于复杂或嘈杂感。所以他很完美的满足一些切分音的音符。</p>
<img src="/2015/10/19/FamiTracker01/bass.jpg"> 
<p>低音</p>
<h5 id="声道_4_-_Noise(噪音)">声道 4 - Noise(噪音)</h5><p>当你玩最喜爱的NES游戏时，你可能已经注意到一些敲击的声音真的只是噪音。这个声道不合适我们讨论的任何一种波。但他可以使用scraping、pops、clicks或者其他噪音效果在不同的音高或音速上。你也可以对这个声道添加效果，但可以对其他声道产生影响，可能会给游戏带来意想不到的效果。</p>
<img src="/2015/10/19/FamiTracker01/noise.jpg"> 
<p>噪音</p>
<h5 id="额外声道_-_DPCM">额外声道  - DPCM</h5><p>此通道可以用来导入声音文件。但比原声音的质量会低很多，所以你不要指望你的下一个NES可以通过这种方式获得比较帅的声音。这个声道不是很经常使用，如果你特别在意如何使用它，在famitracker帮助文件中有很好的解释。点击帮助&gt;帮助主题或按F1，展开列表，在列表下边点击EPCM Editor即可。</p>
<h4 id="8位音乐制作器">8位音乐制作器</h4><p>现在你知道了芯片音轨如何工作的所有基础知识了，现在是时候开始如何自己制作了，在8位音乐制作方面FamiTracker时最好的工具之一。知道如何演奏钢琴的基础知识是一个很好的优势，因为它的设计就是让你电脑按键按照钢琴键盘一样的输入音符。但是你也不要担心，如果你不知道如何演奏也没必要去上课学习。你很快就会把这个程序学习起来的。</p>
<h5 id="音轨程序">音轨程序</h5><p>音轨最好的地方就是可以导出成NSF格式，这意味着你可以在制作一个NES音乐盒游戏中使用它们。“这个格式还在被使用么?”, 当然，如果你不信可以看看这个游戏 <a href="https://en.wikipedia.org/wiki/Battle_Kid:_Fortress_of_Peril" target="_blank" rel="external">Battle Kid</a>.</p>
<ul>
<li><p>FamiTracker是免费喝开源的。也是我个人制作芯片音轨的选择。我将用它来完成剩余的本教程</p>
</li>
<li><p>如果你不想使用FamiTracker还可以使用MilkyTracker.它也是免费和开源的。</p>
</li>
</ul>
<h5 id="其他资源">其他资源</h5><ul>
<li>如果你想为你的数字音频工作站找寻一款复古插件的话，<a href="http://www.ymck.net/index.html" target="_blank" rel="external">YMCK’s Magical 8bit Plugin</a>是相当不错的选择</li>
<li>如果你只是想快速寻找到一些8位声音音效而不是想学习上述程序，或者你只是想制作自己的芯片音乐找灵感的话，你可以可以尝试使用<a href="http://www.drpetter.se/project_sfxr.html" target="_blank" rel="external">SFXR</a>.它是免费开源的8位音乐制作软件，可以给制作复古游戏的开发者提供帮助。</li>
</ul>
<img src="/2015/10/19/FamiTracker01/famitracker.jpg"> 
<p>Famitracker</p>
<h4 id="设置FamiTracker">设置FamiTracker</h4><p>因为我选择的程序，我将向你展示它的基础知识，包括设置、输入音符以及增加效果。</p>
<p>当你第一次启动这个程序，会有一个空的曲子面板展示给你。注意不同的通道已经被设置成了不同的波形。通道1，2被设置成方形波，通道3被设置成三角波，通道4被设置成噪声波。还有一个额外的通道被设置成”DPCM”。最大的区域是模版编辑器。</p>
<p>在左上角你会发现一个一堆0的小盒子，这是模版选择器。接下来是声音设置和声音信息。你可以很简单的找到它们。</p>
<h4 id="编辑乐器">编辑乐器</h4><img src="/2015/10/19/FamiTracker01/editinganinstrument.jpg"> 
<p>编辑乐器</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=bwNElW5IEo0" frameborder="0" allowfullscreen></iframe></div>
<h4 id="创建一段旋律">创建一段旋律</h4><h5 id="制作和编辑一个新乐器">制作和编辑一个新乐器</h5><p>也许你已经写了一首歌，并且想把它变成8位音乐。如果你没有，你至少应该马上去写一段主旋律或挑选你最喜欢的NES音乐来复制。</p>
<p>一旦你想出了一个好的主旋律，那是时间去制作它了。首先，我们必须创建一个新乐器，然后编辑声音和效果。要做到这一点，点击最左边的图标，在下列行中点击左上方的黑盒子。当你这样做后会跳出一个包含“00-新乐器”黑色对话框。双击这些文字或点击同一行中最右边的图标。</p>
<p>一个包含一些选项的新对话框会出现。点击volume旁的按钮并打开它。现在点击加号一段时间后Size会出现。你现在在最大线上点击来调整乐器每一个播放音符的大小。当你点击后注意Size编辑器下边出现的数字。这将高速你每一行会有什么效果。举例，如果你有一段数字序列”10,8,6,4,2”,每当这个乐器播放一个音符。音量将会从非常响亮的10开始，并且每当下一个音符被播放会产生一个2度的下降。</p>
<p>效果往往比音量更有用，但对于旋律线比较少。使用其他效果会更自由。如果你添加了一些无意的东西，你可以随时很轻易的撤销。</p>
<h4 id="键盘按键">键盘按键</h4><img src="/2015/10/19/FamiTracker01/keyboard.jpg"> 
<p>键盘按键</p>
<h4 id="输入音符">输入音符</h4><p>现在开始为我们的新乐器添加播放音符，首先你必须按住“空格”键。这会使程序进入编辑模式。现在你可以开始演奏你的键盘，像演奏钢琴一样。上面展示了这个程序最底下像钢琴一样对应的两行按键，它和上面两行工作方式一样，但那是高八度的音节使用的。所以在任何点，你都有两个全音阶音程可以工作。你可以在任何时候从程序左上角的下拉列表选择一个八度范围改变。</p>
<p>每一个虚线被认为是16分之一拍。所以每一个高亮行代表四分之一拍。如果由于某种原因你需要三十秒的音符。只需要在每一行的值减半。这样高亮行会代表一个八拍。当你开始输入音符，用完了工作空间，只需要按住声音设置Frames下边的加号即可。</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=FNduThBHcG8" frameborder="0" allowfullscreen></iframe></div>
<h4 id="特效">特效</h4><img src="/2015/10/19/FamiTracker01/effects.jpg"> 
<p>Effects</p>
<h5 id="添加特效">添加特效</h5><p>有一些特效你可以在任何时间添加到你的乐器或者从中移除。每个数字都赋予一个数字或字母，你只需要输入双数字作为参数。首先让我们谈论一下关于音符输入的布局。</p>
<p>你会注意到在通道的每一列会有一大堆点在里面，仔细看你会发现一些点被按列组合在了一起。最左边一列一组三个点。当你点击并输入一些音符，这些点会被音符破折号或者音阶符替代。如果你输入了音符，你会发现下一列的一组两个点会被显示成00. 这些数字代表了被设置了演奏乐器的音符。如果你有多个乐器。选择一个播放这些音符。如果你想拥有不同乐器和不同效果，例如立体的arpeggios(琶音)，你都可以很容易的在乐器编辑器中编辑。</p>
<p>下一列只包含一个点。这个是音量。在这个程序中大多数都是以16进制为基础的。所以音量这个值是被定义成从0到F。如果你对16进制不熟悉的话，可以理解成为所有值都是被定义成16的倍数。随着数字的增加，直到9，后边开始以字母A开始增加，直到最高的F。</p>
<p>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)</p>
<h5 id="音量变化">音量变化</h5><p>在FamiTracker中，这是最简单和最有效的特效。在你的曲子任何一个点，你都可以改变这个音量行的值。无论这个音符是不是正在被播放。这就是我们如何去创造一个延迟的效果。如果你的被播放的音符的音量被设置成F,你可以一次下降几个度。然后定住，然后再下降。例如F,B,7,3,D,8,4,1</p>
<h5 id="其他效果">其他效果</h5><p>另外除了能改变曲子每一行的音量，你可以做很多其他效果，最后一列的是三个一组的点。再这里你能添加喝编辑任何你希望的效果。第一个点是表示什么样的效果将被应用，接下来的2个点表示不同效果下的不同参数，视情况而定。比如我们想添加Tremolo(颤音)效果。所以挑选一行并且在第一个表示效果的点上键入类型7，在这种情况下，下一个点代表速度，第三个点代表深度。如果你不知道这些意味着什么，试试用用看看他们有什么变化。</p>
<p>在我的下面例子“Chippy”中，我首先输入了777，然后是755，之后又是733，如果你也尝试这样做了，你会听到这三段的不同效果。</p>
<p>正如上边所提到的，还有许多效果你可以添加。事实上在这里讨论的话要讲很多。要查看完整的效果列表，以及输入方式，点击帮助(help)&gt;效果表(Effect Table).</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=v_eHQiB4v-c" frameborder="0" allowfullscreen></iframe></div>
<h4 id="继续制作Chiptunes!">继续制作Chiptunes!</h4><p>这里淘落的知识关于制作8位音乐的开始，在其他声道上重复上述步骤，用不了多久你就完全熟悉8位音乐制作了，你可以展示给你的朋友!</p>
<p>制药你这么做了，FamiTracker可以导出你的曲子为NSF货WAV格式，也许你以前听说过WAV,这种格式是非常合适在互联网上传播展示的。如果你真的想要正宗的8位音乐，可以保存为NSF格式。那么你只能在模拟器上或其他程序中播放了。</p>
<h5 id="例子">例子</h5><p>Chippy</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=41u_r8NCh8I" frameborder="0" allowfullscreen></iframe></div>
<p>Mega Man X - Boomer Kawanger</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=e1EVUlYtxoA" frameborder="0" allowfullscreen></iframe></div>
<p>Final Fantasy 7 - JENOVA</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=6j2dJdLwI9Q" frameborder="0" allowfullscreen></iframe></div>
<p>Journey - Don’t Stop Believing</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/https://www.youtube.com/watch?v=5VkFATXaQWE" frameborder="0" allowfullscreen></iframe></div>]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://orandze.hubpages.com/hub/How-to-Make-8-Bit-Music" target="_blank" rel="external">http://orandze.hubpages.com/hub/How-]]>
    </summary>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="音乐" scheme="http://tinyflare.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为你的游戏美术选取合适的调色板]]></title>
    <link href="http://tinyflare.com/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/"/>
    <id>http://tinyflare.com/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/</id>
    <published>2015-09-23T01:48:49.000Z</published>
    <updated>2015-09-23T04:01:27.000Z</updated>
    <content type="html"><![CDATA[<p>翻译原文<a href="http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174" target="_blank" rel="external">http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174</a></p>
<p>在这个教程中我们一起学习什么是调色板，介绍一些选取颜色的工具，以及。为我们的游戏选取一个完美配色方案的秘密</p>
<h3 id="调色板介绍">调色板介绍</h3><p>调色板这个术语在许多不同设计行业中被广泛使用，它的确切定义和解释在不同行业中也有着不同的变化，对于游戏设计而言，我们可以简单的把他当作一组按特定规则预先定义好的颜色集合。</p>
<p>传统调色板通常被认为由一个五种颜色组成的方案，但这更多的是颜色指导方案而不是一个规则。调色板被可以被认为是一个我们预先定义好的规则可以包含任意数量的颜色。</p>
<p>在我们深入探讨之前，可以考虑下你是否想创建自己的调色板或者在网上找一个现成的方案。不管怎样，这里会有很多工具可以帮助你！</p>
<h3 id="通过工具挑选调色板">通过工具挑选调色板</h3><p>调色板可以在几乎每一个颜色选取器的程序中被创建，但有那么多杰出的网站可以把工作做的更好，为什么要使用微软的画图板呢。</p>
<h5 id="Kuler">Kuler</h5><p><a href="http://kuler.adobe.com/" target="_blank" rel="external">Adobe Kuler</a> 是我最喜欢的制作调色板的工具之一，因为他是一个可以将所有操作一体化的工具。</p>

<p>并且它能够从一个你认为可以找到灵感的图片生成你自己的调色板，以及也可以分享你的调色板或者发现别人创作的调色板！这意味着它提供取之不尽的现成调色板供您选择。</p>
<p>如果你有丰富的经验的或者选招他人已经创建好的调色板的话，我推荐你使用这款工具。</p>
<h4 id="ColorScheme_Designer_3">ColorScheme Designer 3</h4><p>另外一个杰出的制作调色板的工具是<a href="http://colorschemedesigner.com/" target="_blank" rel="external">ColorScheme Designer 3</a>,他有所有标准功能，你可以期待这款工具让你的界面设计散发真正的光芒</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorSchemeDesigner.png">
<p>你可以毫不费力的使用它来创建调色板，如果你只有简单的经验就能使用的工具话，我推荐你使用它。</p>
<h4 id="Color_Blender">Color Blender</h4><p>最后一款工具，我的推荐是<a href="http://www.colorblender.com/browse" target="_blank" rel="external">Color Blender</a>,在这三款工具中，我不得不将它视为最有趣的工具。</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorBlender.png">
<p>它提供给你一个色轮和一个修正值来修改，并且它只给你三个滑块(对应RGB或HSB)来操作,和<a href="http://kuler.adobe.com/" target="_blank" rel="external">Kuler</a>一样，它也提供一个区域用来浏览别人创建的调色板。</p>
<p>如果你正在寻找一个真正帮助你创建调色板的工具，你我推荐使用这个工具。</p>
<h3 id="配色方案的常见类型">配色方案的常见类型</h3><p>当你制作游戏时有许多不同类型的颜色方案可以选择，所以本文只会覆盖到你最有可能的选择方案，它们都是给予颜色轮中的不同颜色之间的关系的：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Base.png">
<p><code>邻近色（Analogous）</code>:调色板的色轮上彼此相邻的颜色。</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Analogous.png">
<p>一个邻近色的调色板粒子是从红色到绿色的调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Analogous_Palette_01.png">
<p>或者是从蓝色到紫色的调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Analogous_Palette_02.png">
<p>你可以看到这些调色板上的颜色在色轮上时彼此相邻的。</p>
<p><code>互补色（Complementary）</code>:调色板的色轮上彼此相对的颜色。</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Complementary.png">
<p>正如你所看到的，这个例子中，中心颜色作为基础，左边的颜色与右边的颜色是互补的：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Complementary_Palette_01.png">
<p><code>单色（Monochromatic）</code>单一的颜色或色调深浅不同。 </p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/ColorWheel-Monochromatic.png">
<p>例如采取这种单色的绿色调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Monochromatic_Palette_01.png">
<p>或者这种单色的蓝色调色板：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Monochromatic_Palette_02.png">
<p>在每个调色板中的颜色保持不变，而亮度下降。</p>
<p><code>自定义色（Custom）</code>: 作为游戏作品中的首选，它们可以是任何颜色，但受限于特定的色调和色彩:那是占据在色轮上的一环。</p>
<p>乍一看，下面的调色板似乎是完全随机的颜色：</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Custom_Palette_01.png">
<p>事实上，这些颜色没有特别的联系，但注意到每一个的亮度和饱和度是相同的-它们都来自于颜色轮的中间环。</p>
<h3 id="基于主题的颜色方案">基于主题的颜色方案</h3><p>很显然，针对每一个游戏主题不是所有的颜色方案都会在视觉上都有吸引力，一个颜色方案应该被用来加强你想传达的情绪。</p>
<p>恐怖电影：最可怕的场景都发生在暗环境下或夜晚，那是因为黑暗的颜色传达了一种不安的感觉。因此，如果你要做一个恐怖游戏，你可能不会选择暖色粉红色作为游戏的主导颜色，你最有可能选择一个单色或自定义调色板组成的深色。</p>
<p>[LIMBO]<a href="http://limbogame.org/" target="_blank" rel="external">http://limbogame.org/</a>是一个让难以置信的全灰色的调色板的游戏。来看一下它是如何给游戏一种怪异的感觉：</p>

<p>在你制作自己的调色板之前，你要看一看你的游戏主题以及媒体资源的一些形式，你经常会发现某些颜色主题会非常适合，有些则不是，让你最奢侈的选择的颜色出现在它们最需要的地方。</p>
<h3 id="创造完美的调色板的秘密">创造完美的调色板的秘密</h3><p>如果我告诉你有一个方法每一次你创建的调色板都能完美的匹配颜色，你会相信吗？我希望你能按照这个方法做，因为我不想下一步让你看起来像巫术。</p>
<p>计算机上所有的颜色都可由三个数字来定义：色调(hue)、饱和度(saturation)、亮度(brightness)，这很重要,因为它们让我们看到了颜色之间的模式和关系，让我们用头脑来理解下每一个值的意义吧。</p>
<p><code>色调(hue)</code>:定义了颜色的实际色调。例如，将红色色调(hue)设置为0，不管你设置的饱和度和亮度。如果你改变了色调(hue)为120，那颜色将改变为绿色，如果你改变到240，颜色将变为蓝色。</p>
<p>如果我们采用了这些颜色，并设置<code>饱和度(saturation)</code>为50，看起来你好像得到了一种不同的颜色，但实际上那只会影响颜色的强度，即颜色的鲜艳度，减少饱和度(saturation)会使颜色看起来不干净。</p>
<p><code>亮度(brightness)</code>是颜色的民安，如果我们减少了颜色亮度，我们会得到相同颜色的暗色调，</p>
<p>要创建一个杰出的调色板，你需要遵循这个原则：</p>
<pre><code>IF hues <span class="operator"><span class="keyword">do</span> <span class="keyword">not</span> equal <span class="keyword">each</span> other
<span class="keyword">THEN</span> <span class="keyword">set</span> saturations <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other
<span class="keyword">AND</span> <span class="keyword">set</span> brightnesses <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other

<span class="keyword">ELSE</span> <span class="keyword">IF</span> saturations <span class="keyword">do</span> <span class="keyword">not</span> equal <span class="keyword">each</span> other
<span class="keyword">THEN</span> <span class="keyword">set</span> hues <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other
<span class="keyword">AND</span> <span class="keyword">set</span> brightnesses <span class="keyword">to</span> <span class="keyword">match</span> <span class="keyword">each</span> other

<span class="keyword">ELSE</span> <span class="keyword">IF</span> brightnesses <span class="keyword">do</span> <span class="keyword">not</span> equal <span class="keyword">each</span> other
<span class="keyword">THEN</span> <span class="keyword">set</span> hues <span class="keyword">to</span> equal <span class="keyword">each</span> other
<span class="keyword">AND</span> <span class="keyword">set</span> saturations <span class="keyword">to</span> equal <span class="keyword">each</span> other</span>
</code></pre><h3 id="但是游戏有很多不同的颜色">但是游戏有很多不同的颜色</h3><p>如果你严格的遵循了上边的规则，你将创造出一个惊人的调色板，但如果你尝试使用调色板，你很有可能最终得到一个扁平的游戏。</p>
<p>那是因为你为每个颜色只配备了单一的颜色，不要担心，我们可以很容易的添加更多行到我们的调色板！所以你必须做的改变是无论是饱和度或者亮度做一个特定的间隔。</p>
<p>这个巨大的调色板中，每一列色调值增加了40，每行亮度值减少了10:</p>
<img src="/2015/09/23/Picking-a-Color-Palette-for-Your-Game-s-Artwork/Final_Palette_01.png">
<pre><code>小提示: 如果你正在使用该调色板对象，则只使用同一行或者列的颜色作为主颜色使用。
</code></pre><h3 id="结论">结论</h3><p>谢谢你花时间读了这篇关于调色板的文章。如果你想了解更多关于颜色对比关系HSB(色调、饱和度、亮度),或者看一些其他配色方案的话(triadic, tetrads, warm/cool)。请随时留下一个评论或问题。</p>
<p><code>本文版权归原作者[Tyler Seitz](http://tutsplus.com/authors/tyler-seitz)所有，欢迎转载，但必须保留此段声明，且在文章页面明显位置给出原文连接.</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>翻译原文<a href="http://gamedevelopment.tutsplus.com/tutorials/picking-a-color-palette-for-your-games-artwork--gamedev-1174" target="_blank" ]]>
    </summary>
    
      <category term="基础教程" scheme="http://tinyflare.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
      <category term="游戏开发" scheme="http://tinyflare.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="美术" scheme="http://tinyflare.com/tags/%E7%BE%8E%E6%9C%AF/"/>
    
      <category term="翻译" scheme="http://tinyflare.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用cocos2dx3.6打造体素游戏]]></title>
    <link href="http://tinyflare.com/2015/09/13/cocos2dxvoxel/"/>
    <id>http://tinyflare.com/2015/09/13/cocos2dxvoxel/</id>
    <published>2015-09-13T01:40:56.000Z</published>
    <updated>2015-09-13T10:09:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是体素游戏">什么是体素游戏</h3><ul>
<li>最大名鼎鼎的当然是《Minecraft》(《我的世界》), 虽然最常冠以沙盒游戏的的分类，但整个世界、角色等都是采用立方体体素打造的，我们也将其分类在体素游戏之内，Voxel(体素)是voluempixel的缩写，是指构成由立体渲染对象构成世界的最小单位。体素不光是单指立方体，也包括各种其他几何体，比如：球体、圆柱体、甚至是复杂几何体的迭代形式。如下图场景就是分别用球体与圆柱体打造：</li>
</ul>
<img src="/2015/09/13/cocos2dxvoxel/snap0000.png"> <img src="/2015/09/13/cocos2dxvoxel/snap0001.png">
<ul>
<li><p>当然随着《Minecraft》的风靡，体素游戏发展到了更高高度，各种体素工具和体素游戏引擎也逐渐出现，虽然不是作为本文重点，但简单介绍2个体素引擎（体素工具在本文的工具篇再详细介绍）:</p>
<ol>
<li><p>VoxelFarm Engine (简称VFE): <a href="http:http://voxelfarm.com" target="_blank" rel="external">http:http://voxelfarm.com</a></p>
</li>
<li><p>Atomontage Engine    (无限细节技术): <a href="http://www.atomontage.com" target="_blank" rel="external">http://www.atomontage.com</a></p>
</li>
<li><p>Voxlap Engine(一个牛人在93年就开始开发的小引擎): <a href="http://advsys.net/ken/voxlap/voxlap05.htm" target="_blank" rel="external">http://advsys.net/ken/voxlap/voxlap05.htm</a></p>
</li>
</ol>
</li>
</ul>
<h3 id="打造一个体素游戏">打造一个体素游戏</h3><ul>
<li>言归正传，本文意在讲述如何用简单快捷的方式打造我们自己的体素游戏，由于手机的火爆，很多简单的游戏也在手机上取得了成功，这类游戏都有着极简的设计和明朗色块的体素，这其中比较有代表性的就是《天天过马路》了，当然也有用2D像素Isometric化模拟的体素游戏，如《cloud path》, 出于追随潮流我也开始打造了一个自己的体素游戏，先来做个广告：《Rainbow’ End》（《彩虹尽头》）28天开发完成，已经在itunes和googleplay上线，欢迎体验。</li>
</ul>
<img src="/2015/09/13/cocos2dxvoxel/xuan_android_cn.png">    
<ul>
<li><p>iTunes下载地址: <a href="https://itunes.apple.com/cn/app/rainbows-end/id1031110631" target="_blank" rel="external">https://itunes.apple.com/cn/app/rainbows-end/id1031110631</a></p>
</li>
<li><p>GooglePlay下载地址: <a href="https://play.google.com/store/apps/details?id=com.wanax.mazejump" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wanax.mazejump</a></p>
</li>
</ul>
<h3 id="本文也是针对这款游戏从工具、引擎、表现方面给大家来讲述：">本文也是针对这款游戏从工具、引擎、表现方面给大家来讲述：</h3><h4 id="工具篇">工具篇</h4><ul>
<li><p>制作体素的工具有很多，当然也可以用3dmax,maya等传统建模工具制作，但不符合快速开发的原则，所以为了在一个月内开发完成，只能花时间去寻找更多的工具。</p>
<ol>
<li><p>Painter3D <a href="http://www.paint3d.net/" target="_blank" rel="external">http://www.paint3d.net/</a></p>
</li>
<li><p>Sproxel <a href="http://sproxel.blogspot.com.br/" target="_blank" rel="external">http://sproxel.blogspot.com.br/</a></p>
</li>
<li><p>Qubicle Constructor <a href="http://www.minddesk.com/qubicle_constructor.php" target="_blank" rel="external">http://www.minddesk.com/qubicle_constructor.php</a></p>
</li>
<li><p>VoxelShop <a href="https://blackflux.com/index.php" target="_blank" rel="external">https://blackflux.com/index.php</a></p>
</li>
<li><p>Qblock (在线制作,可以看到其他玩友上传的作品来寻找灵感) <a href="http://kyucon.com/qblock/" target="_blank" rel="external">http://kyucon.com/qblock/</a></p>
</li>
<li><p>MagicaVoxel Editor (<code>本文使用，重点推荐</code>) <a href="https://voxel.codeplex.com/" target="_blank" rel="external">https://voxel.codeplex.com/</a></p>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本文采用 MagicalVolex Editor 0.93 进行开发 （目前版本0.96.3）</span><br><span class="line">注意：0.93更早的版本没有对相同体素导出时进行顶点优化，会导致游戏中顶点数偏高，游戏性能下降。</span><br><span class="line">MagicalVolex Editor工具使用教程本文不讲，可参考网站提供的教学视频学习。</span><br></pre></td></tr></table></figure>
<img src="/2015/09/13/cocos2dxvoxel/voxel1.png">
<ul>
<li>将通过MagicalVolex Editor建好的体素模型通过export导出选项中的obj导出，再通过3dMax或(Blender3D, Cinema4D, Maya)等传统建模工具的任何一种将obj文件导出成fbx文件备用。（当然本身一些引擎是支持obj文件格式的，包括cocos2dx，之所以转换下是为了使用cocos2dx下的模型的c3b或c3t格式，考虑以后引擎升级可能的模型优化）。</li>
</ul>
<h4 id="引擎篇">引擎篇</h4><ul>
<li><p>U3D + MagicaVoxel Editor是可以非常简单的进行使用开发的，本文不做赘述，由于正版U3D发行问题和作者本身也想测试下cocos2dx 3D部分的性能，所以选择了cocos2dx 3.6版本进行。</p>
</li>
<li><p>首先是模型转化，将fbx文件通过cocos2dx提供的工具fbx-conv进行转化，生成c3b模型文件和纹理文件（注意：这里可以对文件进行优化，可以让游戏中所有使用的模型在MagicalVolex Editor下使用相同的调色版，这样导出的索引色是相同的，这就意味着所有模型可以公用一张纹理文件，可以大大减少io读取时间和显存使用。）</p>
</li>
<li><p>然后初始化3D场景，包括创建天空盒，创建3D摄像机，创建天光，给场景添加灯光，是为了弥补体素对象色彩单一导致的显示比较平的问题，添加灯光来区别体素不同面的间隔，相关代码如下：</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建摄像机</span></span><br><span class="line">m_pMainCamera = Camera::createPerspective(<span class="number">45</span>, size.width/size.height, <span class="number">1</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">if</span>(!m_pMainCamera)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Vec3 camPos = Vec3(<span class="number">0</span>,<span class="number">150.0f</span>*cosf(M_PI/<span class="number">2.8f</span>),<span class="number">150.0f</span>*sinf(M_PI/<span class="number">2.8f</span>));</span><br><span class="line">Vec3 lookAt = Vec3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">m_pMainCamera-&gt;setPosition3D(camPos);</span><br><span class="line">m_pMainCamera-&gt;lookAt(lookAt);</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(m_pMainCamera);</span><br><span class="line">m_pMainCamera-&gt;setCameraFlag(CameraFlag::USER1);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建天空盒子</span></span><br><span class="line">Skybox* skyBox = Skybox::create(<span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>, <span class="string">"sky4.png"</span>);</span><br><span class="line"><span class="keyword">if</span>(!skyBox)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">skyBox-&gt;setScale(<span class="number">1000</span>);    <span class="comment">///注意大于创建摄像机的最远面</span></span><br><span class="line">skyBox-&gt;setCameraMask((<span class="keyword">unsigned</span> <span class="keyword">short</span>)CameraFlag::USER1);   <span class="comment">///设置只能被创建的摄像机看到</span></span><br><span class="line">skyBox-&gt;setGlobalZOrder(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(skyBox);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建环境光</span></span><br><span class="line">AmbientLight* ambientLight = AmbientLight::create(Color3B(<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(ambientLight);</span><br><span class="line"><span class="comment">//设置天光</span></span><br><span class="line">DirectionLight* directionLight = DirectionLight::create(Vec3(-<span class="number">2</span>, -<span class="number">4</span>, -<span class="number">3</span>), Color3B(<span class="number">158</span>, <span class="number">158</span>, <span class="number">158</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(directionLight);</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化场景后，开始加载体素模型，为了增加体素表现可以，为体素增加描边效果。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///创建无描边体素对象</span></span><br><span class="line">Sprite3D<span class="subst">*</span> spriteWithoutOutLine <span class="subst">=</span> Sprite3D<span class="tag">::create</span>(<span class="string">"bear.c3b"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="subst">!</span>spriteWithoutOutLine)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setPosition3D(Vec3(<span class="subst">-</span><span class="number">50</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setRotation3D(Vec3(<span class="number">0</span>,<span class="subst">-</span><span class="number">140</span>,<span class="number">0</span>));</span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setCameraMask((unsigned short)CameraFlag<span class="tag">::USER1</span>);</span><br><span class="line"></span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setForceDepthWrite(<span class="literal">true</span>); <span class="comment">///设置强制3D对象进行深度检测，如果场景中有半透明物体的话</span></span><br><span class="line">this<span class="subst">-&gt;</span>addChild(spriteWithoutOutLine);</span><br><span class="line">    </span><br><span class="line"><span class="comment">///创建有描边体素对象</span></span><br><span class="line">EffectSprite3D<span class="subst">*</span> spriteWitOutLine <span class="subst">=</span> EffectSprite3D<span class="tag">::create</span>(<span class="string">"girl1.c3b"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="subst">!</span>spriteWitOutLine)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>setPosition3D(Vec3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>setRotation3D(Vec3(<span class="number">0</span>,<span class="subst">-</span><span class="number">150</span>,<span class="number">0</span>));</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>setCameraMask((unsigned short)CameraFlag<span class="tag">::USER1</span>);</span><br><span class="line">    </span><br><span class="line">spriteWithoutOutLine<span class="subst">-&gt;</span>setForceDepthWrite(<span class="literal">true</span>); <span class="comment">///设置强制3D对象进行深度检测，如果场景中有半透明物体的话</span></span><br><span class="line">this<span class="subst">-&gt;</span>addChild(spriteWitOutLine);</span><br><span class="line">    </span><br><span class="line">OutlineEffect3D<span class="subst">*</span> outline <span class="subst">=</span> OutlineEffect3D<span class="tag">::create</span>();</span><br><span class="line">outline<span class="subst">-&gt;</span>setOutlineColor(Vec3(<span class="number">0.3</span>f, <span class="number">0.3</span>f, <span class="number">0.3</span>f));</span><br><span class="line">outline<span class="subst">-&gt;</span>setOutlineWidth(<span class="number">0.03</span>f);</span><br><span class="line">spriteWitOutLine<span class="subst">-&gt;</span>addEffect(outline, <span class="number">3</span>); <span class="comment">///设置外描边</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在cocos2dx3.6中添加了针对particle3D的支持，既然做3D游戏，粒子效果也是必不可少的，遗憾的是3.6中粒子部分还有相关bug和资源路径读取相对写死的情况，所以本文例子针对paritcle3D部分对引擎做了相关改动，具体可见引擎源码部分打入的lwwhb标记查看。3D粒子对象创建相关代码如下:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> HelloWorld::spawnExplosion(<span class="keyword">const</span> cocos2d::Vec3&amp; pos)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> explosion = PUParticleSystem3D::create(<span class="string">"explosionSystem.pu"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!explosion)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    explosion-&gt;setCameraMask((<span class="keyword">unsigned</span> <span class="keyword">short</span>)CameraFlag::USER1);</span><br><span class="line">    explosion-&gt;setPosition3D(pos);</span><br><span class="line">    explosion-&gt;setScale(<span class="number">2.0f</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;addChild(explosion);</span><br><span class="line">    explosion-&gt;startParticleSystem();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>彩虹对象采用了ParitcleUniverse的条带系统实现，对象的定义和实现如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> RibbonTrail : <span class="keyword">public</span> cocos2d::Node, <span class="keyword">public</span> cocos2d::BlendProtocol</span><br><span class="line">&#123;</span><br><span class="line">    RibbonTrail();</span><br><span class="line">    <span class="keyword">virtual</span> ~RibbonTrail();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> RibbonTrail* create(<span class="keyword">const</span> std::<span class="built_in">string</span> &amp;textureFile, <span class="keyword">float</span> width, <span class="keyword">float</span> length);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">initWithFile</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;path, <span class="keyword">float</span> width, <span class="keyword">float</span> length)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> delta)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(cocos2d::Renderer* renderer, <span class="keyword">const</span> cocos2d::Mat4&amp; transform, <span class="keyword">uint32_t</span> flags)</span> override</span>;</span><br><span class="line">    <span class="comment">// overrides</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setBlendFunc</span><span class="params">(<span class="keyword">const</span> cocos2d::BlendFunc &amp;blendFunc)</span> override</span>;</span><br><span class="line">    <span class="keyword">virtual</span> <span class="keyword">const</span> cocos2d::BlendFunc &amp;getBlendFunc() <span class="keyword">const</span> override;</span><br><span class="line">    cocos2d::PURibbonTrail* getTrail() <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_pTrail; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    cocos2d::PURibbonTrail*             m_pTrail;</span><br><span class="line">    cocos2d::BlendFunc                  m_BlendFunc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RibbonTrail* RibbonTrail::create(<span class="keyword">const</span> std::<span class="built_in">string</span> &amp;textureFile, <span class="keyword">float</span> width, <span class="keyword">float</span> length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (textureFile.length() &lt; <span class="number">4</span>)</span><br><span class="line">        CCASSERT(<span class="keyword">false</span>, <span class="string">"invalid filename for texture file"</span>);</span><br><span class="line">    <span class="keyword">auto</span> ribbonTrail = <span class="keyword">new</span> (std::nothrow) RibbonTrail();</span><br><span class="line">    <span class="keyword">if</span> (ribbonTrail &amp;&amp; ribbonTrail-&gt;initWithFile(textureFile, width, length))</span><br><span class="line">    &#123;</span><br><span class="line">        ribbonTrail-&gt;autorelease();</span><br><span class="line">        <span class="keyword">return</span> ribbonTrail;</span><br><span class="line">    &#125;</span><br><span class="line">    CC_SAFE_DELETE(ribbonTrail);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">nullptr</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">RibbonTrail::RibbonTrail()</span><br><span class="line">:m_pTrail(<span class="keyword">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_BlendFunc = &#123;GL_SRC_ALPHA , GL_ONE&#125;;</span><br><span class="line">&#125;</span><br><span class="line">RibbonTrail::~RibbonTrail()</span><br><span class="line">&#123;</span><br><span class="line">    m_pTrail = <span class="keyword">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> RibbonTrail::initWithFile(<span class="keyword">const</span> std::<span class="built_in">string</span> &amp;path, <span class="keyword">float</span> width, <span class="keyword">float</span> length )</span><br><span class="line">&#123;</span><br><span class="line">    m_pTrail = <span class="keyword">new</span> (std::nothrow) PURibbonTrail(<span class="string">"RibbonTrail"</span>, path);</span><br><span class="line">    <span class="keyword">if</span>(m_pTrail)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pTrail-&gt;setNumberOfChains(<span class="number">1</span>);</span><br><span class="line">        m_pTrail-&gt;setMaxChainElements(<span class="number">100</span>);</span><br><span class="line">        m_pTrail-&gt;setTrailLength(length);</span><br><span class="line">        m_pTrail-&gt;setUseVertexColours(<span class="keyword">true</span>);</span><br><span class="line">        m_pTrail-&gt;setInitialColour(<span class="number">0</span>, Vec4(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="comment">//m_pTrail-&gt;setColourChange(0, Vec4(0.8, 0.8, 0.8, 0.8));</span></span><br><span class="line">        m_pTrail-&gt;setInitialWidth(<span class="number">0</span>, width);</span><br><span class="line">        m_pTrail-&gt;setDepthTest(<span class="keyword">true</span>);</span><br><span class="line">        m_pTrail-&gt;setDepthWrite(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> RibbonTrail::update(<span class="keyword">float</span> delta)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pTrail)</span><br><span class="line">        m_pTrail-&gt;update(delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> RibbonTrail::draw(Renderer* renderer, <span class="keyword">const</span> Mat4&amp; transform, <span class="keyword">uint32_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_pTrail)</span><br><span class="line">        m_pTrail-&gt;render(renderer, transform, m_BlendFunc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> BlendFunc&amp; RibbonTrail::getBlendFunc() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_BlendFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RibbonTrail::setBlendFunc(<span class="keyword">const</span> BlendFunc &amp;blendFunc)</span><br><span class="line">&#123;</span><br><span class="line">    m_BlendFunc = blendFunc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2015/09/13/cocos2dxvoxel/snap0003.png">
<ul>
<li>相关粒子全部代码下载：<a href="https://github.com/lwwhb/cocos2dx3.6_voxel_tutorial" target="_blank" rel="external">https://github.com/lwwhb/cocos2dx3.6_voxel_tutorial</a></li>
</ul>
<h4 id="后记">后记</h4><ul>
<li>以目前cocos2dx3.6版本提供的3D部分封装，是可以完全满足一个简单3D游戏的需求，而且包体相对U3D实现要小得多，但引擎部分仍然有很多地方需要加强，比如材质系统，没有材质系统的渲染，只能针对每个对象手动设置shader实现。另外cocos2dx中针对Sprite3D的合批操作也没有办法实现，需要修改引擎或采用模型的instancing来去进行速度优化。但总体来说的性能一个简单的体素游戏cocos2dx是可以应付的，大家可以放心使用。</li>
</ul>
<p><code>本文版权归tinyflare.com所有，欢迎转载，但必须保留此段声明，且在文章页面明显位置给出原文连接.</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是体素游戏">什么是体素游戏</h3><ul>
<li>最大名鼎鼎的当然是《Minecraft》(《我的世界》), 虽然最常冠以沙盒游戏的的分类，但整个世界、角色等都是采用立方体体素打造的，我们也将其分类在体素游戏之内，Voxel(体素)是voluempixe]]>
    </summary>
    
      <category term="Rainbow&#39;s End" scheme="http://tinyflare.com/tags/Rainbow-s-End/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="原创分享" scheme="http://tinyflare.com/categories/%E5%8E%9F%E5%88%9B%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《彩虹尽头》上线了]]></title>
    <link href="http://tinyflare.com/2015/09/02/rainbow-avaliable/"/>
    <id>http://tinyflare.com/2015/09/02/rainbow-avaliable/</id>
    <published>2015-09-02T07:01:01.000Z</published>
    <updated>2015-09-02T08:05:42.000Z</updated>
    <content type="html"><![CDATA[<h4 id="28天开发完成，iTunes与GooglePlay_齐上线～～～">28天开发完成，iTunes与GooglePlay 齐上线～～～</h4><img src="/2015/09/02/rainbow-avaliable/xuan_android_cn.png">
<p>iTunes下载地址:<br>英文: <a href="https://itunes.apple.com/us/app/rainbows-end/id1031110631" target="_blank" rel="external">https://itunes.apple.com/us/app/rainbows-end/id1031110631</a><br>中文: <a href="https://itunes.apple.com/cn/app/rainbows-end/id1031110631" target="_blank" rel="external">https://itunes.apple.com/cn/app/rainbows-end/id1031110631</a></p>
<p>GooglePlay下载地址: <a href="https://play.google.com/store/apps/details?id=com.wanax.mazejump" target="_blank" rel="external">https://play.google.com/store/apps/details?id=com.wanax.mazejump</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="28天开发完成，iTunes与GooglePlay_齐上线～～～">28天开发完成，iTunes与GooglePlay 齐上线～～～</h4><img src="/2015/09/02/rainbow-avaliable/xuan_android_cn.png">]]>
    </summary>
    
      <category term="Rainbow&#39;s End" scheme="http://tinyflare.com/tags/Rainbow-s-End/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[北京夕阳]]></title>
    <link href="http://tinyflare.com/2015/08/03/beijingfengjing/"/>
    <id>http://tinyflare.com/2015/08/03/beijingfengjing/</id>
    <published>2015-08-03T12:02:43.000Z</published>
    <updated>2015-08-03T12:12:20.000Z</updated>
    <content type="html"><![CDATA[<h4 id="北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～">北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～</h4><img src="/2015/08/03/beijingfengjing/1.jpg"> <img src="/2015/08/03/beijingfengjing/2.jpg"> <img src="/2015/08/03/beijingfengjing/3.jpg">]]></content>
    <summary type="html">
    <![CDATA[<h4 id="北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～">北京的美总在不经意间～，不仅夕阳美，更出了彩虹～下一个游戏就是与彩虹有关～好兆头～</h4><img src="/2015/08/03/beijingfengjing/1.jpg]]>
    </summary>
    
      <category term="北京" scheme="http://tinyflare.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="夕阳" scheme="http://tinyflare.com/tags/%E5%A4%95%E9%98%B3/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迈向独立开发的第一步]]></title>
    <link href="http://tinyflare.com/2015/08/02/barrage-space/"/>
    <id>http://tinyflare.com/2015/08/02/barrage-space/</id>
    <published>2015-08-02T13:40:28.000Z</published>
    <updated>2015-08-02T14:41:04.000Z</updated>
    <content type="html"><![CDATA[<p>最近为了熟悉cocos2d-x引擎，做了个练手的弹幕游戏，向《Space Wars》《几何战争》致敬，ios已经上线了, 欢迎体验</p>
<p>itunes下载地址：<a href="https://itunes.apple.com/us/app/barrage-space/id995591428?l=zh&amp;ls=1&amp;mt=8" target="_blank" rel="external">https://itunes.apple.com/us/app/barrage-space/id995591428?l=zh&amp;ls=1&amp;mt=8</a> </p>
<h3 id="玩法比较简单：">玩法比较简单：</h3><h4 id="1-左手操控飞行器飞行方向，右手操控涉及方向，">1.左手操控飞行器飞行方向，右手操控涉及方向，</h4><h4 id="2-游戏中会出现10种敌人：">2.游戏中会出现10种敌人：</h4><p><strong>白色圆形</strong>: 以低速追踪撞击玩家飞行器</p>
<p><strong>彩色圆形</strong>: 以较高速追踪撞击玩家飞行器，被击毁后会分裂出6个白色圆形敌人</p>
<p><strong>黄色三角形</strong>: 会以高速追踪撞击玩家飞行器，每间隔一段时间会向玩家发起短距离冲锋。</p>
<p><strong>彩色三角形</strong>: 会以超高速追踪撞击玩家飞行器，每间隔一段时间会向玩家发起超远距离冲锋，非常危险。</p>
<p><strong>绿色菱形</strong>: 会灵活躲避玩家飞行器，并不时的朝玩家发射子弹。</p>
<p><strong>彩色菱形</strong>: 会灵活躲避玩家飞行器，并不时的朝玩家发射5个方向多重射击</p>
<p><strong>蓝色五角星</strong>:会追踪撞击玩家飞行器，并不时的向五个角的方向发射连续弹幕</p>
<p><strong>彩色五角星</strong>:会追踪撞击玩家飞行器，并向周围随机发射大量弹幕，要躲避这些子弹有点难度</p>
<p><strong>红色六边形</strong>:会任意在空间中制造激光带，撞上玩家就挂了</p>
<p><strong>彩色六边形</strong>:会在空间中制造黑洞，一旦玩家飞行器靠近，就会被吸进去。</p>
<h4 id="3-游戏中还会出现五种辅助道具，帮助玩家生存">3.游戏中还会出现五种辅助道具，帮助玩家生存</h4><p><strong>紫色闪电</strong>: 加快飞行器射击速度</p>
<p><strong>绿色五角星</strong>: 会使玩家飞行器拥有同时向三个方向射击的能力</p>
<p><strong>黄色花环</strong>: 会让玩家飞行器处于无敌状态</p>
<p><strong>蓝色表盘</strong>: 会使空间时间静止，但玩家飞行器不受影响 </p>
<p><strong>橘色核弹</strong>: 会在玩家飞行器周围产生爆炸弹幕，帮助玩家清除敌人</p>
<h4 id="4-_另外通过收集星辰可以升级飞行器三种能力，分别是：星辰掉落概率，道具掉落概率和增加道具效果时间">4. 另外通过收集星辰可以升级飞行器三种能力，分别是：星辰掉落概率，道具掉落概率和增加道具效果时间</h4><h3 id="截图">截图</h3><img src="/2015/08/02/barrage-space/0.png"> <img src="/2015/08/02/barrage-space/1.png"> <img src="/2015/08/02/barrage-space/2.png"> <img src="/2015/08/02/barrage-space/3.png"> <img src="/2015/08/02/barrage-space/4.png">
]]></content>
    <summary type="html">
    <![CDATA[<p>最近为了熟悉cocos2d-x引擎，做了个练手的弹幕游戏，向《Space Wars》《几何战争》致敬，ios已经上线了, 欢迎体验</p>
<p>itunes下载地址：<a href="https://itunes.apple.com/us/app/barrage-spac]]>
    </summary>
    
      <category term="BarrageSpace" scheme="http://tinyflare.com/tags/BarrageSpace/"/>
    
      <category term="cocos2d-x" scheme="http://tinyflare.com/tags/cocos2d-x/"/>
    
      <category term="我的游戏" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IndieAce GameJam 2015]]></title>
    <link href="http://tinyflare.com/2015/07/19/IndieAce-gamejame-201r5/"/>
    <id>http://tinyflare.com/2015/07/19/IndieAce-gamejame-201r5/</id>
    <published>2015-07-19T01:45:01.000Z</published>
    <updated>2015-07-19T02:49:16.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://img.youxiguancha.com/news/mater_3_bc0e6c5e03e5830b218b5f8abd6851f9.jpg" alt="gamejam2015 icon" title="gamejam2015"></p>
<p><em>**</em>上周和2个小伙伴一起参加了GameJam比赛，毕竟要走独立开发这条难走的路，也算去感受了一次gamejam的氛围。总体来说感觉还不错，当有一个目标的时候，效率出奇的高，不包括睡觉用了26个小时完成了这个项目，这次比三的题目是：</p>
<img src="/2015/07/19/IndieAce-gamejame-201r5/title.png">
<p><em>**</em>题目很开放，第一感觉和大家一样都是这不是OOXX那个九宫格么，肯定不能这么low了，想到之前在职做商业游戏时的各种压抑突然觉得这就是个没有色彩，禁锢生活和创意牢笼，跳出牢笼这也是我辞职走独立开发想法的来源，于是破除牢笼，追寻色彩之旅来了。</p>
<img src="/2015/07/19/IndieAce-gamejame-201r5/1.png"> <img src="/2015/07/19/IndieAce-gamejame-201r5/2.png">
<img src="/2015/07/19/IndieAce-gamejame-201r5/3.png"> <img src="/2015/07/19/IndieAce-gamejame-201r5/4.png">
<img src="/2015/07/19/IndieAce-gamejame-201r5/5.jpg"> <img src="/2015/07/19/IndieAce-gamejame-201r5/6.jpg">
<h6 id="附上下载地址">附上下载地址</h6><p><a href="http://gamejam.indieace.com/Game.aspx?gamejam_id=2&amp;game_id=253" target="_blank" rel="external">http://gamejam.indieace.com/Game.aspx?gamejam_id=2&amp;game_id=253</a> </p>
<p>**注意android版本有无音乐的bug，建议下载源码自己编译mac版本</p>
<h6 id="github下载地址：">github下载地址：</h6><p><a href="https://github.com/lwwhb/GameJam.git" target="_blank" rel="external">https://github.com/lwwhb/GameJam.git</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://img.youxiguancha.com/news/mater_3_bc0e6c5e03e5830b218b5f8abd6851f9.jpg" alt="gamejam2015 icon" title="gamejam2015"></p>
]]>
    </summary>
    
      <category term="gamejam" scheme="http://tinyflare.com/tags/gamejam/"/>
    
      <category term="感悟" scheme="http://tinyflare.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的起点]]></title>
    <link href="http://tinyflare.com/2015/07/18/new_start_point/"/>
    <id>http://tinyflare.com/2015/07/18/new_start_point/</id>
    <published>2015-07-18T07:51:27.000Z</published>
    <updated>2015-07-19T02:04:31.000Z</updated>
    <content type="html"><![CDATA[<img src="/2015/07/18/new_start_point/logo.png">
<h5 id="今天开始独立游戏之旅，上路，加油～">今天开始独立游戏之旅，上路，加油～</h5>]]></content>
    <summary type="html">
    <![CDATA[<img src="/2015/07/18/new_start_point/logo.png">
<h5 id="今天开始独立游戏之旅，上路，加油～">今天开始独立游戏之旅，上路，加油～</h5>]]>
    </summary>
    
      <category term="感悟" scheme="http://tinyflare.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="我的生活" scheme="http://tinyflare.com/categories/%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>